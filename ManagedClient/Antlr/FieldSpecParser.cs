//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.3
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from FieldSpec.g4 by ANTLR 4.3

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591

namespace ManagedClient.Quality {
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using System.Collections.Generic;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.3")]
[System.CLSCompliant(false)]
public partial class FieldSpecParser : Parser {
	public const int
		BANG=1, DELIMITER=2, EXPR=3, MINUS=4;
	public static readonly string[] tokenNames = {
		"<INVALID>", "'!'", "DELIMITER", "EXPR", "'-'"
	};
	public const int
		RULE_program = 0, RULE_include = 1, RULE_exclude = 2, RULE_specItem = 3;
	public static readonly string[] ruleNames = {
		"program", "include", "exclude", "specItem"
	};

	public override string GrammarFileName { get { return "FieldSpec.g4"; } }

	public override string[] TokenNames { get { return tokenNames; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return _serializedATN; } }

	public FieldSpecParser(ITokenStream input)
		: base(input)
	{
		_interp = new ParserATNSimulator(this,_ATN);
	}
	public partial class ProgramContext : ParserRuleContext {
		public ITerminalNode Eof() { return GetToken(FieldSpecParser.Eof, 0); }
		public IncludeContext include() {
			return GetRuleContext<IncludeContext>(0);
		}
		public ExcludeContext exclude() {
			return GetRuleContext<ExcludeContext>(0);
		}
		public ProgramContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_program; } }
		public override void EnterRule(IParseTreeListener listener) {
			IFieldSpecListener typedListener = listener as IFieldSpecListener;
			if (typedListener != null) typedListener.EnterProgram(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IFieldSpecListener typedListener = listener as IFieldSpecListener;
			if (typedListener != null) typedListener.ExitProgram(this);
		}
	}

	[RuleVersion(0)]
	public ProgramContext program() {
		ProgramContext _localctx = new ProgramContext(_ctx, State);
		EnterRule(_localctx, 0, RULE_program);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 8; include();
			State = 10;
			_la = _input.La(1);
			if (_la==BANG) {
				{
				State = 9; exclude();
				}
			}

			State = 12; Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IncludeContext : ParserRuleContext {
		public SpecItemContext[] specItem() {
			return GetRuleContexts<SpecItemContext>();
		}
		public SpecItemContext specItem(int i) {
			return GetRuleContext<SpecItemContext>(i);
		}
		public IncludeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_include; } }
		public override void EnterRule(IParseTreeListener listener) {
			IFieldSpecListener typedListener = listener as IFieldSpecListener;
			if (typedListener != null) typedListener.EnterInclude(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IFieldSpecListener typedListener = listener as IFieldSpecListener;
			if (typedListener != null) typedListener.ExitInclude(this);
		}
	}

	[RuleVersion(0)]
	public IncludeContext include() {
		IncludeContext _localctx = new IncludeContext(_ctx, State);
		EnterRule(_localctx, 2, RULE_include);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 15;
			_errHandler.Sync(this);
			_la = _input.La(1);
			do {
				{
				{
				State = 14; specItem();
				}
				}
				State = 17;
				_errHandler.Sync(this);
				_la = _input.La(1);
			} while ( _la==EXPR );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExcludeContext : ParserRuleContext {
		public SpecItemContext[] specItem() {
			return GetRuleContexts<SpecItemContext>();
		}
		public ITerminalNode BANG() { return GetToken(FieldSpecParser.BANG, 0); }
		public SpecItemContext specItem(int i) {
			return GetRuleContext<SpecItemContext>(i);
		}
		public ExcludeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_exclude; } }
		public override void EnterRule(IParseTreeListener listener) {
			IFieldSpecListener typedListener = listener as IFieldSpecListener;
			if (typedListener != null) typedListener.EnterExclude(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IFieldSpecListener typedListener = listener as IFieldSpecListener;
			if (typedListener != null) typedListener.ExitExclude(this);
		}
	}

	[RuleVersion(0)]
	public ExcludeContext exclude() {
		ExcludeContext _localctx = new ExcludeContext(_ctx, State);
		EnterRule(_localctx, 4, RULE_exclude);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 19; Match(BANG);
			State = 21;
			_errHandler.Sync(this);
			_la = _input.La(1);
			do {
				{
				{
				State = 20; specItem();
				}
				}
				State = 23;
				_errHandler.Sync(this);
				_la = _input.La(1);
			} while ( _la==EXPR );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SpecItemContext : ParserRuleContext {
		public ITerminalNode EXPR() { return GetToken(FieldSpecParser.EXPR, 0); }
		public SpecItemContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_specItem; } }
		public override void EnterRule(IParseTreeListener listener) {
			IFieldSpecListener typedListener = listener as IFieldSpecListener;
			if (typedListener != null) typedListener.EnterSpecItem(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IFieldSpecListener typedListener = listener as IFieldSpecListener;
			if (typedListener != null) typedListener.ExitSpecItem(this);
		}
	}

	[RuleVersion(0)]
	public SpecItemContext specItem() {
		SpecItemContext _localctx = new SpecItemContext(_ctx, State);
		EnterRule(_localctx, 6, RULE_specItem);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 25; Match(EXPR);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public static readonly string _serializedATN =
		"\x3\xAF6F\x8320\x479D\xB75C\x4880\x1605\x191C\xAB37\x3\x6\x1E\x4\x2\t"+
		"\x2\x4\x3\t\x3\x4\x4\t\x4\x4\x5\t\x5\x3\x2\x3\x2\x5\x2\r\n\x2\x3\x2\x3"+
		"\x2\x3\x3\x6\x3\x12\n\x3\r\x3\xE\x3\x13\x3\x4\x3\x4\x6\x4\x18\n\x4\r\x4"+
		"\xE\x4\x19\x3\x5\x3\x5\x3\x5\x2\x2\x2\x6\x2\x2\x4\x2\x6\x2\b\x2\x2\x2"+
		"\x1C\x2\n\x3\x2\x2\x2\x4\x11\x3\x2\x2\x2\x6\x15\x3\x2\x2\x2\b\x1B\x3\x2"+
		"\x2\x2\n\f\x5\x4\x3\x2\v\r\x5\x6\x4\x2\f\v\x3\x2\x2\x2\f\r\x3\x2\x2\x2"+
		"\r\xE\x3\x2\x2\x2\xE\xF\a\x2\x2\x3\xF\x3\x3\x2\x2\x2\x10\x12\x5\b\x5\x2"+
		"\x11\x10\x3\x2\x2\x2\x12\x13\x3\x2\x2\x2\x13\x11\x3\x2\x2\x2\x13\x14\x3"+
		"\x2\x2\x2\x14\x5\x3\x2\x2\x2\x15\x17\a\x3\x2\x2\x16\x18\x5\b\x5\x2\x17"+
		"\x16\x3\x2\x2\x2\x18\x19\x3\x2\x2\x2\x19\x17\x3\x2\x2\x2\x19\x1A\x3\x2"+
		"\x2\x2\x1A\a\x3\x2\x2\x2\x1B\x1C\a\x5\x2\x2\x1C\t\x3\x2\x2\x2\x5\f\x13"+
		"\x19";
	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN.ToCharArray());
}
} // namespace ManagedClient.Quality
