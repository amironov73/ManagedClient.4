//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.3
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from Pft.g4 by ANTLR 4.3

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591

namespace ManagedClient.Pft {
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using System.Collections.Generic;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.3")]
[System.CLSCompliant(false)]
public partial class PftParser : Parser {
	public const int
		COMMANDC=1, COMMANDX=2, CONDITIONAL=3, ESCAPED=4, FIELD=5, FLOAT=6, FORMATEXIT=7, 
		GLOBALVAR=8, ID=9, INCLUSION=10, LONGLITERAL=11, MFNWITHLENGTH=12, MODESWITCH=13, 
		REPEATABLE=14, UNCONDITIONAL=15, A=16, AND=17, APPDIR=18, APPENDFILE=19, 
		APPSETTING=20, ASK=21, AT=22, AUTHOR=23, BANG=24, BEEP=25, BOLD=26, BREAK=27, 
		CALL=28, CASE=29, CAT=30, COLOR=31, CENTER=32, CHANGEDB=33, CHOOSE=34, 
		CHR=35, CLIENTVERSION=36, CMDLINE=37, COLON=38, COMBINE=39, COMMA=40, 
		COMPARE=41, CONNECTED=42, COUT=43, CPU=44, CREATEDB=45, CURDIR=46, DATABASE=47, 
		DATE=48, DEBUG=49, DELETED=50, DELETEDB=51, DELETEFILE=52, DELREC=53, 
		EAT=54, EDITTEXT=55, END=56, ELSE=57, ENDSWITH=58, EQUALS=59, ERROR=60, 
		EXIST=61, EXPANDENV=62, EXTRACTDIR=63, EXTRACTDRIVE=64, EXTRACTEXT=65, 
		EXTRACTNAME=66, F=67, F2=68, FATAL=69, FI=70, FILEEXIST=71, FILESIZE=72, 
		FONTNAME=73, FONTSIZE=74, FOR=75, FORMAT=76, FREEMEMORY=77, GETENV=78, 
		HASH=79, HAVE=80, HEADER1=81, HEADER2=82, HEADER3=83, HOST=84, HTML=85, 
		IF=86, IFF=87, INCLUDE=88, INCREMENT=89, INI=90, INTERACTIVE=91, IOCC=92, 
		ITALIC=93, L=94, LAST=95, LCURLY=96, LEFT=97, LESS=98, LESSEQ=99, LICENSECOUNT=100, 
		LICENSELEFT=101, LICENSEUSED=102, LINEBREAK=103, LOCALIP=104, LPAREN=105, 
		MACHINENAME=106, MAP=107, MAXMFN=108, MESSAGE=109, MFN=110, MID=111, MINUS=112, 
		MORE=113, MOREEQ=114, MSG=115, MSTNAME=116, NEWREC=117, NEXT=118, NL=119, 
		NOCC=120, NOT=121, NOTEQUALS=122, NOW=123, NPOST=124, OR=125, ORD=126, 
		ORGANIZATION=127, OS=128, P=129, PAD=130, PADLEFT=131, PADRIGHT=132, PAGEBREAK=133, 
		PARA=134, PERCENT=135, PFT=136, PLAIN=137, PLATFORM=138, PLUS=139, POPMODE=140, 
		PORT=141, PROC=142, PROCEDURE=143, PUSHMODE=144, PUTENV=145, RAVR=146, 
		RCURLY=147, READFILE=148, READLINE=149, REF=150, REPLACE=151, REQUIRECLIENT=152, 
		REQUIRESERVER=153, REVERT=154, RIGHT=155, RMAX=156, RMIN=157, RPAREN=158, 
		RSUM=159, RTF=160, RUNTIME=161, S=162, SELECT=163, SEMICOLON=164, SERVERVERSION=165, 
		SIZE=166, SLASH=167, STAR=168, STARTSWITH=169, SYSDIR=170, SYSTEM=171, 
		TEMPDIR=172, THEN=173, TILDA=174, TIME=175, TITLE=176, TOLOWER=177, TOTALMEMORY=178, 
		TOUCHFILE=179, TOUPPER=180, TRACE=181, TRIM=182, TRIMLEFT=183, TRIMRIGHT=184, 
		TRUNCATEFILE=185, TYPE=186, UNDELREC=187, UNDERLINE=188, USER=189, VAL=190, 
		VAL2=191, VERSION=192, WARNING=193, WHILE=194, WORKINGSET=195, WRITE=196, 
		WRITEFILE=197, X64=198, WS=199, COMMENT=200;
	public static readonly string[] tokenNames = {
		"<INVALID>", "COMMANDC", "COMMANDX", "CONDITIONAL", "ESCAPED", "FIELD", 
		"FLOAT", "FORMATEXIT", "GLOBALVAR", "ID", "INCLUSION", "LONGLITERAL", 
		"MFNWITHLENGTH", "MODESWITCH", "REPEATABLE", "UNCONDITIONAL", "A", "AND", 
		"APPDIR", "APPENDFILE", "APPSETTING", "ASK", "'@'", "AUTHOR", "'!'", "BEEP", 
		"BOLD", "BREAK", "CALL", "CASE", "CAT", "COLOR", "CENTER", "CHANGEDB", 
		"CHOOSE", "CHR", "CLIENTVERSION", "CMDLINE", "':'", "COMBINE", "','", 
		"COMPARE", "CONNECTED", "COUT", "CPU", "CREATEDB", "CURDIR", "DATABASE", 
		"DATE", "DEBUG", "DELETED", "DELETEDB", "DELETEFILE", "DELREC", "EAT", 
		"EDITTEXT", "END", "ELSE", "ENDSWITH", "'='", "ERROR", "EXIST", "EXPANDENV", 
		"EXTRACTDIR", "EXTRACTDRIVE", "EXTRACTEXT", "EXTRACTNAME", "F", "F2", 
		"FATAL", "FI", "FILEEXIST", "FILESIZE", "FONTNAME", "FONTSIZE", "FOR", 
		"FORMAT", "FREEMEMORY", "GETENV", "'#'", "HAVE", "HEADER1", "HEADER2", 
		"HEADER3", "HOST", "HTML", "IF", "IFF", "INCLUDE", "INCREMENT", "INI", 
		"INTERACTIVE", "IOCC", "ITALIC", "L", "LAST", "'{'", "LEFT", "'<'", "'<='", 
		"LICENSECOUNT", "LICENSELEFT", "LICENSEUSED", "LINEBREAK", "LOCALIP", 
		"'('", "MACHINENAME", "MAP", "MAXMFN", "MESSAGE", "MFN", "MID", "'-'", 
		"'>'", "'>='", "MSG", "MSTNAME", "NEWREC", "NEXT", "NL", "NOCC", "NOT", 
		"'<>'", "NOW", "NPOST", "OR", "ORD", "ORGANIZATION", "OS", "P", "PAD", 
		"PADLEFT", "PADRIGHT", "PAGEBREAK", "PARA", "'%'", "PFT", "PLAIN", "PLATFORM", 
		"'+'", "POPMODE", "PORT", "PROC", "PROCEDURE", "PUSHMODE", "PUTENV", "RAVR", 
		"'}'", "READFILE", "READLINE", "REF", "REPLACE", "REQUIRECLIENT", "REQUIRESERVER", 
		"REVERT", "RIGHT", "RMAX", "RMIN", "')'", "RSUM", "RTF", "RUNTIME", "S", 
		"SELECT", "';'", "SERVERVERSION", "SIZE", "'/'", "'*'", "STARTSWITH", 
		"SYSDIR", "SYSTEM", "TEMPDIR", "THEN", "'~'", "TIME", "TITLE", "TOLOWER", 
		"TOTALMEMORY", "TOUCHFILE", "TOUPPER", "TRACE", "TRIM", "TRIMLEFT", "TRIMRIGHT", 
		"TRUNCATEFILE", "TYPE", "UNDELREC", "UNDERLINE", "USER", "VAL", "VAL2", 
		"VERSION", "WARNING", "WHILE", "WORKINGSET", "WRITE", "WRITEFILE", "X64", 
		"WS", "COMMENT"
	};
	public const int
		RULE_program = 0, RULE_compositeElement = 1, RULE_compositeList = 2, RULE_simpleFormat = 3, 
		RULE_pftInfoBlock = 4, RULE_authorInfo = 5, RULE_titleInfo = 6, RULE_versioInfo = 7, 
		RULE_formatInfo = 8, RULE_commaOperator = 9, RULE_assignment = 10, RULE_arithAssignment = 11, 
		RULE_stringAssignment = 12, RULE_forLoop = 13, RULE_whileLoop = 14, RULE_selectStatement = 15, 
		RULE_procedureStatement = 16, RULE_procedureArguments = 17, RULE_procedureBody = 18, 
		RULE_callStatement = 19, RULE_primaryElement = 20, RULE_appDirFunction = 21, 
		RULE_appendFileFunction = 22, RULE_appSettingFunction = 23, RULE_askFunction = 24, 
		RULE_beepOperator = 25, RULE_boldFunction = 26, RULE_breakOperator = 27, 
		RULE_catFunction = 28, RULE_center = 29, RULE_changeDbFunction = 30, RULE_chooseFunction = 31, 
		RULE_chrFunction = 32, RULE_clientVersionFunction = 33, RULE_cmdlineFunction = 34, 
		RULE_colorFunction = 35, RULE_combineFunction = 36, RULE_commandC = 37, 
		RULE_commandX = 38, RULE_coutFunction = 39, RULE_createDbFunction = 40, 
		RULE_cpuFunction = 41, RULE_curdirFunction = 42, RULE_databaseFunction = 43, 
		RULE_dateFunction = 44, RULE_debugBreak = 45, RULE_debugStatement = 46, 
		RULE_deleteDbFunction = 47, RULE_deleteFileFunction = 48, RULE_delRecFunction = 49, 
		RULE_eatFunction = 50, RULE_editTextFunction = 51, RULE_errorStatement = 52, 
		RULE_escapedLiteral = 53, RULE_expandEnvFunction = 54, RULE_extractDirFunction = 55, 
		RULE_extractDriveFunction = 56, RULE_extractExtFunction = 57, RULE_extractNameFunction = 58, 
		RULE_fatalStatement = 59, RULE_f2Function = 60, RULE_fFunction = 61, RULE_fontNameFunction = 62, 
		RULE_fontSizeFunction = 63, RULE_formatExitStatement = 64, RULE_getenvFunction = 65, 
		RULE_hashOperator = 66, RULE_header1Function = 67, RULE_header2Function = 68, 
		RULE_header3Function = 69, RULE_hostFunction = 70, RULE_iffFunction = 71, 
		RULE_includeFunction = 72, RULE_includeStatement = 73, RULE_incrementFunction = 74, 
		RULE_iniFunction = 75, RULE_italicFunction = 76, RULE_leftFunction = 77, 
		RULE_lineBreak = 78, RULE_localIPFunction = 79, RULE_longLiteral = 80, 
		RULE_machineNameFunction = 81, RULE_mapFunction = 82, RULE_messageFunction = 83, 
		RULE_mfnOperator = 84, RULE_midFunction = 85, RULE_modeSwitch = 86, RULE_msgFunction = 87, 
		RULE_mstnameFunction = 88, RULE_newrecFunction = 89, RULE_nlOperator = 90, 
		RULE_nowFunction = 91, RULE_organizationFunction = 92, RULE_osFunction = 93, 
		RULE_padFunction = 94, RULE_padLeftFunction = 95, RULE_padRightFunction = 96, 
		RULE_pageBreak = 97, RULE_paraOperator = 98, RULE_percentOperator = 99, 
		RULE_platformFunction = 100, RULE_popModeOperator = 101, RULE_portFunction = 102, 
		RULE_procFunction = 103, RULE_pushModeOperator = 104, RULE_putenvFunction = 105, 
		RULE_readFileFunction = 106, RULE_readLineFunction = 107, RULE_refFunction = 108, 
		RULE_replaceFunction = 109, RULE_requireClientFunction = 110, RULE_requireServerFunction = 111, 
		RULE_revertFunction = 112, RULE_rightFunction = 113, RULE_runtimeFunction = 114, 
		RULE_serverVersionFunction = 115, RULE_sFunction = 116, RULE_slashOperator = 117, 
		RULE_sysdirFunction = 118, RULE_systemFunction = 119, RULE_tempdirFunction = 120, 
		RULE_timeFunction = 121, RULE_tolowerFunction = 122, RULE_touchFileFunction = 123, 
		RULE_toupperFunction = 124, RULE_traceStatement = 125, RULE_trimFunction = 126, 
		RULE_trimLeftFunction = 127, RULE_trimRightFunction = 128, RULE_truncateFileFunction = 129, 
		RULE_typeFunction = 130, RULE_unconditionalLiteral = 131, RULE_undelRecFunction = 132, 
		RULE_underlineFunction = 133, RULE_userFunction = 134, RULE_warningStatement = 135, 
		RULE_writeFunction = 136, RULE_writeFileFunction = 137, RULE_fieldReference = 138, 
		RULE_globalReference = 139, RULE_leftHand = 140, RULE_rightHand = 141, 
		RULE_fieldList = 142, RULE_conditionalLiteral = 143, RULE_repeatableLiteral = 144, 
		RULE_groupStatement = 145, RULE_extendedGroupStatement = 146, RULE_conditionalStatement = 147, 
		RULE_condition = 148, RULE_conditionNot = 149, RULE_conditionParen = 150, 
		RULE_conditionString = 151, RULE_conditionBoolean = 152, RULE_conditionArith = 153, 
		RULE_arithExpr = 154, RULE_numericValue = 155, RULE_floatValue = 156, 
		RULE_minusValue = 157, RULE_parenValue = 158, RULE_mfnValue = 159, RULE_variableReference = 160, 
		RULE_arithFunction = 161, RULE_compareFunction = 162, RULE_fileSizeFunction = 163, 
		RULE_freeMemoryFunction = 164, RULE_ioccOperator = 165, RULE_lFunction = 166, 
		RULE_licenseCountFunction = 167, RULE_licenseLeftFunction = 168, RULE_licenseUsedFunction = 169, 
		RULE_maxMfnFunction = 170, RULE_noccFunction = 171, RULE_noccOperator = 172, 
		RULE_npostFunction = 173, RULE_ordFunction = 174, RULE_ravrFunction = 175, 
		RULE_rmaxFunction = 176, RULE_rminFunction = 177, RULE_rsumFunction = 178, 
		RULE_sizeFunction = 179, RULE_totalMemoryFunction = 180, RULE_valFunction = 181, 
		RULE_val2Function = 182, RULE_workingSetFunction = 183, RULE_connectedFunction = 184, 
		RULE_deletedFunction = 185, RULE_endsWithFunction = 186, RULE_existFunction = 187, 
		RULE_fieldPresense = 188, RULE_fileExistFunction = 189, RULE_haveFunction = 190, 
		RULE_interactiveFunction = 191, RULE_startsWithFunction = 192, RULE_x64Function = 193, 
		RULE_unused = 194;
	public static readonly string[] ruleNames = {
		"program", "compositeElement", "compositeList", "simpleFormat", "pftInfoBlock", 
		"authorInfo", "titleInfo", "versioInfo", "formatInfo", "commaOperator", 
		"assignment", "arithAssignment", "stringAssignment", "forLoop", "whileLoop", 
		"selectStatement", "procedureStatement", "procedureArguments", "procedureBody", 
		"callStatement", "primaryElement", "appDirFunction", "appendFileFunction", 
		"appSettingFunction", "askFunction", "beepOperator", "boldFunction", "breakOperator", 
		"catFunction", "center", "changeDbFunction", "chooseFunction", "chrFunction", 
		"clientVersionFunction", "cmdlineFunction", "colorFunction", "combineFunction", 
		"commandC", "commandX", "coutFunction", "createDbFunction", "cpuFunction", 
		"curdirFunction", "databaseFunction", "dateFunction", "debugBreak", "debugStatement", 
		"deleteDbFunction", "deleteFileFunction", "delRecFunction", "eatFunction", 
		"editTextFunction", "errorStatement", "escapedLiteral", "expandEnvFunction", 
		"extractDirFunction", "extractDriveFunction", "extractExtFunction", "extractNameFunction", 
		"fatalStatement", "f2Function", "fFunction", "fontNameFunction", "fontSizeFunction", 
		"formatExitStatement", "getenvFunction", "hashOperator", "header1Function", 
		"header2Function", "header3Function", "hostFunction", "iffFunction", "includeFunction", 
		"includeStatement", "incrementFunction", "iniFunction", "italicFunction", 
		"leftFunction", "lineBreak", "localIPFunction", "longLiteral", "machineNameFunction", 
		"mapFunction", "messageFunction", "mfnOperator", "midFunction", "modeSwitch", 
		"msgFunction", "mstnameFunction", "newrecFunction", "nlOperator", "nowFunction", 
		"organizationFunction", "osFunction", "padFunction", "padLeftFunction", 
		"padRightFunction", "pageBreak", "paraOperator", "percentOperator", "platformFunction", 
		"popModeOperator", "portFunction", "procFunction", "pushModeOperator", 
		"putenvFunction", "readFileFunction", "readLineFunction", "refFunction", 
		"replaceFunction", "requireClientFunction", "requireServerFunction", "revertFunction", 
		"rightFunction", "runtimeFunction", "serverVersionFunction", "sFunction", 
		"slashOperator", "sysdirFunction", "systemFunction", "tempdirFunction", 
		"timeFunction", "tolowerFunction", "touchFileFunction", "toupperFunction", 
		"traceStatement", "trimFunction", "trimLeftFunction", "trimRightFunction", 
		"truncateFileFunction", "typeFunction", "unconditionalLiteral", "undelRecFunction", 
		"underlineFunction", "userFunction", "warningStatement", "writeFunction", 
		"writeFileFunction", "fieldReference", "globalReference", "leftHand", 
		"rightHand", "fieldList", "conditionalLiteral", "repeatableLiteral", "groupStatement", 
		"extendedGroupStatement", "conditionalStatement", "condition", "conditionNot", 
		"conditionParen", "conditionString", "conditionBoolean", "conditionArith", 
		"arithExpr", "numericValue", "floatValue", "minusValue", "parenValue", 
		"mfnValue", "variableReference", "arithFunction", "compareFunction", "fileSizeFunction", 
		"freeMemoryFunction", "ioccOperator", "lFunction", "licenseCountFunction", 
		"licenseLeftFunction", "licenseUsedFunction", "maxMfnFunction", "noccFunction", 
		"noccOperator", "npostFunction", "ordFunction", "ravrFunction", "rmaxFunction", 
		"rminFunction", "rsumFunction", "sizeFunction", "totalMemoryFunction", 
		"valFunction", "val2Function", "workingSetFunction", "connectedFunction", 
		"deletedFunction", "endsWithFunction", "existFunction", "fieldPresense", 
		"fileExistFunction", "haveFunction", "interactiveFunction", "startsWithFunction", 
		"x64Function", "unused"
	};

	public override string GrammarFileName { get { return "Pft.g4"; } }

	public override string[] TokenNames { get { return tokenNames; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return _serializedATN; } }

	public PftParser(ITokenStream input)
		: base(input)
	{
		_interp = new ParserATNSimulator(this,_ATN);
	}
	public partial class ProgramContext : ParserRuleContext {
		public ITerminalNode Eof() { return GetToken(PftParser.Eof, 0); }
		public CompositeElementContext[] compositeElement() {
			return GetRuleContexts<CompositeElementContext>();
		}
		public CompositeElementContext compositeElement(int i) {
			return GetRuleContext<CompositeElementContext>(i);
		}
		public PftInfoBlockContext pftInfoBlock() {
			return GetRuleContext<PftInfoBlockContext>(0);
		}
		public ProgramContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_program; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPftListener typedListener = listener as IPftListener;
			if (typedListener != null) typedListener.EnterProgram(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPftListener typedListener = listener as IPftListener;
			if (typedListener != null) typedListener.ExitProgram(this);
		}
	}

	[RuleVersion(0)]
	public ProgramContext program() {
		ProgramContext _localctx = new ProgramContext(_ctx, State);
		EnterRule(_localctx, 0, RULE_program);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 391;
			_la = _input.La(1);
			if (_la==PFT) {
				{
				State = 390; pftInfoBlock();
				}
			}

			State = 396;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << COMMANDC) | (1L << COMMANDX) | (1L << CONDITIONAL) | (1L << ESCAPED) | (1L << FIELD) | (1L << FORMATEXIT) | (1L << GLOBALVAR) | (1L << ID) | (1L << INCLUSION) | (1L << LONGLITERAL) | (1L << MFNWITHLENGTH) | (1L << MODESWITCH) | (1L << REPEATABLE) | (1L << UNCONDITIONAL) | (1L << APPDIR) | (1L << APPENDFILE) | (1L << APPSETTING) | (1L << ASK) | (1L << BANG) | (1L << BEEP) | (1L << BOLD) | (1L << BREAK) | (1L << CALL) | (1L << CAT) | (1L << COLOR) | (1L << CENTER) | (1L << CHANGEDB) | (1L << CHOOSE) | (1L << CHR) | (1L << CLIENTVERSION) | (1L << CMDLINE) | (1L << COMBINE) | (1L << COMMA) | (1L << COUT) | (1L << CPU) | (1L << CREATEDB) | (1L << CURDIR) | (1L << DATABASE) | (1L << DATE) | (1L << DEBUG) | (1L << DELETEDB) | (1L << DELETEFILE) | (1L << DELREC) | (1L << EAT) | (1L << EDITTEXT) | (1L << ERROR) | (1L << EXPANDENV) | (1L << EXTRACTDIR))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (EXTRACTDRIVE - 64)) | (1L << (EXTRACTEXT - 64)) | (1L << (EXTRACTNAME - 64)) | (1L << (F - 64)) | (1L << (F2 - 64)) | (1L << (FATAL - 64)) | (1L << (FONTNAME - 64)) | (1L << (FONTSIZE - 64)) | (1L << (FOR - 64)) | (1L << (GETENV - 64)) | (1L << (HASH - 64)) | (1L << (HEADER1 - 64)) | (1L << (HEADER2 - 64)) | (1L << (HEADER3 - 64)) | (1L << (HOST - 64)) | (1L << (IF - 64)) | (1L << (IFF - 64)) | (1L << (INCLUDE - 64)) | (1L << (INCREMENT - 64)) | (1L << (ITALIC - 64)) | (1L << (LCURLY - 64)) | (1L << (LEFT - 64)) | (1L << (LINEBREAK - 64)) | (1L << (LOCALIP - 64)) | (1L << (LPAREN - 64)) | (1L << (MACHINENAME - 64)) | (1L << (MAP - 64)) | (1L << (MESSAGE - 64)) | (1L << (MFN - 64)) | (1L << (MID - 64)) | (1L << (MSG - 64)) | (1L << (MSTNAME - 64)) | (1L << (NEWREC - 64)) | (1L << (NL - 64)) | (1L << (NOW - 64)) | (1L << (ORGANIZATION - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (OS - 128)) | (1L << (PAD - 128)) | (1L << (PADLEFT - 128)) | (1L << (PADRIGHT - 128)) | (1L << (PAGEBREAK - 128)) | (1L << (PARA - 128)) | (1L << (PERCENT - 128)) | (1L << (PLATFORM - 128)) | (1L << (POPMODE - 128)) | (1L << (PORT - 128)) | (1L << (PROC - 128)) | (1L << (PROCEDURE - 128)) | (1L << (PUSHMODE - 128)) | (1L << (PUTENV - 128)) | (1L << (READFILE - 128)) | (1L << (READLINE - 128)) | (1L << (REF - 128)) | (1L << (REPLACE - 128)) | (1L << (REQUIRECLIENT - 128)) | (1L << (REQUIRESERVER - 128)) | (1L << (REVERT - 128)) | (1L << (RIGHT - 128)) | (1L << (RUNTIME - 128)) | (1L << (S - 128)) | (1L << (SELECT - 128)) | (1L << (SERVERVERSION - 128)) | (1L << (SLASH - 128)) | (1L << (SYSDIR - 128)) | (1L << (SYSTEM - 128)) | (1L << (TEMPDIR - 128)) | (1L << (TIME - 128)) | (1L << (TOLOWER - 128)) | (1L << (TOUCHFILE - 128)) | (1L << (TOUPPER - 128)) | (1L << (TRACE - 128)) | (1L << (TRIM - 128)) | (1L << (TRIMLEFT - 128)) | (1L << (TRIMRIGHT - 128)) | (1L << (TRUNCATEFILE - 128)) | (1L << (TYPE - 128)) | (1L << (UNDELREC - 128)) | (1L << (UNDERLINE - 128)) | (1L << (USER - 128)))) != 0) || ((((_la - 193)) & ~0x3f) == 0 && ((1L << (_la - 193)) & ((1L << (WARNING - 193)) | (1L << (WHILE - 193)) | (1L << (WRITE - 193)) | (1L << (WRITEFILE - 193)))) != 0)) {
				{
				{
				State = 393; compositeElement();
				}
				}
				State = 398;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 399; Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CompositeElementContext : ParserRuleContext {
		public ExtendedGroupStatementContext extendedGroupStatement() {
			return GetRuleContext<ExtendedGroupStatementContext>(0);
		}
		public WhileLoopContext whileLoop() {
			return GetRuleContext<WhileLoopContext>(0);
		}
		public AssignmentContext assignment() {
			return GetRuleContext<AssignmentContext>(0);
		}
		public UnusedContext unused() {
			return GetRuleContext<UnusedContext>(0);
		}
		public ForLoopContext forLoop() {
			return GetRuleContext<ForLoopContext>(0);
		}
		public CallStatementContext callStatement() {
			return GetRuleContext<CallStatementContext>(0);
		}
		public GroupStatementContext groupStatement() {
			return GetRuleContext<GroupStatementContext>(0);
		}
		public SelectStatementContext selectStatement() {
			return GetRuleContext<SelectStatementContext>(0);
		}
		public SimpleFormatContext simpleFormat() {
			return GetRuleContext<SimpleFormatContext>(0);
		}
		public ProcedureStatementContext procedureStatement() {
			return GetRuleContext<ProcedureStatementContext>(0);
		}
		public CommaOperatorContext commaOperator() {
			return GetRuleContext<CommaOperatorContext>(0);
		}
		public ConditionalStatementContext conditionalStatement() {
			return GetRuleContext<ConditionalStatementContext>(0);
		}
		public CompositeElementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_compositeElement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPftListener typedListener = listener as IPftListener;
			if (typedListener != null) typedListener.EnterCompositeElement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPftListener typedListener = listener as IPftListener;
			if (typedListener != null) typedListener.ExitCompositeElement(this);
		}
	}

	[RuleVersion(0)]
	public CompositeElementContext compositeElement() {
		CompositeElementContext _localctx = new CompositeElementContext(_ctx, State);
		EnterRule(_localctx, 2, RULE_compositeElement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 413;
			switch ( Interpreter.AdaptivePredict(_input,2,_ctx) ) {
			case 1:
				{
				State = 401; simpleFormat();
				}
				break;

			case 2:
				{
				State = 402; commaOperator();
				}
				break;

			case 3:
				{
				State = 403; assignment();
				}
				break;

			case 4:
				{
				State = 404; forLoop();
				}
				break;

			case 5:
				{
				State = 405; whileLoop();
				}
				break;

			case 6:
				{
				State = 406; selectStatement();
				}
				break;

			case 7:
				{
				State = 407; procedureStatement();
				}
				break;

			case 8:
				{
				State = 408; callStatement();
				}
				break;

			case 9:
				{
				State = 409; groupStatement();
				}
				break;

			case 10:
				{
				State = 410; extendedGroupStatement();
				}
				break;

			case 11:
				{
				State = 411; conditionalStatement();
				}
				break;

			case 12:
				{
				State = 412; unused();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CompositeListContext : ParserRuleContext {
		public CompositeElementContext[] compositeElement() {
			return GetRuleContexts<CompositeElementContext>();
		}
		public CompositeElementContext compositeElement(int i) {
			return GetRuleContext<CompositeElementContext>(i);
		}
		public CompositeListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_compositeList; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPftListener typedListener = listener as IPftListener;
			if (typedListener != null) typedListener.EnterCompositeList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPftListener typedListener = listener as IPftListener;
			if (typedListener != null) typedListener.ExitCompositeList(this);
		}
	}

	[RuleVersion(0)]
	public CompositeListContext compositeList() {
		CompositeListContext _localctx = new CompositeListContext(_ctx, State);
		EnterRule(_localctx, 4, RULE_compositeList);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 418;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,3,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 415; compositeElement();
					}
					} 
				}
				State = 420;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,3,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SimpleFormatContext : ParserRuleContext {
		public PrimaryElementContext primaryElement(int i) {
			return GetRuleContext<PrimaryElementContext>(i);
		}
		public PrimaryElementContext[] primaryElement() {
			return GetRuleContexts<PrimaryElementContext>();
		}
		public SimpleFormatContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_simpleFormat; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPftListener typedListener = listener as IPftListener;
			if (typedListener != null) typedListener.EnterSimpleFormat(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPftListener typedListener = listener as IPftListener;
			if (typedListener != null) typedListener.ExitSimpleFormat(this);
		}
	}

	[RuleVersion(0)]
	public SimpleFormatContext simpleFormat() {
		SimpleFormatContext _localctx = new SimpleFormatContext(_ctx, State);
		EnterRule(_localctx, 6, RULE_simpleFormat);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 422;
			_errHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 421; primaryElement();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 424;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,4,_ctx);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PftInfoBlockContext : ParserRuleContext {
		public VersioInfoContext[] versioInfo() {
			return GetRuleContexts<VersioInfoContext>();
		}
		public ITerminalNode PFT() { return GetToken(PftParser.PFT, 0); }
		public AuthorInfoContext[] authorInfo() {
			return GetRuleContexts<AuthorInfoContext>();
		}
		public FormatInfoContext formatInfo(int i) {
			return GetRuleContext<FormatInfoContext>(i);
		}
		public FormatInfoContext[] formatInfo() {
			return GetRuleContexts<FormatInfoContext>();
		}
		public AuthorInfoContext authorInfo(int i) {
			return GetRuleContext<AuthorInfoContext>(i);
		}
		public ITerminalNode RPAREN() { return GetToken(PftParser.RPAREN, 0); }
		public VersioInfoContext versioInfo(int i) {
			return GetRuleContext<VersioInfoContext>(i);
		}
		public TitleInfoContext titleInfo(int i) {
			return GetRuleContext<TitleInfoContext>(i);
		}
		public TitleInfoContext[] titleInfo() {
			return GetRuleContexts<TitleInfoContext>();
		}
		public ITerminalNode LPAREN() { return GetToken(PftParser.LPAREN, 0); }
		public PftInfoBlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pftInfoBlock; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPftListener typedListener = listener as IPftListener;
			if (typedListener != null) typedListener.EnterPftInfoBlock(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPftListener typedListener = listener as IPftListener;
			if (typedListener != null) typedListener.ExitPftInfoBlock(this);
		}
	}

	[RuleVersion(0)]
	public PftInfoBlockContext pftInfoBlock() {
		PftInfoBlockContext _localctx = new PftInfoBlockContext(_ctx, State);
		EnterRule(_localctx, 8, RULE_pftInfoBlock);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 426; Match(PFT);
			State = 427; Match(LPAREN);
			State = 432;
			_errHandler.Sync(this);
			_la = _input.La(1);
			do {
				{
				State = 432;
				switch (_input.La(1)) {
				case AUTHOR:
					{
					State = 428; authorInfo();
					}
					break;
				case TITLE:
					{
					State = 429; titleInfo();
					}
					break;
				case VERSION:
					{
					State = 430; versioInfo();
					}
					break;
				case FORMAT:
					{
					State = 431; formatInfo();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				State = 434;
				_errHandler.Sync(this);
				_la = _input.La(1);
			} while ( _la==AUTHOR || _la==FORMAT || _la==TITLE || _la==VERSION );
			State = 436; Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AuthorInfoContext : ParserRuleContext {
		public ITerminalNode UNCONDITIONAL() { return GetToken(PftParser.UNCONDITIONAL, 0); }
		public ITerminalNode SEMICOLON() { return GetToken(PftParser.SEMICOLON, 0); }
		public ITerminalNode EQUALS() { return GetToken(PftParser.EQUALS, 0); }
		public ITerminalNode AUTHOR() { return GetToken(PftParser.AUTHOR, 0); }
		public AuthorInfoContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_authorInfo; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPftListener typedListener = listener as IPftListener;
			if (typedListener != null) typedListener.EnterAuthorInfo(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPftListener typedListener = listener as IPftListener;
			if (typedListener != null) typedListener.ExitAuthorInfo(this);
		}
	}

	[RuleVersion(0)]
	public AuthorInfoContext authorInfo() {
		AuthorInfoContext _localctx = new AuthorInfoContext(_ctx, State);
		EnterRule(_localctx, 10, RULE_authorInfo);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 438; Match(AUTHOR);
			State = 439; Match(EQUALS);
			State = 440; Match(UNCONDITIONAL);
			State = 441; Match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TitleInfoContext : ParserRuleContext {
		public ITerminalNode UNCONDITIONAL() { return GetToken(PftParser.UNCONDITIONAL, 0); }
		public ITerminalNode SEMICOLON() { return GetToken(PftParser.SEMICOLON, 0); }
		public ITerminalNode EQUALS() { return GetToken(PftParser.EQUALS, 0); }
		public ITerminalNode TITLE() { return GetToken(PftParser.TITLE, 0); }
		public TitleInfoContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_titleInfo; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPftListener typedListener = listener as IPftListener;
			if (typedListener != null) typedListener.EnterTitleInfo(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPftListener typedListener = listener as IPftListener;
			if (typedListener != null) typedListener.ExitTitleInfo(this);
		}
	}

	[RuleVersion(0)]
	public TitleInfoContext titleInfo() {
		TitleInfoContext _localctx = new TitleInfoContext(_ctx, State);
		EnterRule(_localctx, 12, RULE_titleInfo);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 443; Match(TITLE);
			State = 444; Match(EQUALS);
			State = 445; Match(UNCONDITIONAL);
			State = 446; Match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VersioInfoContext : ParserRuleContext {
		public ITerminalNode UNCONDITIONAL() { return GetToken(PftParser.UNCONDITIONAL, 0); }
		public ITerminalNode SEMICOLON() { return GetToken(PftParser.SEMICOLON, 0); }
		public ITerminalNode EQUALS() { return GetToken(PftParser.EQUALS, 0); }
		public ITerminalNode VERSION() { return GetToken(PftParser.VERSION, 0); }
		public VersioInfoContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_versioInfo; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPftListener typedListener = listener as IPftListener;
			if (typedListener != null) typedListener.EnterVersioInfo(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPftListener typedListener = listener as IPftListener;
			if (typedListener != null) typedListener.ExitVersioInfo(this);
		}
	}

	[RuleVersion(0)]
	public VersioInfoContext versioInfo() {
		VersioInfoContext _localctx = new VersioInfoContext(_ctx, State);
		EnterRule(_localctx, 14, RULE_versioInfo);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 448; Match(VERSION);
			State = 449; Match(EQUALS);
			State = 450; Match(UNCONDITIONAL);
			State = 451; Match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FormatInfoContext : ParserRuleContext {
		public ITerminalNode HTML() { return GetToken(PftParser.HTML, 0); }
		public ITerminalNode SEMICOLON() { return GetToken(PftParser.SEMICOLON, 0); }
		public ITerminalNode FORMAT() { return GetToken(PftParser.FORMAT, 0); }
		public ITerminalNode EQUALS() { return GetToken(PftParser.EQUALS, 0); }
		public ITerminalNode PLAIN() { return GetToken(PftParser.PLAIN, 0); }
		public ITerminalNode RTF() { return GetToken(PftParser.RTF, 0); }
		public FormatInfoContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_formatInfo; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPftListener typedListener = listener as IPftListener;
			if (typedListener != null) typedListener.EnterFormatInfo(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPftListener typedListener = listener as IPftListener;
			if (typedListener != null) typedListener.ExitFormatInfo(this);
		}
	}

	[RuleVersion(0)]
	public FormatInfoContext formatInfo() {
		FormatInfoContext _localctx = new FormatInfoContext(_ctx, State);
		EnterRule(_localctx, 16, RULE_formatInfo);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 453; Match(FORMAT);
			State = 454; Match(EQUALS);
			State = 455;
			_la = _input.La(1);
			if ( !(_la==HTML || _la==PLAIN || _la==RTF) ) {
			_errHandler.RecoverInline(this);
			}
			Consume();
			State = 456; Match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CommaOperatorContext : ParserRuleContext {
		public ITerminalNode COMMA() { return GetToken(PftParser.COMMA, 0); }
		public CommaOperatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_commaOperator; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPftListener typedListener = listener as IPftListener;
			if (typedListener != null) typedListener.EnterCommaOperator(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPftListener typedListener = listener as IPftListener;
			if (typedListener != null) typedListener.ExitCommaOperator(this);
		}
	}

	[RuleVersion(0)]
	public CommaOperatorContext commaOperator() {
		CommaOperatorContext _localctx = new CommaOperatorContext(_ctx, State);
		EnterRule(_localctx, 18, RULE_commaOperator);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 458; Match(COMMA);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssignmentContext : ParserRuleContext {
		public ArithAssignmentContext arithAssignment() {
			return GetRuleContext<ArithAssignmentContext>(0);
		}
		public StringAssignmentContext stringAssignment() {
			return GetRuleContext<StringAssignmentContext>(0);
		}
		public AssignmentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assignment; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPftListener typedListener = listener as IPftListener;
			if (typedListener != null) typedListener.EnterAssignment(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPftListener typedListener = listener as IPftListener;
			if (typedListener != null) typedListener.ExitAssignment(this);
		}
	}

	[RuleVersion(0)]
	public AssignmentContext assignment() {
		AssignmentContext _localctx = new AssignmentContext(_ctx, State);
		EnterRule(_localctx, 20, RULE_assignment);
		try {
			State = 462;
			switch ( Interpreter.AdaptivePredict(_input,7,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 460; arithAssignment();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 461; stringAssignment();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArithAssignmentContext : ParserRuleContext {
		public ITerminalNode SEMICOLON() { return GetToken(PftParser.SEMICOLON, 0); }
		public ITerminalNode EQUALS() { return GetToken(PftParser.EQUALS, 0); }
		public ITerminalNode ID() { return GetToken(PftParser.ID, 0); }
		public ArithExprContext arithExpr() {
			return GetRuleContext<ArithExprContext>(0);
		}
		public ArithAssignmentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_arithAssignment; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPftListener typedListener = listener as IPftListener;
			if (typedListener != null) typedListener.EnterArithAssignment(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPftListener typedListener = listener as IPftListener;
			if (typedListener != null) typedListener.ExitArithAssignment(this);
		}
	}

	[RuleVersion(0)]
	public ArithAssignmentContext arithAssignment() {
		ArithAssignmentContext _localctx = new ArithAssignmentContext(_ctx, State);
		EnterRule(_localctx, 22, RULE_arithAssignment);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 464; Match(ID);
			State = 465; Match(EQUALS);
			State = 466; arithExpr(0);
			State = 467; Match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StringAssignmentContext : ParserRuleContext {
		public ExtendedGroupStatementContext extendedGroupStatement() {
			return GetRuleContext<ExtendedGroupStatementContext>(0);
		}
		public ITerminalNode SEMICOLON() { return GetToken(PftParser.SEMICOLON, 0); }
		public PrimaryElementContext primaryElement(int i) {
			return GetRuleContext<PrimaryElementContext>(i);
		}
		public ITerminalNode EQUALS() { return GetToken(PftParser.EQUALS, 0); }
		public ITerminalNode ID() { return GetToken(PftParser.ID, 0); }
		public GroupStatementContext groupStatement() {
			return GetRuleContext<GroupStatementContext>(0);
		}
		public PrimaryElementContext[] primaryElement() {
			return GetRuleContexts<PrimaryElementContext>();
		}
		public StringAssignmentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stringAssignment; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPftListener typedListener = listener as IPftListener;
			if (typedListener != null) typedListener.EnterStringAssignment(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPftListener typedListener = listener as IPftListener;
			if (typedListener != null) typedListener.ExitStringAssignment(this);
		}
	}

	[RuleVersion(0)]
	public StringAssignmentContext stringAssignment() {
		StringAssignmentContext _localctx = new StringAssignmentContext(_ctx, State);
		EnterRule(_localctx, 24, RULE_stringAssignment);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 469; Match(ID);
			State = 470; Match(EQUALS);
			State = 478;
			switch (_input.La(1)) {
			case COMMANDC:
			case COMMANDX:
			case CONDITIONAL:
			case ESCAPED:
			case FIELD:
			case FORMATEXIT:
			case GLOBALVAR:
			case ID:
			case INCLUSION:
			case LONGLITERAL:
			case MFNWITHLENGTH:
			case MODESWITCH:
			case REPEATABLE:
			case UNCONDITIONAL:
			case APPDIR:
			case APPENDFILE:
			case APPSETTING:
			case ASK:
			case BANG:
			case BEEP:
			case BOLD:
			case BREAK:
			case CAT:
			case COLOR:
			case CENTER:
			case CHANGEDB:
			case CHOOSE:
			case CHR:
			case CLIENTVERSION:
			case CMDLINE:
			case COMBINE:
			case COUT:
			case CPU:
			case CREATEDB:
			case CURDIR:
			case DATABASE:
			case DATE:
			case DEBUG:
			case DELETEDB:
			case DELETEFILE:
			case DELREC:
			case EAT:
			case EDITTEXT:
			case ERROR:
			case EXPANDENV:
			case EXTRACTDIR:
			case EXTRACTDRIVE:
			case EXTRACTEXT:
			case EXTRACTNAME:
			case F:
			case F2:
			case FATAL:
			case FONTNAME:
			case FONTSIZE:
			case GETENV:
			case HASH:
			case HEADER1:
			case HEADER2:
			case HEADER3:
			case HOST:
			case IFF:
			case INCLUDE:
			case INCREMENT:
			case ITALIC:
			case LEFT:
			case LINEBREAK:
			case LOCALIP:
			case MACHINENAME:
			case MAP:
			case MESSAGE:
			case MFN:
			case MID:
			case MSG:
			case MSTNAME:
			case NEWREC:
			case NL:
			case NOW:
			case ORGANIZATION:
			case OS:
			case PAD:
			case PADLEFT:
			case PADRIGHT:
			case PAGEBREAK:
			case PARA:
			case PERCENT:
			case PLATFORM:
			case POPMODE:
			case PORT:
			case PROC:
			case PUSHMODE:
			case PUTENV:
			case READFILE:
			case READLINE:
			case REF:
			case REPLACE:
			case REQUIRECLIENT:
			case REQUIRESERVER:
			case REVERT:
			case RIGHT:
			case RUNTIME:
			case S:
			case SERVERVERSION:
			case SLASH:
			case SYSDIR:
			case SYSTEM:
			case TEMPDIR:
			case TIME:
			case TOLOWER:
			case TOUCHFILE:
			case TOUPPER:
			case TRACE:
			case TRIM:
			case TRIMLEFT:
			case TRIMRIGHT:
			case TRUNCATEFILE:
			case TYPE:
			case UNDELREC:
			case UNDERLINE:
			case USER:
			case WARNING:
			case WRITE:
			case WRITEFILE:
				{
				State = 472;
				_errHandler.Sync(this);
				_la = _input.La(1);
				do {
					{
					{
					State = 471; primaryElement();
					}
					}
					State = 474;
					_errHandler.Sync(this);
					_la = _input.La(1);
				} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << COMMANDC) | (1L << COMMANDX) | (1L << CONDITIONAL) | (1L << ESCAPED) | (1L << FIELD) | (1L << FORMATEXIT) | (1L << GLOBALVAR) | (1L << ID) | (1L << INCLUSION) | (1L << LONGLITERAL) | (1L << MFNWITHLENGTH) | (1L << MODESWITCH) | (1L << REPEATABLE) | (1L << UNCONDITIONAL) | (1L << APPDIR) | (1L << APPENDFILE) | (1L << APPSETTING) | (1L << ASK) | (1L << BANG) | (1L << BEEP) | (1L << BOLD) | (1L << BREAK) | (1L << CAT) | (1L << COLOR) | (1L << CENTER) | (1L << CHANGEDB) | (1L << CHOOSE) | (1L << CHR) | (1L << CLIENTVERSION) | (1L << CMDLINE) | (1L << COMBINE) | (1L << COUT) | (1L << CPU) | (1L << CREATEDB) | (1L << CURDIR) | (1L << DATABASE) | (1L << DATE) | (1L << DEBUG) | (1L << DELETEDB) | (1L << DELETEFILE) | (1L << DELREC) | (1L << EAT) | (1L << EDITTEXT) | (1L << ERROR) | (1L << EXPANDENV) | (1L << EXTRACTDIR))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (EXTRACTDRIVE - 64)) | (1L << (EXTRACTEXT - 64)) | (1L << (EXTRACTNAME - 64)) | (1L << (F - 64)) | (1L << (F2 - 64)) | (1L << (FATAL - 64)) | (1L << (FONTNAME - 64)) | (1L << (FONTSIZE - 64)) | (1L << (GETENV - 64)) | (1L << (HASH - 64)) | (1L << (HEADER1 - 64)) | (1L << (HEADER2 - 64)) | (1L << (HEADER3 - 64)) | (1L << (HOST - 64)) | (1L << (IFF - 64)) | (1L << (INCLUDE - 64)) | (1L << (INCREMENT - 64)) | (1L << (ITALIC - 64)) | (1L << (LEFT - 64)) | (1L << (LINEBREAK - 64)) | (1L << (LOCALIP - 64)) | (1L << (MACHINENAME - 64)) | (1L << (MAP - 64)) | (1L << (MESSAGE - 64)) | (1L << (MFN - 64)) | (1L << (MID - 64)) | (1L << (MSG - 64)) | (1L << (MSTNAME - 64)) | (1L << (NEWREC - 64)) | (1L << (NL - 64)) | (1L << (NOW - 64)) | (1L << (ORGANIZATION - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (OS - 128)) | (1L << (PAD - 128)) | (1L << (PADLEFT - 128)) | (1L << (PADRIGHT - 128)) | (1L << (PAGEBREAK - 128)) | (1L << (PARA - 128)) | (1L << (PERCENT - 128)) | (1L << (PLATFORM - 128)) | (1L << (POPMODE - 128)) | (1L << (PORT - 128)) | (1L << (PROC - 128)) | (1L << (PUSHMODE - 128)) | (1L << (PUTENV - 128)) | (1L << (READFILE - 128)) | (1L << (READLINE - 128)) | (1L << (REF - 128)) | (1L << (REPLACE - 128)) | (1L << (REQUIRECLIENT - 128)) | (1L << (REQUIRESERVER - 128)) | (1L << (REVERT - 128)) | (1L << (RIGHT - 128)) | (1L << (RUNTIME - 128)) | (1L << (S - 128)) | (1L << (SERVERVERSION - 128)) | (1L << (SLASH - 128)) | (1L << (SYSDIR - 128)) | (1L << (SYSTEM - 128)) | (1L << (TEMPDIR - 128)) | (1L << (TIME - 128)) | (1L << (TOLOWER - 128)) | (1L << (TOUCHFILE - 128)) | (1L << (TOUPPER - 128)) | (1L << (TRACE - 128)) | (1L << (TRIM - 128)) | (1L << (TRIMLEFT - 128)) | (1L << (TRIMRIGHT - 128)) | (1L << (TRUNCATEFILE - 128)) | (1L << (TYPE - 128)) | (1L << (UNDELREC - 128)) | (1L << (UNDERLINE - 128)) | (1L << (USER - 128)))) != 0) || ((((_la - 193)) & ~0x3f) == 0 && ((1L << (_la - 193)) & ((1L << (WARNING - 193)) | (1L << (WRITE - 193)) | (1L << (WRITEFILE - 193)))) != 0) );
				}
				break;
			case LPAREN:
				{
				State = 476; groupStatement();
				}
				break;
			case LCURLY:
				{
				State = 477; extendedGroupStatement();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 480; Match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ForLoopContext : ParserRuleContext {
		public ITerminalNode NEXT() { return GetToken(PftParser.NEXT, 0); }
		public AssignmentContext assignment(int i) {
			return GetRuleContext<AssignmentContext>(i);
		}
		public ITerminalNode SEMICOLON() { return GetToken(PftParser.SEMICOLON, 0); }
		public AssignmentContext[] assignment() {
			return GetRuleContexts<AssignmentContext>();
		}
		public GroupStatementContext groupStatement(int i) {
			return GetRuleContext<GroupStatementContext>(i);
		}
		public CallStatementContext callStatement(int i) {
			return GetRuleContext<CallStatementContext>(i);
		}
		public SimpleFormatContext[] simpleFormat() {
			return GetRuleContexts<SimpleFormatContext>();
		}
		public SimpleFormatContext simpleFormat(int i) {
			return GetRuleContext<SimpleFormatContext>(i);
		}
		public ITerminalNode LPAREN() { return GetToken(PftParser.LPAREN, 0); }
		public CommaOperatorContext[] commaOperator() {
			return GetRuleContexts<CommaOperatorContext>();
		}
		public CommaOperatorContext commaOperator(int i) {
			return GetRuleContext<CommaOperatorContext>(i);
		}
		public ExtendedGroupStatementContext[] extendedGroupStatement() {
			return GetRuleContexts<ExtendedGroupStatementContext>();
		}
		public ConditionContext condition() {
			return GetRuleContext<ConditionContext>(0);
		}
		public WhileLoopContext[] whileLoop() {
			return GetRuleContexts<WhileLoopContext>();
		}
		public SelectStatementContext selectStatement(int i) {
			return GetRuleContext<SelectStatementContext>(i);
		}
		public ITerminalNode FOR() { return GetToken(PftParser.FOR, 0); }
		public ExtendedGroupStatementContext extendedGroupStatement(int i) {
			return GetRuleContext<ExtendedGroupStatementContext>(i);
		}
		public ForLoopContext forLoop(int i) {
			return GetRuleContext<ForLoopContext>(i);
		}
		public ConditionalStatementContext conditionalStatement(int i) {
			return GetRuleContext<ConditionalStatementContext>(i);
		}
		public WhileLoopContext whileLoop(int i) {
			return GetRuleContext<WhileLoopContext>(i);
		}
		public ITerminalNode RPAREN() { return GetToken(PftParser.RPAREN, 0); }
		public ForLoopContext[] forLoop() {
			return GetRuleContexts<ForLoopContext>();
		}
		public CallStatementContext[] callStatement() {
			return GetRuleContexts<CallStatementContext>();
		}
		public GroupStatementContext[] groupStatement() {
			return GetRuleContexts<GroupStatementContext>();
		}
		public SelectStatementContext[] selectStatement() {
			return GetRuleContexts<SelectStatementContext>();
		}
		public ConditionalStatementContext[] conditionalStatement() {
			return GetRuleContexts<ConditionalStatementContext>();
		}
		public ForLoopContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_forLoop; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPftListener typedListener = listener as IPftListener;
			if (typedListener != null) typedListener.EnterForLoop(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPftListener typedListener = listener as IPftListener;
			if (typedListener != null) typedListener.ExitForLoop(this);
		}
	}

	[RuleVersion(0)]
	public ForLoopContext forLoop() {
		ForLoopContext _localctx = new ForLoopContext(_ctx, State);
		EnterRule(_localctx, 26, RULE_forLoop);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 482; Match(FOR);
			State = 483; Match(LPAREN);
			State = 484; assignment();
			State = 485; condition(0);
			State = 486; Match(SEMICOLON);
			State = 487; assignment();
			State = 488; Match(RPAREN);
			State = 501;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << COMMANDC) | (1L << COMMANDX) | (1L << CONDITIONAL) | (1L << ESCAPED) | (1L << FIELD) | (1L << FORMATEXIT) | (1L << GLOBALVAR) | (1L << ID) | (1L << INCLUSION) | (1L << LONGLITERAL) | (1L << MFNWITHLENGTH) | (1L << MODESWITCH) | (1L << REPEATABLE) | (1L << UNCONDITIONAL) | (1L << APPDIR) | (1L << APPENDFILE) | (1L << APPSETTING) | (1L << ASK) | (1L << BANG) | (1L << BEEP) | (1L << BOLD) | (1L << BREAK) | (1L << CALL) | (1L << CAT) | (1L << COLOR) | (1L << CENTER) | (1L << CHANGEDB) | (1L << CHOOSE) | (1L << CHR) | (1L << CLIENTVERSION) | (1L << CMDLINE) | (1L << COMBINE) | (1L << COMMA) | (1L << COUT) | (1L << CPU) | (1L << CREATEDB) | (1L << CURDIR) | (1L << DATABASE) | (1L << DATE) | (1L << DEBUG) | (1L << DELETEDB) | (1L << DELETEFILE) | (1L << DELREC) | (1L << EAT) | (1L << EDITTEXT) | (1L << ERROR) | (1L << EXPANDENV) | (1L << EXTRACTDIR))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (EXTRACTDRIVE - 64)) | (1L << (EXTRACTEXT - 64)) | (1L << (EXTRACTNAME - 64)) | (1L << (F - 64)) | (1L << (F2 - 64)) | (1L << (FATAL - 64)) | (1L << (FONTNAME - 64)) | (1L << (FONTSIZE - 64)) | (1L << (FOR - 64)) | (1L << (GETENV - 64)) | (1L << (HASH - 64)) | (1L << (HEADER1 - 64)) | (1L << (HEADER2 - 64)) | (1L << (HEADER3 - 64)) | (1L << (HOST - 64)) | (1L << (IF - 64)) | (1L << (IFF - 64)) | (1L << (INCLUDE - 64)) | (1L << (INCREMENT - 64)) | (1L << (ITALIC - 64)) | (1L << (LCURLY - 64)) | (1L << (LEFT - 64)) | (1L << (LINEBREAK - 64)) | (1L << (LOCALIP - 64)) | (1L << (LPAREN - 64)) | (1L << (MACHINENAME - 64)) | (1L << (MAP - 64)) | (1L << (MESSAGE - 64)) | (1L << (MFN - 64)) | (1L << (MID - 64)) | (1L << (MSG - 64)) | (1L << (MSTNAME - 64)) | (1L << (NEWREC - 64)) | (1L << (NL - 64)) | (1L << (NOW - 64)) | (1L << (ORGANIZATION - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (OS - 128)) | (1L << (PAD - 128)) | (1L << (PADLEFT - 128)) | (1L << (PADRIGHT - 128)) | (1L << (PAGEBREAK - 128)) | (1L << (PARA - 128)) | (1L << (PERCENT - 128)) | (1L << (PLATFORM - 128)) | (1L << (POPMODE - 128)) | (1L << (PORT - 128)) | (1L << (PROC - 128)) | (1L << (PUSHMODE - 128)) | (1L << (PUTENV - 128)) | (1L << (READFILE - 128)) | (1L << (READLINE - 128)) | (1L << (REF - 128)) | (1L << (REPLACE - 128)) | (1L << (REQUIRECLIENT - 128)) | (1L << (REQUIRESERVER - 128)) | (1L << (REVERT - 128)) | (1L << (RIGHT - 128)) | (1L << (RUNTIME - 128)) | (1L << (S - 128)) | (1L << (SELECT - 128)) | (1L << (SERVERVERSION - 128)) | (1L << (SLASH - 128)) | (1L << (SYSDIR - 128)) | (1L << (SYSTEM - 128)) | (1L << (TEMPDIR - 128)) | (1L << (TIME - 128)) | (1L << (TOLOWER - 128)) | (1L << (TOUCHFILE - 128)) | (1L << (TOUPPER - 128)) | (1L << (TRACE - 128)) | (1L << (TRIM - 128)) | (1L << (TRIMLEFT - 128)) | (1L << (TRIMRIGHT - 128)) | (1L << (TRUNCATEFILE - 128)) | (1L << (TYPE - 128)) | (1L << (UNDELREC - 128)) | (1L << (UNDERLINE - 128)) | (1L << (USER - 128)))) != 0) || ((((_la - 193)) & ~0x3f) == 0 && ((1L << (_la - 193)) & ((1L << (WARNING - 193)) | (1L << (WHILE - 193)) | (1L << (WRITE - 193)) | (1L << (WRITEFILE - 193)))) != 0)) {
				{
				State = 499;
				switch ( Interpreter.AdaptivePredict(_input,10,_ctx) ) {
				case 1:
					{
					State = 489; simpleFormat();
					}
					break;

				case 2:
					{
					State = 490; commaOperator();
					}
					break;

				case 3:
					{
					State = 491; assignment();
					}
					break;

				case 4:
					{
					State = 492; forLoop();
					}
					break;

				case 5:
					{
					State = 493; whileLoop();
					}
					break;

				case 6:
					{
					State = 494; selectStatement();
					}
					break;

				case 7:
					{
					State = 495; callStatement();
					}
					break;

				case 8:
					{
					State = 496; groupStatement();
					}
					break;

				case 9:
					{
					State = 497; extendedGroupStatement();
					}
					break;

				case 10:
					{
					State = 498; conditionalStatement();
					}
					break;
				}
				}
				State = 503;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 504; Match(NEXT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WhileLoopContext : ParserRuleContext {
		public ITerminalNode NEXT() { return GetToken(PftParser.NEXT, 0); }
		public AssignmentContext assignment(int i) {
			return GetRuleContext<AssignmentContext>(i);
		}
		public AssignmentContext[] assignment() {
			return GetRuleContexts<AssignmentContext>();
		}
		public GroupStatementContext groupStatement(int i) {
			return GetRuleContext<GroupStatementContext>(i);
		}
		public CallStatementContext callStatement(int i) {
			return GetRuleContext<CallStatementContext>(i);
		}
		public SimpleFormatContext[] simpleFormat() {
			return GetRuleContexts<SimpleFormatContext>();
		}
		public SimpleFormatContext simpleFormat(int i) {
			return GetRuleContext<SimpleFormatContext>(i);
		}
		public ITerminalNode LPAREN() { return GetToken(PftParser.LPAREN, 0); }
		public CommaOperatorContext[] commaOperator() {
			return GetRuleContexts<CommaOperatorContext>();
		}
		public CommaOperatorContext commaOperator(int i) {
			return GetRuleContext<CommaOperatorContext>(i);
		}
		public ITerminalNode WHILE() { return GetToken(PftParser.WHILE, 0); }
		public ExtendedGroupStatementContext[] extendedGroupStatement() {
			return GetRuleContexts<ExtendedGroupStatementContext>();
		}
		public ConditionContext condition() {
			return GetRuleContext<ConditionContext>(0);
		}
		public WhileLoopContext[] whileLoop() {
			return GetRuleContexts<WhileLoopContext>();
		}
		public SelectStatementContext selectStatement(int i) {
			return GetRuleContext<SelectStatementContext>(i);
		}
		public ExtendedGroupStatementContext extendedGroupStatement(int i) {
			return GetRuleContext<ExtendedGroupStatementContext>(i);
		}
		public ForLoopContext forLoop(int i) {
			return GetRuleContext<ForLoopContext>(i);
		}
		public ConditionalStatementContext conditionalStatement(int i) {
			return GetRuleContext<ConditionalStatementContext>(i);
		}
		public WhileLoopContext whileLoop(int i) {
			return GetRuleContext<WhileLoopContext>(i);
		}
		public ITerminalNode RPAREN() { return GetToken(PftParser.RPAREN, 0); }
		public ForLoopContext[] forLoop() {
			return GetRuleContexts<ForLoopContext>();
		}
		public CallStatementContext[] callStatement() {
			return GetRuleContexts<CallStatementContext>();
		}
		public GroupStatementContext[] groupStatement() {
			return GetRuleContexts<GroupStatementContext>();
		}
		public SelectStatementContext[] selectStatement() {
			return GetRuleContexts<SelectStatementContext>();
		}
		public ConditionalStatementContext[] conditionalStatement() {
			return GetRuleContexts<ConditionalStatementContext>();
		}
		public WhileLoopContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_whileLoop; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPftListener typedListener = listener as IPftListener;
			if (typedListener != null) typedListener.EnterWhileLoop(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPftListener typedListener = listener as IPftListener;
			if (typedListener != null) typedListener.ExitWhileLoop(this);
		}
	}

	[RuleVersion(0)]
	public WhileLoopContext whileLoop() {
		WhileLoopContext _localctx = new WhileLoopContext(_ctx, State);
		EnterRule(_localctx, 28, RULE_whileLoop);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 506; Match(WHILE);
			State = 507; Match(LPAREN);
			State = 508; condition(0);
			State = 509; Match(RPAREN);
			State = 522;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << COMMANDC) | (1L << COMMANDX) | (1L << CONDITIONAL) | (1L << ESCAPED) | (1L << FIELD) | (1L << FORMATEXIT) | (1L << GLOBALVAR) | (1L << ID) | (1L << INCLUSION) | (1L << LONGLITERAL) | (1L << MFNWITHLENGTH) | (1L << MODESWITCH) | (1L << REPEATABLE) | (1L << UNCONDITIONAL) | (1L << APPDIR) | (1L << APPENDFILE) | (1L << APPSETTING) | (1L << ASK) | (1L << BANG) | (1L << BEEP) | (1L << BOLD) | (1L << BREAK) | (1L << CALL) | (1L << CAT) | (1L << COLOR) | (1L << CENTER) | (1L << CHANGEDB) | (1L << CHOOSE) | (1L << CHR) | (1L << CLIENTVERSION) | (1L << CMDLINE) | (1L << COMBINE) | (1L << COMMA) | (1L << COUT) | (1L << CPU) | (1L << CREATEDB) | (1L << CURDIR) | (1L << DATABASE) | (1L << DATE) | (1L << DEBUG) | (1L << DELETEDB) | (1L << DELETEFILE) | (1L << DELREC) | (1L << EAT) | (1L << EDITTEXT) | (1L << ERROR) | (1L << EXPANDENV) | (1L << EXTRACTDIR))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (EXTRACTDRIVE - 64)) | (1L << (EXTRACTEXT - 64)) | (1L << (EXTRACTNAME - 64)) | (1L << (F - 64)) | (1L << (F2 - 64)) | (1L << (FATAL - 64)) | (1L << (FONTNAME - 64)) | (1L << (FONTSIZE - 64)) | (1L << (FOR - 64)) | (1L << (GETENV - 64)) | (1L << (HASH - 64)) | (1L << (HEADER1 - 64)) | (1L << (HEADER2 - 64)) | (1L << (HEADER3 - 64)) | (1L << (HOST - 64)) | (1L << (IF - 64)) | (1L << (IFF - 64)) | (1L << (INCLUDE - 64)) | (1L << (INCREMENT - 64)) | (1L << (ITALIC - 64)) | (1L << (LCURLY - 64)) | (1L << (LEFT - 64)) | (1L << (LINEBREAK - 64)) | (1L << (LOCALIP - 64)) | (1L << (LPAREN - 64)) | (1L << (MACHINENAME - 64)) | (1L << (MAP - 64)) | (1L << (MESSAGE - 64)) | (1L << (MFN - 64)) | (1L << (MID - 64)) | (1L << (MSG - 64)) | (1L << (MSTNAME - 64)) | (1L << (NEWREC - 64)) | (1L << (NL - 64)) | (1L << (NOW - 64)) | (1L << (ORGANIZATION - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (OS - 128)) | (1L << (PAD - 128)) | (1L << (PADLEFT - 128)) | (1L << (PADRIGHT - 128)) | (1L << (PAGEBREAK - 128)) | (1L << (PARA - 128)) | (1L << (PERCENT - 128)) | (1L << (PLATFORM - 128)) | (1L << (POPMODE - 128)) | (1L << (PORT - 128)) | (1L << (PROC - 128)) | (1L << (PUSHMODE - 128)) | (1L << (PUTENV - 128)) | (1L << (READFILE - 128)) | (1L << (READLINE - 128)) | (1L << (REF - 128)) | (1L << (REPLACE - 128)) | (1L << (REQUIRECLIENT - 128)) | (1L << (REQUIRESERVER - 128)) | (1L << (REVERT - 128)) | (1L << (RIGHT - 128)) | (1L << (RUNTIME - 128)) | (1L << (S - 128)) | (1L << (SELECT - 128)) | (1L << (SERVERVERSION - 128)) | (1L << (SLASH - 128)) | (1L << (SYSDIR - 128)) | (1L << (SYSTEM - 128)) | (1L << (TEMPDIR - 128)) | (1L << (TIME - 128)) | (1L << (TOLOWER - 128)) | (1L << (TOUCHFILE - 128)) | (1L << (TOUPPER - 128)) | (1L << (TRACE - 128)) | (1L << (TRIM - 128)) | (1L << (TRIMLEFT - 128)) | (1L << (TRIMRIGHT - 128)) | (1L << (TRUNCATEFILE - 128)) | (1L << (TYPE - 128)) | (1L << (UNDELREC - 128)) | (1L << (UNDERLINE - 128)) | (1L << (USER - 128)))) != 0) || ((((_la - 193)) & ~0x3f) == 0 && ((1L << (_la - 193)) & ((1L << (WARNING - 193)) | (1L << (WHILE - 193)) | (1L << (WRITE - 193)) | (1L << (WRITEFILE - 193)))) != 0)) {
				{
				State = 520;
				switch ( Interpreter.AdaptivePredict(_input,12,_ctx) ) {
				case 1:
					{
					State = 510; simpleFormat();
					}
					break;

				case 2:
					{
					State = 511; commaOperator();
					}
					break;

				case 3:
					{
					State = 512; assignment();
					}
					break;

				case 4:
					{
					State = 513; forLoop();
					}
					break;

				case 5:
					{
					State = 514; whileLoop();
					}
					break;

				case 6:
					{
					State = 515; selectStatement();
					}
					break;

				case 7:
					{
					State = 516; callStatement();
					}
					break;

				case 8:
					{
					State = 517; groupStatement();
					}
					break;

				case 9:
					{
					State = 518; extendedGroupStatement();
					}
					break;

				case 10:
					{
					State = 519; conditionalStatement();
					}
					break;
				}
				}
				State = 524;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 525; Match(NEXT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SelectStatementContext : ParserRuleContext {
		public SimpleFormatContext selectValue;
		public IToken optionValue;
		public CompositeListContext optionFormat;
		public CompositeListContext elseFormat;
		public ITerminalNode[] UNCONDITIONAL() { return GetTokens(PftParser.UNCONDITIONAL); }
		public ITerminalNode UNCONDITIONAL(int i) {
			return GetToken(PftParser.UNCONDITIONAL, i);
		}
		public ITerminalNode ELSE() { return GetToken(PftParser.ELSE, 0); }
		public ITerminalNode CASE(int i) {
			return GetToken(PftParser.CASE, i);
		}
		public ITerminalNode COLON(int i) {
			return GetToken(PftParser.COLON, i);
		}
		public ITerminalNode[] CASE() { return GetTokens(PftParser.CASE); }
		public SimpleFormatContext simpleFormat() {
			return GetRuleContext<SimpleFormatContext>(0);
		}
		public ITerminalNode SELECT() { return GetToken(PftParser.SELECT, 0); }
		public ITerminalNode[] COLON() { return GetTokens(PftParser.COLON); }
		public CompositeListContext compositeList(int i) {
			return GetRuleContext<CompositeListContext>(i);
		}
		public CompositeListContext[] compositeList() {
			return GetRuleContexts<CompositeListContext>();
		}
		public ITerminalNode END() { return GetToken(PftParser.END, 0); }
		public SelectStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_selectStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPftListener typedListener = listener as IPftListener;
			if (typedListener != null) typedListener.EnterSelectStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPftListener typedListener = listener as IPftListener;
			if (typedListener != null) typedListener.ExitSelectStatement(this);
		}
	}

	[RuleVersion(0)]
	public SelectStatementContext selectStatement() {
		SelectStatementContext _localctx = new SelectStatementContext(_ctx, State);
		EnterRule(_localctx, 30, RULE_selectStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 527; Match(SELECT);
			State = 528; _localctx.selectValue = simpleFormat();
			State = 533;
			_errHandler.Sync(this);
			_la = _input.La(1);
			do {
				{
				{
				State = 529; Match(CASE);
				State = 530; _localctx.optionValue = Match(UNCONDITIONAL);
				State = 531; Match(COLON);
				State = 532; _localctx.optionFormat = compositeList();
				}
				}
				State = 535;
				_errHandler.Sync(this);
				_la = _input.La(1);
			} while ( _la==CASE );
			State = 539;
			_la = _input.La(1);
			if (_la==ELSE) {
				{
				State = 537; Match(ELSE);
				State = 538; _localctx.elseFormat = compositeList();
				}
			}

			State = 541; Match(END);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ProcedureStatementContext : ParserRuleContext {
		public IToken name;
		public ProcedureArgumentsContext args;
		public ProcedureBodyContext body;
		public ProcedureBodyContext procedureBody() {
			return GetRuleContext<ProcedureBodyContext>(0);
		}
		public ProcedureArgumentsContext procedureArguments() {
			return GetRuleContext<ProcedureArgumentsContext>(0);
		}
		public ITerminalNode ID() { return GetToken(PftParser.ID, 0); }
		public ITerminalNode RPAREN() { return GetToken(PftParser.RPAREN, 0); }
		public ITerminalNode PROCEDURE() { return GetToken(PftParser.PROCEDURE, 0); }
		public ITerminalNode LPAREN() { return GetToken(PftParser.LPAREN, 0); }
		public ITerminalNode END() { return GetToken(PftParser.END, 0); }
		public ProcedureStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_procedureStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPftListener typedListener = listener as IPftListener;
			if (typedListener != null) typedListener.EnterProcedureStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPftListener typedListener = listener as IPftListener;
			if (typedListener != null) typedListener.ExitProcedureStatement(this);
		}
	}

	[RuleVersion(0)]
	public ProcedureStatementContext procedureStatement() {
		ProcedureStatementContext _localctx = new ProcedureStatementContext(_ctx, State);
		EnterRule(_localctx, 32, RULE_procedureStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 543; Match(PROCEDURE);
			State = 544; _localctx.name = Match(ID);
			State = 545; Match(LPAREN);
			State = 546; _localctx.args = procedureArguments();
			State = 547; Match(RPAREN);
			State = 548; _localctx.body = procedureBody();
			State = 549; Match(END);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ProcedureArgumentsContext : ParserRuleContext {
		public ITerminalNode[] COMMA() { return GetTokens(PftParser.COMMA); }
		public ITerminalNode[] ID() { return GetTokens(PftParser.ID); }
		public ITerminalNode COMMA(int i) {
			return GetToken(PftParser.COMMA, i);
		}
		public ITerminalNode ID(int i) {
			return GetToken(PftParser.ID, i);
		}
		public ProcedureArgumentsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_procedureArguments; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPftListener typedListener = listener as IPftListener;
			if (typedListener != null) typedListener.EnterProcedureArguments(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPftListener typedListener = listener as IPftListener;
			if (typedListener != null) typedListener.ExitProcedureArguments(this);
		}
	}

	[RuleVersion(0)]
	public ProcedureArgumentsContext procedureArguments() {
		ProcedureArgumentsContext _localctx = new ProcedureArgumentsContext(_ctx, State);
		EnterRule(_localctx, 34, RULE_procedureArguments);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 559;
			_la = _input.La(1);
			if (_la==ID) {
				{
				State = 551; Match(ID);
				State = 556;
				_errHandler.Sync(this);
				_la = _input.La(1);
				while (_la==COMMA) {
					{
					{
					State = 552; Match(COMMA);
					State = 553; Match(ID);
					}
					}
					State = 558;
					_errHandler.Sync(this);
					_la = _input.La(1);
				}
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ProcedureBodyContext : ParserRuleContext {
		public AssignmentContext assignment(int i) {
			return GetRuleContext<AssignmentContext>(i);
		}
		public AssignmentContext[] assignment() {
			return GetRuleContexts<AssignmentContext>();
		}
		public CallStatementContext callStatement(int i) {
			return GetRuleContext<CallStatementContext>(i);
		}
		public GroupStatementContext groupStatement(int i) {
			return GetRuleContext<GroupStatementContext>(i);
		}
		public SimpleFormatContext[] simpleFormat() {
			return GetRuleContexts<SimpleFormatContext>();
		}
		public SimpleFormatContext simpleFormat(int i) {
			return GetRuleContext<SimpleFormatContext>(i);
		}
		public CommaOperatorContext[] commaOperator() {
			return GetRuleContexts<CommaOperatorContext>();
		}
		public CommaOperatorContext commaOperator(int i) {
			return GetRuleContext<CommaOperatorContext>(i);
		}
		public ExtendedGroupStatementContext[] extendedGroupStatement() {
			return GetRuleContexts<ExtendedGroupStatementContext>();
		}
		public WhileLoopContext[] whileLoop() {
			return GetRuleContexts<WhileLoopContext>();
		}
		public SelectStatementContext selectStatement(int i) {
			return GetRuleContext<SelectStatementContext>(i);
		}
		public ExtendedGroupStatementContext extendedGroupStatement(int i) {
			return GetRuleContext<ExtendedGroupStatementContext>(i);
		}
		public ForLoopContext forLoop(int i) {
			return GetRuleContext<ForLoopContext>(i);
		}
		public ConditionalStatementContext conditionalStatement(int i) {
			return GetRuleContext<ConditionalStatementContext>(i);
		}
		public WhileLoopContext whileLoop(int i) {
			return GetRuleContext<WhileLoopContext>(i);
		}
		public ForLoopContext[] forLoop() {
			return GetRuleContexts<ForLoopContext>();
		}
		public CallStatementContext[] callStatement() {
			return GetRuleContexts<CallStatementContext>();
		}
		public GroupStatementContext[] groupStatement() {
			return GetRuleContexts<GroupStatementContext>();
		}
		public SelectStatementContext[] selectStatement() {
			return GetRuleContexts<SelectStatementContext>();
		}
		public ConditionalStatementContext[] conditionalStatement() {
			return GetRuleContexts<ConditionalStatementContext>();
		}
		public ProcedureBodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_procedureBody; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPftListener typedListener = listener as IPftListener;
			if (typedListener != null) typedListener.EnterProcedureBody(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPftListener typedListener = listener as IPftListener;
			if (typedListener != null) typedListener.ExitProcedureBody(this);
		}
	}

	[RuleVersion(0)]
	public ProcedureBodyContext procedureBody() {
		ProcedureBodyContext _localctx = new ProcedureBodyContext(_ctx, State);
		EnterRule(_localctx, 36, RULE_procedureBody);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 573;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << COMMANDC) | (1L << COMMANDX) | (1L << CONDITIONAL) | (1L << ESCAPED) | (1L << FIELD) | (1L << FORMATEXIT) | (1L << GLOBALVAR) | (1L << ID) | (1L << INCLUSION) | (1L << LONGLITERAL) | (1L << MFNWITHLENGTH) | (1L << MODESWITCH) | (1L << REPEATABLE) | (1L << UNCONDITIONAL) | (1L << APPDIR) | (1L << APPENDFILE) | (1L << APPSETTING) | (1L << ASK) | (1L << BANG) | (1L << BEEP) | (1L << BOLD) | (1L << BREAK) | (1L << CALL) | (1L << CAT) | (1L << COLOR) | (1L << CENTER) | (1L << CHANGEDB) | (1L << CHOOSE) | (1L << CHR) | (1L << CLIENTVERSION) | (1L << CMDLINE) | (1L << COMBINE) | (1L << COMMA) | (1L << COUT) | (1L << CPU) | (1L << CREATEDB) | (1L << CURDIR) | (1L << DATABASE) | (1L << DATE) | (1L << DEBUG) | (1L << DELETEDB) | (1L << DELETEFILE) | (1L << DELREC) | (1L << EAT) | (1L << EDITTEXT) | (1L << ERROR) | (1L << EXPANDENV) | (1L << EXTRACTDIR))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (EXTRACTDRIVE - 64)) | (1L << (EXTRACTEXT - 64)) | (1L << (EXTRACTNAME - 64)) | (1L << (F - 64)) | (1L << (F2 - 64)) | (1L << (FATAL - 64)) | (1L << (FONTNAME - 64)) | (1L << (FONTSIZE - 64)) | (1L << (FOR - 64)) | (1L << (GETENV - 64)) | (1L << (HASH - 64)) | (1L << (HEADER1 - 64)) | (1L << (HEADER2 - 64)) | (1L << (HEADER3 - 64)) | (1L << (HOST - 64)) | (1L << (IF - 64)) | (1L << (IFF - 64)) | (1L << (INCLUDE - 64)) | (1L << (INCREMENT - 64)) | (1L << (ITALIC - 64)) | (1L << (LCURLY - 64)) | (1L << (LEFT - 64)) | (1L << (LINEBREAK - 64)) | (1L << (LOCALIP - 64)) | (1L << (LPAREN - 64)) | (1L << (MACHINENAME - 64)) | (1L << (MAP - 64)) | (1L << (MESSAGE - 64)) | (1L << (MFN - 64)) | (1L << (MID - 64)) | (1L << (MSG - 64)) | (1L << (MSTNAME - 64)) | (1L << (NEWREC - 64)) | (1L << (NL - 64)) | (1L << (NOW - 64)) | (1L << (ORGANIZATION - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (OS - 128)) | (1L << (PAD - 128)) | (1L << (PADLEFT - 128)) | (1L << (PADRIGHT - 128)) | (1L << (PAGEBREAK - 128)) | (1L << (PARA - 128)) | (1L << (PERCENT - 128)) | (1L << (PLATFORM - 128)) | (1L << (POPMODE - 128)) | (1L << (PORT - 128)) | (1L << (PROC - 128)) | (1L << (PUSHMODE - 128)) | (1L << (PUTENV - 128)) | (1L << (READFILE - 128)) | (1L << (READLINE - 128)) | (1L << (REF - 128)) | (1L << (REPLACE - 128)) | (1L << (REQUIRECLIENT - 128)) | (1L << (REQUIRESERVER - 128)) | (1L << (REVERT - 128)) | (1L << (RIGHT - 128)) | (1L << (RUNTIME - 128)) | (1L << (S - 128)) | (1L << (SELECT - 128)) | (1L << (SERVERVERSION - 128)) | (1L << (SLASH - 128)) | (1L << (SYSDIR - 128)) | (1L << (SYSTEM - 128)) | (1L << (TEMPDIR - 128)) | (1L << (TIME - 128)) | (1L << (TOLOWER - 128)) | (1L << (TOUCHFILE - 128)) | (1L << (TOUPPER - 128)) | (1L << (TRACE - 128)) | (1L << (TRIM - 128)) | (1L << (TRIMLEFT - 128)) | (1L << (TRIMRIGHT - 128)) | (1L << (TRUNCATEFILE - 128)) | (1L << (TYPE - 128)) | (1L << (UNDELREC - 128)) | (1L << (UNDERLINE - 128)) | (1L << (USER - 128)))) != 0) || ((((_la - 193)) & ~0x3f) == 0 && ((1L << (_la - 193)) & ((1L << (WARNING - 193)) | (1L << (WHILE - 193)) | (1L << (WRITE - 193)) | (1L << (WRITEFILE - 193)))) != 0)) {
				{
				State = 571;
				switch ( Interpreter.AdaptivePredict(_input,18,_ctx) ) {
				case 1:
					{
					State = 561; simpleFormat();
					}
					break;

				case 2:
					{
					State = 562; commaOperator();
					}
					break;

				case 3:
					{
					State = 563; assignment();
					}
					break;

				case 4:
					{
					State = 564; forLoop();
					}
					break;

				case 5:
					{
					State = 565; whileLoop();
					}
					break;

				case 6:
					{
					State = 566; selectStatement();
					}
					break;

				case 7:
					{
					State = 567; groupStatement();
					}
					break;

				case 8:
					{
					State = 568; extendedGroupStatement();
					}
					break;

				case 9:
					{
					State = 569; callStatement();
					}
					break;

				case 10:
					{
					State = 570; conditionalStatement();
					}
					break;
				}
				}
				State = 575;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CallStatementContext : ParserRuleContext {
		public ITerminalNode CALL() { return GetToken(PftParser.CALL, 0); }
		public ITerminalNode ID() { return GetToken(PftParser.ID, 0); }
		public ITerminalNode RPAREN() { return GetToken(PftParser.RPAREN, 0); }
		public ITerminalNode LPAREN() { return GetToken(PftParser.LPAREN, 0); }
		public CompositeListContext compositeList() {
			return GetRuleContext<CompositeListContext>(0);
		}
		public CallStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_callStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPftListener typedListener = listener as IPftListener;
			if (typedListener != null) typedListener.EnterCallStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPftListener typedListener = listener as IPftListener;
			if (typedListener != null) typedListener.ExitCallStatement(this);
		}
	}

	[RuleVersion(0)]
	public CallStatementContext callStatement() {
		CallStatementContext _localctx = new CallStatementContext(_ctx, State);
		EnterRule(_localctx, 38, RULE_callStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 576; Match(CALL);
			State = 577; Match(ID);
			{
			State = 578; Match(LPAREN);
			State = 579; compositeList();
			State = 580; Match(RPAREN);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PrimaryElementContext : ParserRuleContext {
		public ToupperFunctionContext toupperFunction() {
			return GetRuleContext<ToupperFunctionContext>(0);
		}
		public HashOperatorContext hashOperator() {
			return GetRuleContext<HashOperatorContext>(0);
		}
		public ServerVersionFunctionContext serverVersionFunction() {
			return GetRuleContext<ServerVersionFunctionContext>(0);
		}
		public Header3FunctionContext header3Function() {
			return GetRuleContext<Header3FunctionContext>(0);
		}
		public UnderlineFunctionContext underlineFunction() {
			return GetRuleContext<UnderlineFunctionContext>(0);
		}
		public NowFunctionContext nowFunction() {
			return GetRuleContext<NowFunctionContext>(0);
		}
		public ChrFunctionContext chrFunction() {
			return GetRuleContext<ChrFunctionContext>(0);
		}
		public LeftFunctionContext leftFunction() {
			return GetRuleContext<LeftFunctionContext>(0);
		}
		public RequireServerFunctionContext requireServerFunction() {
			return GetRuleContext<RequireServerFunctionContext>(0);
		}
		public ParaOperatorContext paraOperator() {
			return GetRuleContext<ParaOperatorContext>(0);
		}
		public RuntimeFunctionContext runtimeFunction() {
			return GetRuleContext<RuntimeFunctionContext>(0);
		}
		public ExpandEnvFunctionContext expandEnvFunction() {
			return GetRuleContext<ExpandEnvFunctionContext>(0);
		}
		public MfnOperatorContext mfnOperator() {
			return GetRuleContext<MfnOperatorContext>(0);
		}
		public WriteFileFunctionContext writeFileFunction() {
			return GetRuleContext<WriteFileFunctionContext>(0);
		}
		public FormatExitStatementContext formatExitStatement() {
			return GetRuleContext<FormatExitStatementContext>(0);
		}
		public NlOperatorContext nlOperator() {
			return GetRuleContext<NlOperatorContext>(0);
		}
		public UndelRecFunctionContext undelRecFunction() {
			return GetRuleContext<UndelRecFunctionContext>(0);
		}
		public ErrorStatementContext errorStatement() {
			return GetRuleContext<ErrorStatementContext>(0);
		}
		public TypeFunctionContext typeFunction() {
			return GetRuleContext<TypeFunctionContext>(0);
		}
		public GlobalReferenceContext globalReference() {
			return GetRuleContext<GlobalReferenceContext>(0);
		}
		public PushModeOperatorContext pushModeOperator() {
			return GetRuleContext<PushModeOperatorContext>(0);
		}
		public WarningStatementContext warningStatement() {
			return GetRuleContext<WarningStatementContext>(0);
		}
		public ModeSwitchContext modeSwitch() {
			return GetRuleContext<ModeSwitchContext>(0);
		}
		public ExtractDriveFunctionContext extractDriveFunction() {
			return GetRuleContext<ExtractDriveFunctionContext>(0);
		}
		public FieldReferenceContext fieldReference() {
			return GetRuleContext<FieldReferenceContext>(0);
		}
		public DeleteFileFunctionContext deleteFileFunction() {
			return GetRuleContext<DeleteFileFunctionContext>(0);
		}
		public ProcFunctionContext procFunction() {
			return GetRuleContext<ProcFunctionContext>(0);
		}
		public TimeFunctionContext timeFunction() {
			return GetRuleContext<TimeFunctionContext>(0);
		}
		public DelRecFunctionContext delRecFunction() {
			return GetRuleContext<DelRecFunctionContext>(0);
		}
		public CommandXContext commandX() {
			return GetRuleContext<CommandXContext>(0);
		}
		public RevertFunctionContext revertFunction() {
			return GetRuleContext<RevertFunctionContext>(0);
		}
		public TraceStatementContext traceStatement() {
			return GetRuleContext<TraceStatementContext>(0);
		}
		public PageBreakContext pageBreak() {
			return GetRuleContext<PageBreakContext>(0);
		}
		public BoldFunctionContext boldFunction() {
			return GetRuleContext<BoldFunctionContext>(0);
		}
		public TrimLeftFunctionContext trimLeftFunction() {
			return GetRuleContext<TrimLeftFunctionContext>(0);
		}
		public IncludeFunctionContext includeFunction() {
			return GetRuleContext<IncludeFunctionContext>(0);
		}
		public ReadFileFunctionContext readFileFunction() {
			return GetRuleContext<ReadFileFunctionContext>(0);
		}
		public CmdlineFunctionContext cmdlineFunction() {
			return GetRuleContext<CmdlineFunctionContext>(0);
		}
		public ReplaceFunctionContext replaceFunction() {
			return GetRuleContext<ReplaceFunctionContext>(0);
		}
		public DateFunctionContext dateFunction() {
			return GetRuleContext<DateFunctionContext>(0);
		}
		public IncludeStatementContext includeStatement() {
			return GetRuleContext<IncludeStatementContext>(0);
		}
		public CreateDbFunctionContext createDbFunction() {
			return GetRuleContext<CreateDbFunctionContext>(0);
		}
		public PercentOperatorContext percentOperator() {
			return GetRuleContext<PercentOperatorContext>(0);
		}
		public MsgFunctionContext msgFunction() {
			return GetRuleContext<MsgFunctionContext>(0);
		}
		public MachineNameFunctionContext machineNameFunction() {
			return GetRuleContext<MachineNameFunctionContext>(0);
		}
		public AskFunctionContext askFunction() {
			return GetRuleContext<AskFunctionContext>(0);
		}
		public MessageFunctionContext messageFunction() {
			return GetRuleContext<MessageFunctionContext>(0);
		}
		public DebugStatementContext debugStatement() {
			return GetRuleContext<DebugStatementContext>(0);
		}
		public ChooseFunctionContext chooseFunction() {
			return GetRuleContext<ChooseFunctionContext>(0);
		}
		public SFunctionContext sFunction() {
			return GetRuleContext<SFunctionContext>(0);
		}
		public EditTextFunctionContext editTextFunction() {
			return GetRuleContext<EditTextFunctionContext>(0);
		}
		public PadFunctionContext padFunction() {
			return GetRuleContext<PadFunctionContext>(0);
		}
		public UnconditionalLiteralContext unconditionalLiteral() {
			return GetRuleContext<UnconditionalLiteralContext>(0);
		}
		public CoutFunctionContext coutFunction() {
			return GetRuleContext<CoutFunctionContext>(0);
		}
		public FFunctionContext fFunction() {
			return GetRuleContext<FFunctionContext>(0);
		}
		public ColorFunctionContext colorFunction() {
			return GetRuleContext<ColorFunctionContext>(0);
		}
		public ReadLineFunctionContext readLineFunction() {
			return GetRuleContext<ReadLineFunctionContext>(0);
		}
		public PadLeftFunctionContext padLeftFunction() {
			return GetRuleContext<PadLeftFunctionContext>(0);
		}
		public PopModeOperatorContext popModeOperator() {
			return GetRuleContext<PopModeOperatorContext>(0);
		}
		public ExtractExtFunctionContext extractExtFunction() {
			return GetRuleContext<ExtractExtFunctionContext>(0);
		}
		public MapFunctionContext mapFunction() {
			return GetRuleContext<MapFunctionContext>(0);
		}
		public Header2FunctionContext header2Function() {
			return GetRuleContext<Header2FunctionContext>(0);
		}
		public MstnameFunctionContext mstnameFunction() {
			return GetRuleContext<MstnameFunctionContext>(0);
		}
		public ExtractNameFunctionContext extractNameFunction() {
			return GetRuleContext<ExtractNameFunctionContext>(0);
		}
		public AppSettingFunctionContext appSettingFunction() {
			return GetRuleContext<AppSettingFunctionContext>(0);
		}
		public LineBreakContext lineBreak() {
			return GetRuleContext<LineBreakContext>(0);
		}
		public SlashOperatorContext slashOperator() {
			return GetRuleContext<SlashOperatorContext>(0);
		}
		public FatalStatementContext fatalStatement() {
			return GetRuleContext<FatalStatementContext>(0);
		}
		public ChangeDbFunctionContext changeDbFunction() {
			return GetRuleContext<ChangeDbFunctionContext>(0);
		}
		public Header1FunctionContext header1Function() {
			return GetRuleContext<Header1FunctionContext>(0);
		}
		public EatFunctionContext eatFunction() {
			return GetRuleContext<EatFunctionContext>(0);
		}
		public ClientVersionFunctionContext clientVersionFunction() {
			return GetRuleContext<ClientVersionFunctionContext>(0);
		}
		public TruncateFileFunctionContext truncateFileFunction() {
			return GetRuleContext<TruncateFileFunctionContext>(0);
		}
		public SystemFunctionContext systemFunction() {
			return GetRuleContext<SystemFunctionContext>(0);
		}
		public LongLiteralContext longLiteral() {
			return GetRuleContext<LongLiteralContext>(0);
		}
		public CatFunctionContext catFunction() {
			return GetRuleContext<CatFunctionContext>(0);
		}
		public RefFunctionContext refFunction() {
			return GetRuleContext<RefFunctionContext>(0);
		}
		public AppendFileFunctionContext appendFileFunction() {
			return GetRuleContext<AppendFileFunctionContext>(0);
		}
		public DatabaseFunctionContext databaseFunction() {
			return GetRuleContext<DatabaseFunctionContext>(0);
		}
		public VariableReferenceContext variableReference() {
			return GetRuleContext<VariableReferenceContext>(0);
		}
		public CommandCContext commandC() {
			return GetRuleContext<CommandCContext>(0);
		}
		public CombineFunctionContext combineFunction() {
			return GetRuleContext<CombineFunctionContext>(0);
		}
		public CpuFunctionContext cpuFunction() {
			return GetRuleContext<CpuFunctionContext>(0);
		}
		public UserFunctionContext userFunction() {
			return GetRuleContext<UserFunctionContext>(0);
		}
		public PortFunctionContext portFunction() {
			return GetRuleContext<PortFunctionContext>(0);
		}
		public CurdirFunctionContext curdirFunction() {
			return GetRuleContext<CurdirFunctionContext>(0);
		}
		public RequireClientFunctionContext requireClientFunction() {
			return GetRuleContext<RequireClientFunctionContext>(0);
		}
		public OsFunctionContext osFunction() {
			return GetRuleContext<OsFunctionContext>(0);
		}
		public WriteFunctionContext writeFunction() {
			return GetRuleContext<WriteFunctionContext>(0);
		}
		public PutenvFunctionContext putenvFunction() {
			return GetRuleContext<PutenvFunctionContext>(0);
		}
		public F2FunctionContext f2Function() {
			return GetRuleContext<F2FunctionContext>(0);
		}
		public TrimFunctionContext trimFunction() {
			return GetRuleContext<TrimFunctionContext>(0);
		}
		public RightFunctionContext rightFunction() {
			return GetRuleContext<RightFunctionContext>(0);
		}
		public TrimRightFunctionContext trimRightFunction() {
			return GetRuleContext<TrimRightFunctionContext>(0);
		}
		public PlatformFunctionContext platformFunction() {
			return GetRuleContext<PlatformFunctionContext>(0);
		}
		public TempdirFunctionContext tempdirFunction() {
			return GetRuleContext<TempdirFunctionContext>(0);
		}
		public ExtractDirFunctionContext extractDirFunction() {
			return GetRuleContext<ExtractDirFunctionContext>(0);
		}
		public GetenvFunctionContext getenvFunction() {
			return GetRuleContext<GetenvFunctionContext>(0);
		}
		public SysdirFunctionContext sysdirFunction() {
			return GetRuleContext<SysdirFunctionContext>(0);
		}
		public MidFunctionContext midFunction() {
			return GetRuleContext<MidFunctionContext>(0);
		}
		public OrganizationFunctionContext organizationFunction() {
			return GetRuleContext<OrganizationFunctionContext>(0);
		}
		public TouchFileFunctionContext touchFileFunction() {
			return GetRuleContext<TouchFileFunctionContext>(0);
		}
		public FontNameFunctionContext fontNameFunction() {
			return GetRuleContext<FontNameFunctionContext>(0);
		}
		public BeepOperatorContext beepOperator() {
			return GetRuleContext<BeepOperatorContext>(0);
		}
		public NewrecFunctionContext newrecFunction() {
			return GetRuleContext<NewrecFunctionContext>(0);
		}
		public AppDirFunctionContext appDirFunction() {
			return GetRuleContext<AppDirFunctionContext>(0);
		}
		public IffFunctionContext iffFunction() {
			return GetRuleContext<IffFunctionContext>(0);
		}
		public BreakOperatorContext breakOperator() {
			return GetRuleContext<BreakOperatorContext>(0);
		}
		public LocalIPFunctionContext localIPFunction() {
			return GetRuleContext<LocalIPFunctionContext>(0);
		}
		public ItalicFunctionContext italicFunction() {
			return GetRuleContext<ItalicFunctionContext>(0);
		}
		public EscapedLiteralContext escapedLiteral() {
			return GetRuleContext<EscapedLiteralContext>(0);
		}
		public DeleteDbFunctionContext deleteDbFunction() {
			return GetRuleContext<DeleteDbFunctionContext>(0);
		}
		public FontSizeFunctionContext fontSizeFunction() {
			return GetRuleContext<FontSizeFunctionContext>(0);
		}
		public TolowerFunctionContext tolowerFunction() {
			return GetRuleContext<TolowerFunctionContext>(0);
		}
		public CenterContext center() {
			return GetRuleContext<CenterContext>(0);
		}
		public PadRightFunctionContext padRightFunction() {
			return GetRuleContext<PadRightFunctionContext>(0);
		}
		public IncrementFunctionContext incrementFunction() {
			return GetRuleContext<IncrementFunctionContext>(0);
		}
		public DebugBreakContext debugBreak() {
			return GetRuleContext<DebugBreakContext>(0);
		}
		public HostFunctionContext hostFunction() {
			return GetRuleContext<HostFunctionContext>(0);
		}
		public PrimaryElementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_primaryElement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPftListener typedListener = listener as IPftListener;
			if (typedListener != null) typedListener.EnterPrimaryElement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPftListener typedListener = listener as IPftListener;
			if (typedListener != null) typedListener.ExitPrimaryElement(this);
		}
	}

	[RuleVersion(0)]
	public PrimaryElementContext primaryElement() {
		PrimaryElementContext _localctx = new PrimaryElementContext(_ctx, State);
		EnterRule(_localctx, 40, RULE_primaryElement);
		try {
			State = 701;
			switch ( Interpreter.AdaptivePredict(_input,20,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 582; fieldReference();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 583; globalReference();
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 584; variableReference();
				}
				break;

			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 585; appDirFunction();
				}
				break;

			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 586; appendFileFunction();
				}
				break;

			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 587; appSettingFunction();
				}
				break;

			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 588; askFunction();
				}
				break;

			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 589; beepOperator();
				}
				break;

			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 590; boldFunction();
				}
				break;

			case 10:
				EnterOuterAlt(_localctx, 10);
				{
				State = 591; breakOperator();
				}
				break;

			case 11:
				EnterOuterAlt(_localctx, 11);
				{
				State = 592; catFunction();
				}
				break;

			case 12:
				EnterOuterAlt(_localctx, 12);
				{
				State = 593; center();
				}
				break;

			case 13:
				EnterOuterAlt(_localctx, 13);
				{
				State = 594; changeDbFunction();
				}
				break;

			case 14:
				EnterOuterAlt(_localctx, 14);
				{
				State = 595; chooseFunction();
				}
				break;

			case 15:
				EnterOuterAlt(_localctx, 15);
				{
				State = 596; chrFunction();
				}
				break;

			case 16:
				EnterOuterAlt(_localctx, 16);
				{
				State = 597; clientVersionFunction();
				}
				break;

			case 17:
				EnterOuterAlt(_localctx, 17);
				{
				State = 598; cmdlineFunction();
				}
				break;

			case 18:
				EnterOuterAlt(_localctx, 18);
				{
				State = 599; colorFunction();
				}
				break;

			case 19:
				EnterOuterAlt(_localctx, 19);
				{
				State = 600; combineFunction();
				}
				break;

			case 20:
				EnterOuterAlt(_localctx, 20);
				{
				State = 601; commandC();
				}
				break;

			case 21:
				EnterOuterAlt(_localctx, 21);
				{
				State = 602; commandX();
				}
				break;

			case 22:
				EnterOuterAlt(_localctx, 22);
				{
				State = 603; coutFunction();
				}
				break;

			case 23:
				EnterOuterAlt(_localctx, 23);
				{
				State = 604; createDbFunction();
				}
				break;

			case 24:
				EnterOuterAlt(_localctx, 24);
				{
				State = 605; cpuFunction();
				}
				break;

			case 25:
				EnterOuterAlt(_localctx, 25);
				{
				State = 606; curdirFunction();
				}
				break;

			case 26:
				EnterOuterAlt(_localctx, 26);
				{
				State = 607; databaseFunction();
				}
				break;

			case 27:
				EnterOuterAlt(_localctx, 27);
				{
				State = 608; dateFunction();
				}
				break;

			case 28:
				EnterOuterAlt(_localctx, 28);
				{
				State = 609; debugBreak();
				}
				break;

			case 29:
				EnterOuterAlt(_localctx, 29);
				{
				State = 610; debugStatement();
				}
				break;

			case 30:
				EnterOuterAlt(_localctx, 30);
				{
				State = 611; deleteDbFunction();
				}
				break;

			case 31:
				EnterOuterAlt(_localctx, 31);
				{
				State = 612; deleteFileFunction();
				}
				break;

			case 32:
				EnterOuterAlt(_localctx, 32);
				{
				State = 613; delRecFunction();
				}
				break;

			case 33:
				EnterOuterAlt(_localctx, 33);
				{
				State = 614; eatFunction();
				}
				break;

			case 34:
				EnterOuterAlt(_localctx, 34);
				{
				State = 615; editTextFunction();
				}
				break;

			case 35:
				EnterOuterAlt(_localctx, 35);
				{
				State = 616; errorStatement();
				}
				break;

			case 36:
				EnterOuterAlt(_localctx, 36);
				{
				State = 617; escapedLiteral();
				}
				break;

			case 37:
				EnterOuterAlt(_localctx, 37);
				{
				State = 618; expandEnvFunction();
				}
				break;

			case 38:
				EnterOuterAlt(_localctx, 38);
				{
				State = 619; extractDirFunction();
				}
				break;

			case 39:
				EnterOuterAlt(_localctx, 39);
				{
				State = 620; extractDriveFunction();
				}
				break;

			case 40:
				EnterOuterAlt(_localctx, 40);
				{
				State = 621; extractExtFunction();
				}
				break;

			case 41:
				EnterOuterAlt(_localctx, 41);
				{
				State = 622; extractNameFunction();
				}
				break;

			case 42:
				EnterOuterAlt(_localctx, 42);
				{
				State = 623; fatalStatement();
				}
				break;

			case 43:
				EnterOuterAlt(_localctx, 43);
				{
				State = 624; f2Function();
				}
				break;

			case 44:
				EnterOuterAlt(_localctx, 44);
				{
				State = 625; fFunction();
				}
				break;

			case 45:
				EnterOuterAlt(_localctx, 45);
				{
				State = 626; fontNameFunction();
				}
				break;

			case 46:
				EnterOuterAlt(_localctx, 46);
				{
				State = 627; fontSizeFunction();
				}
				break;

			case 47:
				EnterOuterAlt(_localctx, 47);
				{
				State = 628; formatExitStatement();
				}
				break;

			case 48:
				EnterOuterAlt(_localctx, 48);
				{
				State = 629; getenvFunction();
				}
				break;

			case 49:
				EnterOuterAlt(_localctx, 49);
				{
				State = 630; hashOperator();
				}
				break;

			case 50:
				EnterOuterAlt(_localctx, 50);
				{
				State = 631; header1Function();
				}
				break;

			case 51:
				EnterOuterAlt(_localctx, 51);
				{
				State = 632; header2Function();
				}
				break;

			case 52:
				EnterOuterAlt(_localctx, 52);
				{
				State = 633; header3Function();
				}
				break;

			case 53:
				EnterOuterAlt(_localctx, 53);
				{
				State = 634; hostFunction();
				}
				break;

			case 54:
				EnterOuterAlt(_localctx, 54);
				{
				State = 635; iffFunction();
				}
				break;

			case 55:
				EnterOuterAlt(_localctx, 55);
				{
				State = 636; includeFunction();
				}
				break;

			case 56:
				EnterOuterAlt(_localctx, 56);
				{
				State = 637; includeStatement();
				}
				break;

			case 57:
				EnterOuterAlt(_localctx, 57);
				{
				State = 638; incrementFunction();
				}
				break;

			case 58:
				EnterOuterAlt(_localctx, 58);
				{
				State = 639; italicFunction();
				}
				break;

			case 59:
				EnterOuterAlt(_localctx, 59);
				{
				State = 640; leftFunction();
				}
				break;

			case 60:
				EnterOuterAlt(_localctx, 60);
				{
				State = 641; lineBreak();
				}
				break;

			case 61:
				EnterOuterAlt(_localctx, 61);
				{
				State = 642; localIPFunction();
				}
				break;

			case 62:
				EnterOuterAlt(_localctx, 62);
				{
				State = 643; longLiteral();
				}
				break;

			case 63:
				EnterOuterAlt(_localctx, 63);
				{
				State = 644; machineNameFunction();
				}
				break;

			case 64:
				EnterOuterAlt(_localctx, 64);
				{
				State = 645; mapFunction();
				}
				break;

			case 65:
				EnterOuterAlt(_localctx, 65);
				{
				State = 646; messageFunction();
				}
				break;

			case 66:
				EnterOuterAlt(_localctx, 66);
				{
				State = 647; mfnOperator();
				}
				break;

			case 67:
				EnterOuterAlt(_localctx, 67);
				{
				State = 648; midFunction();
				}
				break;

			case 68:
				EnterOuterAlt(_localctx, 68);
				{
				State = 649; modeSwitch();
				}
				break;

			case 69:
				EnterOuterAlt(_localctx, 69);
				{
				State = 650; msgFunction();
				}
				break;

			case 70:
				EnterOuterAlt(_localctx, 70);
				{
				State = 651; mstnameFunction();
				}
				break;

			case 71:
				EnterOuterAlt(_localctx, 71);
				{
				State = 652; newrecFunction();
				}
				break;

			case 72:
				EnterOuterAlt(_localctx, 72);
				{
				State = 653; nlOperator();
				}
				break;

			case 73:
				EnterOuterAlt(_localctx, 73);
				{
				State = 654; nowFunction();
				}
				break;

			case 74:
				EnterOuterAlt(_localctx, 74);
				{
				State = 655; organizationFunction();
				}
				break;

			case 75:
				EnterOuterAlt(_localctx, 75);
				{
				State = 656; osFunction();
				}
				break;

			case 76:
				EnterOuterAlt(_localctx, 76);
				{
				State = 657; padFunction();
				}
				break;

			case 77:
				EnterOuterAlt(_localctx, 77);
				{
				State = 658; padLeftFunction();
				}
				break;

			case 78:
				EnterOuterAlt(_localctx, 78);
				{
				State = 659; padRightFunction();
				}
				break;

			case 79:
				EnterOuterAlt(_localctx, 79);
				{
				State = 660; pageBreak();
				}
				break;

			case 80:
				EnterOuterAlt(_localctx, 80);
				{
				State = 661; paraOperator();
				}
				break;

			case 81:
				EnterOuterAlt(_localctx, 81);
				{
				State = 662; percentOperator();
				}
				break;

			case 82:
				EnterOuterAlt(_localctx, 82);
				{
				State = 663; platformFunction();
				}
				break;

			case 83:
				EnterOuterAlt(_localctx, 83);
				{
				State = 664; popModeOperator();
				}
				break;

			case 84:
				EnterOuterAlt(_localctx, 84);
				{
				State = 665; portFunction();
				}
				break;

			case 85:
				EnterOuterAlt(_localctx, 85);
				{
				State = 666; procFunction();
				}
				break;

			case 86:
				EnterOuterAlt(_localctx, 86);
				{
				State = 667; pushModeOperator();
				}
				break;

			case 87:
				EnterOuterAlt(_localctx, 87);
				{
				State = 668; putenvFunction();
				}
				break;

			case 88:
				EnterOuterAlt(_localctx, 88);
				{
				State = 669; readFileFunction();
				}
				break;

			case 89:
				EnterOuterAlt(_localctx, 89);
				{
				State = 670; readLineFunction();
				}
				break;

			case 90:
				EnterOuterAlt(_localctx, 90);
				{
				State = 671; refFunction();
				}
				break;

			case 91:
				EnterOuterAlt(_localctx, 91);
				{
				State = 672; replaceFunction();
				}
				break;

			case 92:
				EnterOuterAlt(_localctx, 92);
				{
				State = 673; requireClientFunction();
				}
				break;

			case 93:
				EnterOuterAlt(_localctx, 93);
				{
				State = 674; requireServerFunction();
				}
				break;

			case 94:
				EnterOuterAlt(_localctx, 94);
				{
				State = 675; revertFunction();
				}
				break;

			case 95:
				EnterOuterAlt(_localctx, 95);
				{
				State = 676; rightFunction();
				}
				break;

			case 96:
				EnterOuterAlt(_localctx, 96);
				{
				State = 677; runtimeFunction();
				}
				break;

			case 97:
				EnterOuterAlt(_localctx, 97);
				{
				State = 678; serverVersionFunction();
				}
				break;

			case 98:
				EnterOuterAlt(_localctx, 98);
				{
				State = 679; sFunction();
				}
				break;

			case 99:
				EnterOuterAlt(_localctx, 99);
				{
				State = 680; slashOperator();
				}
				break;

			case 100:
				EnterOuterAlt(_localctx, 100);
				{
				State = 681; sysdirFunction();
				}
				break;

			case 101:
				EnterOuterAlt(_localctx, 101);
				{
				State = 682; systemFunction();
				}
				break;

			case 102:
				EnterOuterAlt(_localctx, 102);
				{
				State = 683; tempdirFunction();
				}
				break;

			case 103:
				EnterOuterAlt(_localctx, 103);
				{
				State = 684; timeFunction();
				}
				break;

			case 104:
				EnterOuterAlt(_localctx, 104);
				{
				State = 685; tolowerFunction();
				}
				break;

			case 105:
				EnterOuterAlt(_localctx, 105);
				{
				State = 686; touchFileFunction();
				}
				break;

			case 106:
				EnterOuterAlt(_localctx, 106);
				{
				State = 687; toupperFunction();
				}
				break;

			case 107:
				EnterOuterAlt(_localctx, 107);
				{
				State = 688; traceStatement();
				}
				break;

			case 108:
				EnterOuterAlt(_localctx, 108);
				{
				State = 689; trimFunction();
				}
				break;

			case 109:
				EnterOuterAlt(_localctx, 109);
				{
				State = 690; trimLeftFunction();
				}
				break;

			case 110:
				EnterOuterAlt(_localctx, 110);
				{
				State = 691; trimRightFunction();
				}
				break;

			case 111:
				EnterOuterAlt(_localctx, 111);
				{
				State = 692; truncateFileFunction();
				}
				break;

			case 112:
				EnterOuterAlt(_localctx, 112);
				{
				State = 693; typeFunction();
				}
				break;

			case 113:
				EnterOuterAlt(_localctx, 113);
				{
				State = 694; unconditionalLiteral();
				}
				break;

			case 114:
				EnterOuterAlt(_localctx, 114);
				{
				State = 695; undelRecFunction();
				}
				break;

			case 115:
				EnterOuterAlt(_localctx, 115);
				{
				State = 696; underlineFunction();
				}
				break;

			case 116:
				EnterOuterAlt(_localctx, 116);
				{
				State = 697; userFunction();
				}
				break;

			case 117:
				EnterOuterAlt(_localctx, 117);
				{
				State = 698; warningStatement();
				}
				break;

			case 118:
				EnterOuterAlt(_localctx, 118);
				{
				State = 699; writeFunction();
				}
				break;

			case 119:
				EnterOuterAlt(_localctx, 119);
				{
				State = 700; writeFileFunction();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AppDirFunctionContext : ParserRuleContext {
		public ITerminalNode RPAREN() { return GetToken(PftParser.RPAREN, 0); }
		public ITerminalNode APPDIR() { return GetToken(PftParser.APPDIR, 0); }
		public ITerminalNode LPAREN() { return GetToken(PftParser.LPAREN, 0); }
		public AppDirFunctionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_appDirFunction; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPftListener typedListener = listener as IPftListener;
			if (typedListener != null) typedListener.EnterAppDirFunction(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPftListener typedListener = listener as IPftListener;
			if (typedListener != null) typedListener.ExitAppDirFunction(this);
		}
	}

	[RuleVersion(0)]
	public AppDirFunctionContext appDirFunction() {
		AppDirFunctionContext _localctx = new AppDirFunctionContext(_ctx, State);
		EnterRule(_localctx, 42, RULE_appDirFunction);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 703; Match(APPDIR);
			State = 706;
			switch ( Interpreter.AdaptivePredict(_input,21,_ctx) ) {
			case 1:
				{
				State = 704; Match(LPAREN);
				State = 705; Match(RPAREN);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AppendFileFunctionContext : ParserRuleContext {
		public SimpleFormatContext name;
		public CompositeListContext text;
		public ITerminalNode COMMA() { return GetToken(PftParser.COMMA, 0); }
		public ITerminalNode RPAREN() { return GetToken(PftParser.RPAREN, 0); }
		public SimpleFormatContext simpleFormat() {
			return GetRuleContext<SimpleFormatContext>(0);
		}
		public ITerminalNode APPENDFILE() { return GetToken(PftParser.APPENDFILE, 0); }
		public ITerminalNode LPAREN() { return GetToken(PftParser.LPAREN, 0); }
		public CompositeListContext compositeList() {
			return GetRuleContext<CompositeListContext>(0);
		}
		public AppendFileFunctionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_appendFileFunction; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPftListener typedListener = listener as IPftListener;
			if (typedListener != null) typedListener.EnterAppendFileFunction(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPftListener typedListener = listener as IPftListener;
			if (typedListener != null) typedListener.ExitAppendFileFunction(this);
		}
	}

	[RuleVersion(0)]
	public AppendFileFunctionContext appendFileFunction() {
		AppendFileFunctionContext _localctx = new AppendFileFunctionContext(_ctx, State);
		EnterRule(_localctx, 44, RULE_appendFileFunction);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 708; Match(APPENDFILE);
			State = 709; Match(LPAREN);
			State = 710; _localctx.name = simpleFormat();
			State = 711; Match(COMMA);
			State = 712; _localctx.text = compositeList();
			State = 713; Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AppSettingFunctionContext : ParserRuleContext {
		public CompositeListContext text;
		public ITerminalNode RPAREN() { return GetToken(PftParser.RPAREN, 0); }
		public ITerminalNode LPAREN() { return GetToken(PftParser.LPAREN, 0); }
		public ITerminalNode APPSETTING() { return GetToken(PftParser.APPSETTING, 0); }
		public CompositeListContext compositeList() {
			return GetRuleContext<CompositeListContext>(0);
		}
		public AppSettingFunctionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_appSettingFunction; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPftListener typedListener = listener as IPftListener;
			if (typedListener != null) typedListener.EnterAppSettingFunction(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPftListener typedListener = listener as IPftListener;
			if (typedListener != null) typedListener.ExitAppSettingFunction(this);
		}
	}

	[RuleVersion(0)]
	public AppSettingFunctionContext appSettingFunction() {
		AppSettingFunctionContext _localctx = new AppSettingFunctionContext(_ctx, State);
		EnterRule(_localctx, 46, RULE_appSettingFunction);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 715; Match(APPSETTING);
			State = 716; Match(LPAREN);
			State = 717; _localctx.text = compositeList();
			State = 718; Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AskFunctionContext : ParserRuleContext {
		public CompositeListContext text;
		public ITerminalNode RPAREN() { return GetToken(PftParser.RPAREN, 0); }
		public ITerminalNode ASK() { return GetToken(PftParser.ASK, 0); }
		public ITerminalNode LPAREN() { return GetToken(PftParser.LPAREN, 0); }
		public CompositeListContext compositeList() {
			return GetRuleContext<CompositeListContext>(0);
		}
		public AskFunctionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_askFunction; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPftListener typedListener = listener as IPftListener;
			if (typedListener != null) typedListener.EnterAskFunction(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPftListener typedListener = listener as IPftListener;
			if (typedListener != null) typedListener.ExitAskFunction(this);
		}
	}

	[RuleVersion(0)]
	public AskFunctionContext askFunction() {
		AskFunctionContext _localctx = new AskFunctionContext(_ctx, State);
		EnterRule(_localctx, 48, RULE_askFunction);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 720; Match(ASK);
			State = 721; Match(LPAREN);
			State = 722; _localctx.text = compositeList();
			State = 723; Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BeepOperatorContext : ParserRuleContext {
		public ITerminalNode BEEP() { return GetToken(PftParser.BEEP, 0); }
		public BeepOperatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_beepOperator; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPftListener typedListener = listener as IPftListener;
			if (typedListener != null) typedListener.EnterBeepOperator(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPftListener typedListener = listener as IPftListener;
			if (typedListener != null) typedListener.ExitBeepOperator(this);
		}
	}

	[RuleVersion(0)]
	public BeepOperatorContext beepOperator() {
		BeepOperatorContext _localctx = new BeepOperatorContext(_ctx, State);
		EnterRule(_localctx, 50, RULE_beepOperator);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 725; Match(BEEP);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BoldFunctionContext : ParserRuleContext {
		public CompositeListContext text;
		public ITerminalNode BOLD() { return GetToken(PftParser.BOLD, 0); }
		public ITerminalNode RPAREN() { return GetToken(PftParser.RPAREN, 0); }
		public ITerminalNode LPAREN() { return GetToken(PftParser.LPAREN, 0); }
		public CompositeListContext compositeList() {
			return GetRuleContext<CompositeListContext>(0);
		}
		public BoldFunctionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_boldFunction; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPftListener typedListener = listener as IPftListener;
			if (typedListener != null) typedListener.EnterBoldFunction(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPftListener typedListener = listener as IPftListener;
			if (typedListener != null) typedListener.ExitBoldFunction(this);
		}
	}

	[RuleVersion(0)]
	public BoldFunctionContext boldFunction() {
		BoldFunctionContext _localctx = new BoldFunctionContext(_ctx, State);
		EnterRule(_localctx, 52, RULE_boldFunction);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 727; Match(BOLD);
			State = 728; Match(LPAREN);
			State = 729; _localctx.text = compositeList();
			State = 730; Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BreakOperatorContext : ParserRuleContext {
		public ITerminalNode BREAK() { return GetToken(PftParser.BREAK, 0); }
		public BreakOperatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_breakOperator; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPftListener typedListener = listener as IPftListener;
			if (typedListener != null) typedListener.EnterBreakOperator(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPftListener typedListener = listener as IPftListener;
			if (typedListener != null) typedListener.ExitBreakOperator(this);
		}
	}

	[RuleVersion(0)]
	public BreakOperatorContext breakOperator() {
		BreakOperatorContext _localctx = new BreakOperatorContext(_ctx, State);
		EnterRule(_localctx, 54, RULE_breakOperator);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 732; Match(BREAK);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CatFunctionContext : ParserRuleContext {
		public SimpleFormatContext text;
		public ITerminalNode RPAREN() { return GetToken(PftParser.RPAREN, 0); }
		public SimpleFormatContext simpleFormat() {
			return GetRuleContext<SimpleFormatContext>(0);
		}
		public ITerminalNode LPAREN() { return GetToken(PftParser.LPAREN, 0); }
		public ITerminalNode CAT() { return GetToken(PftParser.CAT, 0); }
		public CatFunctionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_catFunction; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPftListener typedListener = listener as IPftListener;
			if (typedListener != null) typedListener.EnterCatFunction(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPftListener typedListener = listener as IPftListener;
			if (typedListener != null) typedListener.ExitCatFunction(this);
		}
	}

	[RuleVersion(0)]
	public CatFunctionContext catFunction() {
		CatFunctionContext _localctx = new CatFunctionContext(_ctx, State);
		EnterRule(_localctx, 56, RULE_catFunction);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 734; Match(CAT);
			State = 735; Match(LPAREN);
			State = 736; _localctx.text = simpleFormat();
			State = 737; Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CenterContext : ParserRuleContext {
		public CompositeListContext text;
		public ITerminalNode CENTER() { return GetToken(PftParser.CENTER, 0); }
		public ITerminalNode RPAREN() { return GetToken(PftParser.RPAREN, 0); }
		public ITerminalNode LPAREN() { return GetToken(PftParser.LPAREN, 0); }
		public CompositeListContext compositeList() {
			return GetRuleContext<CompositeListContext>(0);
		}
		public CenterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_center; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPftListener typedListener = listener as IPftListener;
			if (typedListener != null) typedListener.EnterCenter(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPftListener typedListener = listener as IPftListener;
			if (typedListener != null) typedListener.ExitCenter(this);
		}
	}

	[RuleVersion(0)]
	public CenterContext center() {
		CenterContext _localctx = new CenterContext(_ctx, State);
		EnterRule(_localctx, 58, RULE_center);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 739; Match(CENTER);
			State = 740; Match(LPAREN);
			State = 741; _localctx.text = compositeList();
			State = 742; Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ChangeDbFunctionContext : ParserRuleContext {
		public SimpleFormatContext name;
		public ITerminalNode CHANGEDB() { return GetToken(PftParser.CHANGEDB, 0); }
		public ITerminalNode LPAREN(int i) {
			return GetToken(PftParser.LPAREN, i);
		}
		public SimpleFormatContext simpleFormat() {
			return GetRuleContext<SimpleFormatContext>(0);
		}
		public ITerminalNode[] LPAREN() { return GetTokens(PftParser.LPAREN); }
		public ChangeDbFunctionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_changeDbFunction; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPftListener typedListener = listener as IPftListener;
			if (typedListener != null) typedListener.EnterChangeDbFunction(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPftListener typedListener = listener as IPftListener;
			if (typedListener != null) typedListener.ExitChangeDbFunction(this);
		}
	}

	[RuleVersion(0)]
	public ChangeDbFunctionContext changeDbFunction() {
		ChangeDbFunctionContext _localctx = new ChangeDbFunctionContext(_ctx, State);
		EnterRule(_localctx, 60, RULE_changeDbFunction);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 744; Match(CHANGEDB);
			State = 745; Match(LPAREN);
			State = 746; _localctx.name = simpleFormat();
			State = 747; Match(LPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ChooseFunctionContext : ParserRuleContext {
		public CompositeListContext prompt;
		public ITerminalNode CHOOSE() { return GetToken(PftParser.CHOOSE, 0); }
		public ITerminalNode RPAREN() { return GetToken(PftParser.RPAREN, 0); }
		public ITerminalNode LPAREN() { return GetToken(PftParser.LPAREN, 0); }
		public CompositeListContext compositeList() {
			return GetRuleContext<CompositeListContext>(0);
		}
		public ChooseFunctionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_chooseFunction; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPftListener typedListener = listener as IPftListener;
			if (typedListener != null) typedListener.EnterChooseFunction(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPftListener typedListener = listener as IPftListener;
			if (typedListener != null) typedListener.ExitChooseFunction(this);
		}
	}

	[RuleVersion(0)]
	public ChooseFunctionContext chooseFunction() {
		ChooseFunctionContext _localctx = new ChooseFunctionContext(_ctx, State);
		EnterRule(_localctx, 62, RULE_chooseFunction);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 749; Match(CHOOSE);
			State = 750; Match(LPAREN);
			State = 751; _localctx.prompt = compositeList();
			State = 752; Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ChrFunctionContext : ParserRuleContext {
		public ArithExprContext code;
		public ArithExprContext arithExpr() {
			return GetRuleContext<ArithExprContext>(0);
		}
		public ITerminalNode RPAREN() { return GetToken(PftParser.RPAREN, 0); }
		public ITerminalNode CHR() { return GetToken(PftParser.CHR, 0); }
		public ITerminalNode LPAREN() { return GetToken(PftParser.LPAREN, 0); }
		public ChrFunctionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_chrFunction; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPftListener typedListener = listener as IPftListener;
			if (typedListener != null) typedListener.EnterChrFunction(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPftListener typedListener = listener as IPftListener;
			if (typedListener != null) typedListener.ExitChrFunction(this);
		}
	}

	[RuleVersion(0)]
	public ChrFunctionContext chrFunction() {
		ChrFunctionContext _localctx = new ChrFunctionContext(_ctx, State);
		EnterRule(_localctx, 64, RULE_chrFunction);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 754; Match(CHR);
			State = 755; Match(LPAREN);
			State = 756; _localctx.code = arithExpr(0);
			State = 757; Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ClientVersionFunctionContext : ParserRuleContext {
		public ITerminalNode CLIENTVERSION() { return GetToken(PftParser.CLIENTVERSION, 0); }
		public ITerminalNode RPAREN() { return GetToken(PftParser.RPAREN, 0); }
		public ITerminalNode LPAREN() { return GetToken(PftParser.LPAREN, 0); }
		public ClientVersionFunctionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_clientVersionFunction; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPftListener typedListener = listener as IPftListener;
			if (typedListener != null) typedListener.EnterClientVersionFunction(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPftListener typedListener = listener as IPftListener;
			if (typedListener != null) typedListener.ExitClientVersionFunction(this);
		}
	}

	[RuleVersion(0)]
	public ClientVersionFunctionContext clientVersionFunction() {
		ClientVersionFunctionContext _localctx = new ClientVersionFunctionContext(_ctx, State);
		EnterRule(_localctx, 66, RULE_clientVersionFunction);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 759; Match(CLIENTVERSION);
			State = 762;
			switch ( Interpreter.AdaptivePredict(_input,22,_ctx) ) {
			case 1:
				{
				State = 760; Match(LPAREN);
				State = 761; Match(RPAREN);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CmdlineFunctionContext : ParserRuleContext {
		public ITerminalNode RPAREN() { return GetToken(PftParser.RPAREN, 0); }
		public ITerminalNode LPAREN() { return GetToken(PftParser.LPAREN, 0); }
		public ITerminalNode CMDLINE() { return GetToken(PftParser.CMDLINE, 0); }
		public CmdlineFunctionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_cmdlineFunction; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPftListener typedListener = listener as IPftListener;
			if (typedListener != null) typedListener.EnterCmdlineFunction(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPftListener typedListener = listener as IPftListener;
			if (typedListener != null) typedListener.ExitCmdlineFunction(this);
		}
	}

	[RuleVersion(0)]
	public CmdlineFunctionContext cmdlineFunction() {
		CmdlineFunctionContext _localctx = new CmdlineFunctionContext(_ctx, State);
		EnterRule(_localctx, 68, RULE_cmdlineFunction);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 764; Match(CMDLINE);
			State = 767;
			switch ( Interpreter.AdaptivePredict(_input,23,_ctx) ) {
			case 1:
				{
				State = 765; Match(LPAREN);
				State = 766; Match(RPAREN);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ColorFunctionContext : ParserRuleContext {
		public SimpleFormatContext color;
		public CompositeListContext text;
		public ITerminalNode COMMA() { return GetToken(PftParser.COMMA, 0); }
		public ITerminalNode RPAREN() { return GetToken(PftParser.RPAREN, 0); }
		public SimpleFormatContext simpleFormat() {
			return GetRuleContext<SimpleFormatContext>(0);
		}
		public ITerminalNode COLOR() { return GetToken(PftParser.COLOR, 0); }
		public ITerminalNode LPAREN() { return GetToken(PftParser.LPAREN, 0); }
		public CompositeListContext compositeList() {
			return GetRuleContext<CompositeListContext>(0);
		}
		public ColorFunctionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_colorFunction; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPftListener typedListener = listener as IPftListener;
			if (typedListener != null) typedListener.EnterColorFunction(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPftListener typedListener = listener as IPftListener;
			if (typedListener != null) typedListener.ExitColorFunction(this);
		}
	}

	[RuleVersion(0)]
	public ColorFunctionContext colorFunction() {
		ColorFunctionContext _localctx = new ColorFunctionContext(_ctx, State);
		EnterRule(_localctx, 70, RULE_colorFunction);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 769; Match(COLOR);
			State = 770; Match(LPAREN);
			State = 771; _localctx.color = simpleFormat();
			State = 772; Match(COMMA);
			State = 773; _localctx.text = compositeList();
			State = 774; Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CombineFunctionContext : ParserRuleContext {
		public CompositeListContext arg1;
		public CompositeListContext arg2;
		public ITerminalNode COMBINE() { return GetToken(PftParser.COMBINE, 0); }
		public ITerminalNode COMMA() { return GetToken(PftParser.COMMA, 0); }
		public ITerminalNode RPAREN() { return GetToken(PftParser.RPAREN, 0); }
		public ITerminalNode LPAREN() { return GetToken(PftParser.LPAREN, 0); }
		public CompositeListContext compositeList(int i) {
			return GetRuleContext<CompositeListContext>(i);
		}
		public CompositeListContext[] compositeList() {
			return GetRuleContexts<CompositeListContext>();
		}
		public CombineFunctionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_combineFunction; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPftListener typedListener = listener as IPftListener;
			if (typedListener != null) typedListener.EnterCombineFunction(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPftListener typedListener = listener as IPftListener;
			if (typedListener != null) typedListener.ExitCombineFunction(this);
		}
	}

	[RuleVersion(0)]
	public CombineFunctionContext combineFunction() {
		CombineFunctionContext _localctx = new CombineFunctionContext(_ctx, State);
		EnterRule(_localctx, 72, RULE_combineFunction);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 776; Match(COMBINE);
			State = 777; Match(LPAREN);
			State = 778; _localctx.arg1 = compositeList();
			State = 779; Match(COMMA);
			State = 780; _localctx.arg2 = compositeList();
			State = 781; Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CommandCContext : ParserRuleContext {
		public ITerminalNode COMMANDC() { return GetToken(PftParser.COMMANDC, 0); }
		public CommandCContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_commandC; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPftListener typedListener = listener as IPftListener;
			if (typedListener != null) typedListener.EnterCommandC(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPftListener typedListener = listener as IPftListener;
			if (typedListener != null) typedListener.ExitCommandC(this);
		}
	}

	[RuleVersion(0)]
	public CommandCContext commandC() {
		CommandCContext _localctx = new CommandCContext(_ctx, State);
		EnterRule(_localctx, 74, RULE_commandC);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 783; Match(COMMANDC);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CommandXContext : ParserRuleContext {
		public ITerminalNode COMMANDX() { return GetToken(PftParser.COMMANDX, 0); }
		public CommandXContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_commandX; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPftListener typedListener = listener as IPftListener;
			if (typedListener != null) typedListener.EnterCommandX(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPftListener typedListener = listener as IPftListener;
			if (typedListener != null) typedListener.ExitCommandX(this);
		}
	}

	[RuleVersion(0)]
	public CommandXContext commandX() {
		CommandXContext _localctx = new CommandXContext(_ctx, State);
		EnterRule(_localctx, 76, RULE_commandX);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 785; Match(COMMANDX);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CoutFunctionContext : ParserRuleContext {
		public CompositeListContext text;
		public ITerminalNode COUT() { return GetToken(PftParser.COUT, 0); }
		public ITerminalNode RPAREN() { return GetToken(PftParser.RPAREN, 0); }
		public ITerminalNode LPAREN() { return GetToken(PftParser.LPAREN, 0); }
		public CompositeListContext compositeList() {
			return GetRuleContext<CompositeListContext>(0);
		}
		public CoutFunctionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_coutFunction; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPftListener typedListener = listener as IPftListener;
			if (typedListener != null) typedListener.EnterCoutFunction(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPftListener typedListener = listener as IPftListener;
			if (typedListener != null) typedListener.ExitCoutFunction(this);
		}
	}

	[RuleVersion(0)]
	public CoutFunctionContext coutFunction() {
		CoutFunctionContext _localctx = new CoutFunctionContext(_ctx, State);
		EnterRule(_localctx, 78, RULE_coutFunction);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 787; Match(COUT);
			State = 788; Match(LPAREN);
			State = 789; _localctx.text = compositeList();
			State = 790; Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CreateDbFunctionContext : ParserRuleContext {
		public SimpleFormatContext name;
		public ITerminalNode RPAREN() { return GetToken(PftParser.RPAREN, 0); }
		public SimpleFormatContext simpleFormat() {
			return GetRuleContext<SimpleFormatContext>(0);
		}
		public ITerminalNode LPAREN() { return GetToken(PftParser.LPAREN, 0); }
		public ITerminalNode CREATEDB() { return GetToken(PftParser.CREATEDB, 0); }
		public CreateDbFunctionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_createDbFunction; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPftListener typedListener = listener as IPftListener;
			if (typedListener != null) typedListener.EnterCreateDbFunction(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPftListener typedListener = listener as IPftListener;
			if (typedListener != null) typedListener.ExitCreateDbFunction(this);
		}
	}

	[RuleVersion(0)]
	public CreateDbFunctionContext createDbFunction() {
		CreateDbFunctionContext _localctx = new CreateDbFunctionContext(_ctx, State);
		EnterRule(_localctx, 80, RULE_createDbFunction);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 792; Match(CREATEDB);
			State = 793; Match(LPAREN);
			State = 794; _localctx.name = simpleFormat();
			State = 795; Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CpuFunctionContext : ParserRuleContext {
		public ITerminalNode RPAREN() { return GetToken(PftParser.RPAREN, 0); }
		public ITerminalNode LPAREN() { return GetToken(PftParser.LPAREN, 0); }
		public ITerminalNode CPU() { return GetToken(PftParser.CPU, 0); }
		public CpuFunctionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_cpuFunction; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPftListener typedListener = listener as IPftListener;
			if (typedListener != null) typedListener.EnterCpuFunction(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPftListener typedListener = listener as IPftListener;
			if (typedListener != null) typedListener.ExitCpuFunction(this);
		}
	}

	[RuleVersion(0)]
	public CpuFunctionContext cpuFunction() {
		CpuFunctionContext _localctx = new CpuFunctionContext(_ctx, State);
		EnterRule(_localctx, 82, RULE_cpuFunction);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 797; Match(CPU);
			State = 800;
			switch ( Interpreter.AdaptivePredict(_input,24,_ctx) ) {
			case 1:
				{
				State = 798; Match(LPAREN);
				State = 799; Match(RPAREN);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CurdirFunctionContext : ParserRuleContext {
		public ITerminalNode CURDIR() { return GetToken(PftParser.CURDIR, 0); }
		public ITerminalNode RPAREN() { return GetToken(PftParser.RPAREN, 0); }
		public ITerminalNode LPAREN() { return GetToken(PftParser.LPAREN, 0); }
		public CurdirFunctionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_curdirFunction; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPftListener typedListener = listener as IPftListener;
			if (typedListener != null) typedListener.EnterCurdirFunction(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPftListener typedListener = listener as IPftListener;
			if (typedListener != null) typedListener.ExitCurdirFunction(this);
		}
	}

	[RuleVersion(0)]
	public CurdirFunctionContext curdirFunction() {
		CurdirFunctionContext _localctx = new CurdirFunctionContext(_ctx, State);
		EnterRule(_localctx, 84, RULE_curdirFunction);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 802; Match(CURDIR);
			State = 805;
			switch ( Interpreter.AdaptivePredict(_input,25,_ctx) ) {
			case 1:
				{
				State = 803; Match(LPAREN);
				State = 804; Match(RPAREN);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DatabaseFunctionContext : ParserRuleContext {
		public ITerminalNode DATABASE() { return GetToken(PftParser.DATABASE, 0); }
		public ITerminalNode RPAREN() { return GetToken(PftParser.RPAREN, 0); }
		public ITerminalNode LPAREN() { return GetToken(PftParser.LPAREN, 0); }
		public DatabaseFunctionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_databaseFunction; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPftListener typedListener = listener as IPftListener;
			if (typedListener != null) typedListener.EnterDatabaseFunction(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPftListener typedListener = listener as IPftListener;
			if (typedListener != null) typedListener.ExitDatabaseFunction(this);
		}
	}

	[RuleVersion(0)]
	public DatabaseFunctionContext databaseFunction() {
		DatabaseFunctionContext _localctx = new DatabaseFunctionContext(_ctx, State);
		EnterRule(_localctx, 86, RULE_databaseFunction);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 807; Match(DATABASE);
			State = 810;
			switch ( Interpreter.AdaptivePredict(_input,26,_ctx) ) {
			case 1:
				{
				State = 808; Match(LPAREN);
				State = 809; Match(RPAREN);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DateFunctionContext : ParserRuleContext {
		public CompositeListContext format;
		public ITerminalNode DATE() { return GetToken(PftParser.DATE, 0); }
		public ITerminalNode RPAREN() { return GetToken(PftParser.RPAREN, 0); }
		public ITerminalNode LPAREN() { return GetToken(PftParser.LPAREN, 0); }
		public CompositeListContext compositeList() {
			return GetRuleContext<CompositeListContext>(0);
		}
		public DateFunctionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dateFunction; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPftListener typedListener = listener as IPftListener;
			if (typedListener != null) typedListener.EnterDateFunction(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPftListener typedListener = listener as IPftListener;
			if (typedListener != null) typedListener.ExitDateFunction(this);
		}
	}

	[RuleVersion(0)]
	public DateFunctionContext dateFunction() {
		DateFunctionContext _localctx = new DateFunctionContext(_ctx, State);
		EnterRule(_localctx, 88, RULE_dateFunction);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 812; Match(DATE);
			State = 817;
			switch ( Interpreter.AdaptivePredict(_input,27,_ctx) ) {
			case 1:
				{
				State = 813; Match(LPAREN);
				State = 814; _localctx.format = compositeList();
				State = 815; Match(RPAREN);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DebugBreakContext : ParserRuleContext {
		public ITerminalNode BANG() { return GetToken(PftParser.BANG, 0); }
		public DebugBreakContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_debugBreak; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPftListener typedListener = listener as IPftListener;
			if (typedListener != null) typedListener.EnterDebugBreak(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPftListener typedListener = listener as IPftListener;
			if (typedListener != null) typedListener.ExitDebugBreak(this);
		}
	}

	[RuleVersion(0)]
	public DebugBreakContext debugBreak() {
		DebugBreakContext _localctx = new DebugBreakContext(_ctx, State);
		EnterRule(_localctx, 90, RULE_debugBreak);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 819; Match(BANG);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DebugStatementContext : ParserRuleContext {
		public CompositeListContext text;
		public ITerminalNode DEBUG() { return GetToken(PftParser.DEBUG, 0); }
		public ITerminalNode RPAREN() { return GetToken(PftParser.RPAREN, 0); }
		public ITerminalNode LPAREN() { return GetToken(PftParser.LPAREN, 0); }
		public CompositeListContext compositeList() {
			return GetRuleContext<CompositeListContext>(0);
		}
		public DebugStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_debugStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPftListener typedListener = listener as IPftListener;
			if (typedListener != null) typedListener.EnterDebugStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPftListener typedListener = listener as IPftListener;
			if (typedListener != null) typedListener.ExitDebugStatement(this);
		}
	}

	[RuleVersion(0)]
	public DebugStatementContext debugStatement() {
		DebugStatementContext _localctx = new DebugStatementContext(_ctx, State);
		EnterRule(_localctx, 92, RULE_debugStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 821; Match(DEBUG);
			State = 822; Match(LPAREN);
			State = 823; _localctx.text = compositeList();
			State = 824; Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DeleteDbFunctionContext : ParserRuleContext {
		public SimpleFormatContext name;
		public ITerminalNode RPAREN() { return GetToken(PftParser.RPAREN, 0); }
		public ITerminalNode DELETEDB() { return GetToken(PftParser.DELETEDB, 0); }
		public SimpleFormatContext simpleFormat() {
			return GetRuleContext<SimpleFormatContext>(0);
		}
		public ITerminalNode LPAREN() { return GetToken(PftParser.LPAREN, 0); }
		public DeleteDbFunctionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_deleteDbFunction; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPftListener typedListener = listener as IPftListener;
			if (typedListener != null) typedListener.EnterDeleteDbFunction(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPftListener typedListener = listener as IPftListener;
			if (typedListener != null) typedListener.ExitDeleteDbFunction(this);
		}
	}

	[RuleVersion(0)]
	public DeleteDbFunctionContext deleteDbFunction() {
		DeleteDbFunctionContext _localctx = new DeleteDbFunctionContext(_ctx, State);
		EnterRule(_localctx, 94, RULE_deleteDbFunction);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 826; Match(DELETEDB);
			State = 827; Match(LPAREN);
			State = 828; _localctx.name = simpleFormat();
			State = 829; Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DeleteFileFunctionContext : ParserRuleContext {
		public CompositeListContext name;
		public ITerminalNode DELETEFILE() { return GetToken(PftParser.DELETEFILE, 0); }
		public ITerminalNode RPAREN() { return GetToken(PftParser.RPAREN, 0); }
		public ITerminalNode LPAREN() { return GetToken(PftParser.LPAREN, 0); }
		public CompositeListContext compositeList() {
			return GetRuleContext<CompositeListContext>(0);
		}
		public DeleteFileFunctionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_deleteFileFunction; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPftListener typedListener = listener as IPftListener;
			if (typedListener != null) typedListener.EnterDeleteFileFunction(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPftListener typedListener = listener as IPftListener;
			if (typedListener != null) typedListener.ExitDeleteFileFunction(this);
		}
	}

	[RuleVersion(0)]
	public DeleteFileFunctionContext deleteFileFunction() {
		DeleteFileFunctionContext _localctx = new DeleteFileFunctionContext(_ctx, State);
		EnterRule(_localctx, 96, RULE_deleteFileFunction);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 831; Match(DELETEFILE);
			State = 832; Match(LPAREN);
			State = 833; _localctx.name = compositeList();
			State = 834; Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DelRecFunctionContext : ParserRuleContext {
		public ArithExprContext mfn;
		public ITerminalNode DELREC() { return GetToken(PftParser.DELREC, 0); }
		public ArithExprContext arithExpr() {
			return GetRuleContext<ArithExprContext>(0);
		}
		public ITerminalNode RPAREN() { return GetToken(PftParser.RPAREN, 0); }
		public ITerminalNode LPAREN() { return GetToken(PftParser.LPAREN, 0); }
		public DelRecFunctionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_delRecFunction; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPftListener typedListener = listener as IPftListener;
			if (typedListener != null) typedListener.EnterDelRecFunction(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPftListener typedListener = listener as IPftListener;
			if (typedListener != null) typedListener.ExitDelRecFunction(this);
		}
	}

	[RuleVersion(0)]
	public DelRecFunctionContext delRecFunction() {
		DelRecFunctionContext _localctx = new DelRecFunctionContext(_ctx, State);
		EnterRule(_localctx, 98, RULE_delRecFunction);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 836; Match(DELREC);
			State = 842;
			switch ( Interpreter.AdaptivePredict(_input,29,_ctx) ) {
			case 1:
				{
				State = 837; Match(LPAREN);
				State = 839;
				_la = _input.La(1);
				if (_la==FLOAT || _la==ID || ((((_la - 77)) & ~0x3f) == 0 && ((1L << (_la - 77)) & ((1L << (FREEMEMORY - 77)) | (1L << (IOCC - 77)) | (1L << (L - 77)) | (1L << (LICENSECOUNT - 77)) | (1L << (LICENSELEFT - 77)) | (1L << (LICENSEUSED - 77)) | (1L << (LPAREN - 77)) | (1L << (MFN - 77)) | (1L << (MINUS - 77)) | (1L << (NOCC - 77)) | (1L << (NPOST - 77)) | (1L << (ORD - 77)))) != 0) || ((((_la - 159)) & ~0x3f) == 0 && ((1L << (_la - 159)) & ((1L << (RSUM - 159)) | (1L << (SIZE - 159)) | (1L << (TOTALMEMORY - 159)) | (1L << (VAL - 159)) | (1L << (WORKINGSET - 159)))) != 0)) {
					{
					State = 838; _localctx.mfn = arithExpr(0);
					}
				}

				State = 841; Match(RPAREN);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EatFunctionContext : ParserRuleContext {
		public CompositeListContext text;
		public ITerminalNode RPAREN() { return GetToken(PftParser.RPAREN, 0); }
		public ITerminalNode LPAREN() { return GetToken(PftParser.LPAREN, 0); }
		public ITerminalNode EAT() { return GetToken(PftParser.EAT, 0); }
		public CompositeListContext compositeList() {
			return GetRuleContext<CompositeListContext>(0);
		}
		public EatFunctionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_eatFunction; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPftListener typedListener = listener as IPftListener;
			if (typedListener != null) typedListener.EnterEatFunction(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPftListener typedListener = listener as IPftListener;
			if (typedListener != null) typedListener.ExitEatFunction(this);
		}
	}

	[RuleVersion(0)]
	public EatFunctionContext eatFunction() {
		EatFunctionContext _localctx = new EatFunctionContext(_ctx, State);
		EnterRule(_localctx, 100, RULE_eatFunction);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 844; Match(EAT);
			State = 845; Match(LPAREN);
			State = 846; _localctx.text = compositeList();
			State = 847; Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EditTextFunctionContext : ParserRuleContext {
		public CompositeListContext text;
		public ITerminalNode EDITTEXT() { return GetToken(PftParser.EDITTEXT, 0); }
		public ITerminalNode RPAREN() { return GetToken(PftParser.RPAREN, 0); }
		public ITerminalNode LPAREN() { return GetToken(PftParser.LPAREN, 0); }
		public CompositeListContext compositeList() {
			return GetRuleContext<CompositeListContext>(0);
		}
		public EditTextFunctionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_editTextFunction; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPftListener typedListener = listener as IPftListener;
			if (typedListener != null) typedListener.EnterEditTextFunction(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPftListener typedListener = listener as IPftListener;
			if (typedListener != null) typedListener.ExitEditTextFunction(this);
		}
	}

	[RuleVersion(0)]
	public EditTextFunctionContext editTextFunction() {
		EditTextFunctionContext _localctx = new EditTextFunctionContext(_ctx, State);
		EnterRule(_localctx, 102, RULE_editTextFunction);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 849; Match(EDITTEXT);
			State = 850; Match(LPAREN);
			State = 851; _localctx.text = compositeList();
			State = 852; Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ErrorStatementContext : ParserRuleContext {
		public CompositeListContext text;
		public ITerminalNode RPAREN() { return GetToken(PftParser.RPAREN, 0); }
		public ITerminalNode ERROR() { return GetToken(PftParser.ERROR, 0); }
		public ITerminalNode LPAREN() { return GetToken(PftParser.LPAREN, 0); }
		public CompositeListContext compositeList() {
			return GetRuleContext<CompositeListContext>(0);
		}
		public ErrorStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_errorStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPftListener typedListener = listener as IPftListener;
			if (typedListener != null) typedListener.EnterErrorStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPftListener typedListener = listener as IPftListener;
			if (typedListener != null) typedListener.ExitErrorStatement(this);
		}
	}

	[RuleVersion(0)]
	public ErrorStatementContext errorStatement() {
		ErrorStatementContext _localctx = new ErrorStatementContext(_ctx, State);
		EnterRule(_localctx, 104, RULE_errorStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 854; Match(ERROR);
			State = 855; Match(LPAREN);
			State = 856; _localctx.text = compositeList();
			State = 857; Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EscapedLiteralContext : ParserRuleContext {
		public ITerminalNode ESCAPED() { return GetToken(PftParser.ESCAPED, 0); }
		public EscapedLiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_escapedLiteral; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPftListener typedListener = listener as IPftListener;
			if (typedListener != null) typedListener.EnterEscapedLiteral(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPftListener typedListener = listener as IPftListener;
			if (typedListener != null) typedListener.ExitEscapedLiteral(this);
		}
	}

	[RuleVersion(0)]
	public EscapedLiteralContext escapedLiteral() {
		EscapedLiteralContext _localctx = new EscapedLiteralContext(_ctx, State);
		EnterRule(_localctx, 106, RULE_escapedLiteral);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 859; Match(ESCAPED);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpandEnvFunctionContext : ParserRuleContext {
		public SimpleFormatContext text;
		public ITerminalNode EXPANDENV() { return GetToken(PftParser.EXPANDENV, 0); }
		public ITerminalNode RPAREN() { return GetToken(PftParser.RPAREN, 0); }
		public SimpleFormatContext simpleFormat() {
			return GetRuleContext<SimpleFormatContext>(0);
		}
		public ITerminalNode LPAREN() { return GetToken(PftParser.LPAREN, 0); }
		public ExpandEnvFunctionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expandEnvFunction; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPftListener typedListener = listener as IPftListener;
			if (typedListener != null) typedListener.EnterExpandEnvFunction(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPftListener typedListener = listener as IPftListener;
			if (typedListener != null) typedListener.ExitExpandEnvFunction(this);
		}
	}

	[RuleVersion(0)]
	public ExpandEnvFunctionContext expandEnvFunction() {
		ExpandEnvFunctionContext _localctx = new ExpandEnvFunctionContext(_ctx, State);
		EnterRule(_localctx, 108, RULE_expandEnvFunction);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 861; Match(EXPANDENV);
			State = 862; Match(LPAREN);
			State = 863; _localctx.text = simpleFormat();
			State = 864; Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExtractDirFunctionContext : ParserRuleContext {
		public CompositeListContext path;
		public ITerminalNode EXTRACTDIR() { return GetToken(PftParser.EXTRACTDIR, 0); }
		public ITerminalNode RPAREN() { return GetToken(PftParser.RPAREN, 0); }
		public ITerminalNode LPAREN() { return GetToken(PftParser.LPAREN, 0); }
		public CompositeListContext compositeList() {
			return GetRuleContext<CompositeListContext>(0);
		}
		public ExtractDirFunctionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_extractDirFunction; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPftListener typedListener = listener as IPftListener;
			if (typedListener != null) typedListener.EnterExtractDirFunction(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPftListener typedListener = listener as IPftListener;
			if (typedListener != null) typedListener.ExitExtractDirFunction(this);
		}
	}

	[RuleVersion(0)]
	public ExtractDirFunctionContext extractDirFunction() {
		ExtractDirFunctionContext _localctx = new ExtractDirFunctionContext(_ctx, State);
		EnterRule(_localctx, 110, RULE_extractDirFunction);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 866; Match(EXTRACTDIR);
			State = 867; Match(LPAREN);
			State = 868; _localctx.path = compositeList();
			State = 869; Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExtractDriveFunctionContext : ParserRuleContext {
		public CompositeListContext path;
		public ITerminalNode EXTRACTDRIVE() { return GetToken(PftParser.EXTRACTDRIVE, 0); }
		public ITerminalNode RPAREN() { return GetToken(PftParser.RPAREN, 0); }
		public ITerminalNode LPAREN() { return GetToken(PftParser.LPAREN, 0); }
		public CompositeListContext compositeList() {
			return GetRuleContext<CompositeListContext>(0);
		}
		public ExtractDriveFunctionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_extractDriveFunction; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPftListener typedListener = listener as IPftListener;
			if (typedListener != null) typedListener.EnterExtractDriveFunction(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPftListener typedListener = listener as IPftListener;
			if (typedListener != null) typedListener.ExitExtractDriveFunction(this);
		}
	}

	[RuleVersion(0)]
	public ExtractDriveFunctionContext extractDriveFunction() {
		ExtractDriveFunctionContext _localctx = new ExtractDriveFunctionContext(_ctx, State);
		EnterRule(_localctx, 112, RULE_extractDriveFunction);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 871; Match(EXTRACTDRIVE);
			State = 872; Match(LPAREN);
			State = 873; _localctx.path = compositeList();
			State = 874; Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExtractExtFunctionContext : ParserRuleContext {
		public CompositeListContext path;
		public ITerminalNode EXTRACTEXT() { return GetToken(PftParser.EXTRACTEXT, 0); }
		public ITerminalNode RPAREN() { return GetToken(PftParser.RPAREN, 0); }
		public ITerminalNode LPAREN() { return GetToken(PftParser.LPAREN, 0); }
		public CompositeListContext compositeList() {
			return GetRuleContext<CompositeListContext>(0);
		}
		public ExtractExtFunctionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_extractExtFunction; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPftListener typedListener = listener as IPftListener;
			if (typedListener != null) typedListener.EnterExtractExtFunction(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPftListener typedListener = listener as IPftListener;
			if (typedListener != null) typedListener.ExitExtractExtFunction(this);
		}
	}

	[RuleVersion(0)]
	public ExtractExtFunctionContext extractExtFunction() {
		ExtractExtFunctionContext _localctx = new ExtractExtFunctionContext(_ctx, State);
		EnterRule(_localctx, 114, RULE_extractExtFunction);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 876; Match(EXTRACTEXT);
			State = 877; Match(LPAREN);
			State = 878; _localctx.path = compositeList();
			State = 879; Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExtractNameFunctionContext : ParserRuleContext {
		public CompositeListContext path;
		public ITerminalNode EXTRACTNAME() { return GetToken(PftParser.EXTRACTNAME, 0); }
		public ITerminalNode RPAREN() { return GetToken(PftParser.RPAREN, 0); }
		public ITerminalNode LPAREN() { return GetToken(PftParser.LPAREN, 0); }
		public CompositeListContext compositeList() {
			return GetRuleContext<CompositeListContext>(0);
		}
		public ExtractNameFunctionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_extractNameFunction; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPftListener typedListener = listener as IPftListener;
			if (typedListener != null) typedListener.EnterExtractNameFunction(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPftListener typedListener = listener as IPftListener;
			if (typedListener != null) typedListener.ExitExtractNameFunction(this);
		}
	}

	[RuleVersion(0)]
	public ExtractNameFunctionContext extractNameFunction() {
		ExtractNameFunctionContext _localctx = new ExtractNameFunctionContext(_ctx, State);
		EnterRule(_localctx, 116, RULE_extractNameFunction);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 881; Match(EXTRACTNAME);
			State = 882; Match(LPAREN);
			State = 883; _localctx.path = compositeList();
			State = 884; Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FatalStatementContext : ParserRuleContext {
		public CompositeListContext text;
		public ITerminalNode RPAREN() { return GetToken(PftParser.RPAREN, 0); }
		public ITerminalNode FATAL() { return GetToken(PftParser.FATAL, 0); }
		public ITerminalNode LPAREN() { return GetToken(PftParser.LPAREN, 0); }
		public CompositeListContext compositeList() {
			return GetRuleContext<CompositeListContext>(0);
		}
		public FatalStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fatalStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPftListener typedListener = listener as IPftListener;
			if (typedListener != null) typedListener.EnterFatalStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPftListener typedListener = listener as IPftListener;
			if (typedListener != null) typedListener.ExitFatalStatement(this);
		}
	}

	[RuleVersion(0)]
	public FatalStatementContext fatalStatement() {
		FatalStatementContext _localctx = new FatalStatementContext(_ctx, State);
		EnterRule(_localctx, 118, RULE_fatalStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 886; Match(FATAL);
			State = 887; Match(LPAREN);
			State = 888; _localctx.text = compositeList();
			State = 889; Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class F2FunctionContext : ParserRuleContext {
		public ArithExprContext value;
		public CompositeListContext format;
		public ITerminalNode COMMA() { return GetToken(PftParser.COMMA, 0); }
		public ArithExprContext arithExpr() {
			return GetRuleContext<ArithExprContext>(0);
		}
		public ITerminalNode RPAREN() { return GetToken(PftParser.RPAREN, 0); }
		public ITerminalNode LPAREN() { return GetToken(PftParser.LPAREN, 0); }
		public CompositeListContext compositeList() {
			return GetRuleContext<CompositeListContext>(0);
		}
		public ITerminalNode F2() { return GetToken(PftParser.F2, 0); }
		public F2FunctionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_f2Function; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPftListener typedListener = listener as IPftListener;
			if (typedListener != null) typedListener.EnterF2Function(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPftListener typedListener = listener as IPftListener;
			if (typedListener != null) typedListener.ExitF2Function(this);
		}
	}

	[RuleVersion(0)]
	public F2FunctionContext f2Function() {
		F2FunctionContext _localctx = new F2FunctionContext(_ctx, State);
		EnterRule(_localctx, 120, RULE_f2Function);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 891; Match(F2);
			State = 892; Match(LPAREN);
			State = 893; _localctx.value = arithExpr(0);
			State = 896;
			_la = _input.La(1);
			if (_la==COMMA) {
				{
				State = 894; Match(COMMA);
				State = 895; _localctx.format = compositeList();
				}
			}

			State = 898; Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FFunctionContext : ParserRuleContext {
		public ArithExprContext arg1;
		public ArithExprContext arg2;
		public ArithExprContext arg3;
		public ITerminalNode F() { return GetToken(PftParser.F, 0); }
		public ArithExprContext arithExpr(int i) {
			return GetRuleContext<ArithExprContext>(i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(PftParser.COMMA); }
		public ArithExprContext[] arithExpr() {
			return GetRuleContexts<ArithExprContext>();
		}
		public ITerminalNode RPAREN() { return GetToken(PftParser.RPAREN, 0); }
		public ITerminalNode LPAREN() { return GetToken(PftParser.LPAREN, 0); }
		public ITerminalNode COMMA(int i) {
			return GetToken(PftParser.COMMA, i);
		}
		public FFunctionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fFunction; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPftListener typedListener = listener as IPftListener;
			if (typedListener != null) typedListener.EnterFFunction(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPftListener typedListener = listener as IPftListener;
			if (typedListener != null) typedListener.ExitFFunction(this);
		}
	}

	[RuleVersion(0)]
	public FFunctionContext fFunction() {
		FFunctionContext _localctx = new FFunctionContext(_ctx, State);
		EnterRule(_localctx, 122, RULE_fFunction);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 900; Match(F);
			State = 901; Match(LPAREN);
			State = 902; _localctx.arg1 = arithExpr(0);
			State = 909;
			_la = _input.La(1);
			if (_la==COMMA) {
				{
				State = 903; Match(COMMA);
				State = 904; _localctx.arg2 = arithExpr(0);
				State = 907;
				_la = _input.La(1);
				if (_la==COMMA) {
					{
					State = 905; Match(COMMA);
					State = 906; _localctx.arg3 = arithExpr(0);
					}
				}

				}
			}

			State = 911; Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FontNameFunctionContext : ParserRuleContext {
		public CompositeElementContext name;
		public CompositeListContext text;
		public CompositeElementContext compositeElement() {
			return GetRuleContext<CompositeElementContext>(0);
		}
		public ITerminalNode FONTNAME() { return GetToken(PftParser.FONTNAME, 0); }
		public ITerminalNode COMMA() { return GetToken(PftParser.COMMA, 0); }
		public ITerminalNode RPAREN() { return GetToken(PftParser.RPAREN, 0); }
		public ITerminalNode LPAREN() { return GetToken(PftParser.LPAREN, 0); }
		public CompositeListContext compositeList() {
			return GetRuleContext<CompositeListContext>(0);
		}
		public FontNameFunctionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fontNameFunction; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPftListener typedListener = listener as IPftListener;
			if (typedListener != null) typedListener.EnterFontNameFunction(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPftListener typedListener = listener as IPftListener;
			if (typedListener != null) typedListener.ExitFontNameFunction(this);
		}
	}

	[RuleVersion(0)]
	public FontNameFunctionContext fontNameFunction() {
		FontNameFunctionContext _localctx = new FontNameFunctionContext(_ctx, State);
		EnterRule(_localctx, 124, RULE_fontNameFunction);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 913; Match(FONTNAME);
			State = 914; Match(LPAREN);
			State = 915; _localctx.name = compositeElement();
			State = 916; Match(COMMA);
			State = 917; _localctx.text = compositeList();
			State = 918; Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FontSizeFunctionContext : ParserRuleContext {
		public ArithExprContext size;
		public CompositeListContext text;
		public ITerminalNode COMMA() { return GetToken(PftParser.COMMA, 0); }
		public ITerminalNode FONTSIZE() { return GetToken(PftParser.FONTSIZE, 0); }
		public ArithExprContext arithExpr() {
			return GetRuleContext<ArithExprContext>(0);
		}
		public ITerminalNode RPAREN() { return GetToken(PftParser.RPAREN, 0); }
		public ITerminalNode LPAREN() { return GetToken(PftParser.LPAREN, 0); }
		public CompositeListContext compositeList() {
			return GetRuleContext<CompositeListContext>(0);
		}
		public FontSizeFunctionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fontSizeFunction; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPftListener typedListener = listener as IPftListener;
			if (typedListener != null) typedListener.EnterFontSizeFunction(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPftListener typedListener = listener as IPftListener;
			if (typedListener != null) typedListener.ExitFontSizeFunction(this);
		}
	}

	[RuleVersion(0)]
	public FontSizeFunctionContext fontSizeFunction() {
		FontSizeFunctionContext _localctx = new FontSizeFunctionContext(_ctx, State);
		EnterRule(_localctx, 126, RULE_fontSizeFunction);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 920; Match(FONTSIZE);
			State = 921; Match(LPAREN);
			State = 922; _localctx.size = arithExpr(0);
			State = 923; Match(COMMA);
			State = 924; _localctx.text = compositeList();
			State = 925; Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FormatExitStatementContext : ParserRuleContext {
		public CompositeListContext text;
		public ITerminalNode RPAREN() { return GetToken(PftParser.RPAREN, 0); }
		public ITerminalNode FORMATEXIT() { return GetToken(PftParser.FORMATEXIT, 0); }
		public ITerminalNode LPAREN() { return GetToken(PftParser.LPAREN, 0); }
		public CompositeListContext compositeList() {
			return GetRuleContext<CompositeListContext>(0);
		}
		public FormatExitStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_formatExitStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPftListener typedListener = listener as IPftListener;
			if (typedListener != null) typedListener.EnterFormatExitStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPftListener typedListener = listener as IPftListener;
			if (typedListener != null) typedListener.ExitFormatExitStatement(this);
		}
	}

	[RuleVersion(0)]
	public FormatExitStatementContext formatExitStatement() {
		FormatExitStatementContext _localctx = new FormatExitStatementContext(_ctx, State);
		EnterRule(_localctx, 128, RULE_formatExitStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 927; Match(FORMATEXIT);
			State = 928; Match(LPAREN);
			State = 929; _localctx.text = compositeList();
			State = 930; Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GetenvFunctionContext : ParserRuleContext {
		public CompositeListContext name;
		public ITerminalNode RPAREN() { return GetToken(PftParser.RPAREN, 0); }
		public ITerminalNode LPAREN() { return GetToken(PftParser.LPAREN, 0); }
		public CompositeListContext compositeList() {
			return GetRuleContext<CompositeListContext>(0);
		}
		public ITerminalNode GETENV() { return GetToken(PftParser.GETENV, 0); }
		public GetenvFunctionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_getenvFunction; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPftListener typedListener = listener as IPftListener;
			if (typedListener != null) typedListener.EnterGetenvFunction(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPftListener typedListener = listener as IPftListener;
			if (typedListener != null) typedListener.ExitGetenvFunction(this);
		}
	}

	[RuleVersion(0)]
	public GetenvFunctionContext getenvFunction() {
		GetenvFunctionContext _localctx = new GetenvFunctionContext(_ctx, State);
		EnterRule(_localctx, 130, RULE_getenvFunction);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 932; Match(GETENV);
			State = 933; Match(LPAREN);
			State = 934; _localctx.name = compositeList();
			State = 935; Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class HashOperatorContext : ParserRuleContext {
		public ITerminalNode HASH() { return GetToken(PftParser.HASH, 0); }
		public HashOperatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_hashOperator; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPftListener typedListener = listener as IPftListener;
			if (typedListener != null) typedListener.EnterHashOperator(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPftListener typedListener = listener as IPftListener;
			if (typedListener != null) typedListener.ExitHashOperator(this);
		}
	}

	[RuleVersion(0)]
	public HashOperatorContext hashOperator() {
		HashOperatorContext _localctx = new HashOperatorContext(_ctx, State);
		EnterRule(_localctx, 132, RULE_hashOperator);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 937; Match(HASH);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Header1FunctionContext : ParserRuleContext {
		public CompositeListContext text;
		public ITerminalNode RPAREN() { return GetToken(PftParser.RPAREN, 0); }
		public ITerminalNode LPAREN() { return GetToken(PftParser.LPAREN, 0); }
		public ITerminalNode HEADER1() { return GetToken(PftParser.HEADER1, 0); }
		public CompositeListContext compositeList() {
			return GetRuleContext<CompositeListContext>(0);
		}
		public Header1FunctionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_header1Function; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPftListener typedListener = listener as IPftListener;
			if (typedListener != null) typedListener.EnterHeader1Function(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPftListener typedListener = listener as IPftListener;
			if (typedListener != null) typedListener.ExitHeader1Function(this);
		}
	}

	[RuleVersion(0)]
	public Header1FunctionContext header1Function() {
		Header1FunctionContext _localctx = new Header1FunctionContext(_ctx, State);
		EnterRule(_localctx, 134, RULE_header1Function);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 939; Match(HEADER1);
			State = 940; Match(LPAREN);
			State = 941; _localctx.text = compositeList();
			State = 942; Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Header2FunctionContext : ParserRuleContext {
		public CompositeListContext text;
		public ITerminalNode RPAREN() { return GetToken(PftParser.RPAREN, 0); }
		public ITerminalNode HEADER2() { return GetToken(PftParser.HEADER2, 0); }
		public ITerminalNode LPAREN() { return GetToken(PftParser.LPAREN, 0); }
		public CompositeListContext compositeList() {
			return GetRuleContext<CompositeListContext>(0);
		}
		public Header2FunctionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_header2Function; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPftListener typedListener = listener as IPftListener;
			if (typedListener != null) typedListener.EnterHeader2Function(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPftListener typedListener = listener as IPftListener;
			if (typedListener != null) typedListener.ExitHeader2Function(this);
		}
	}

	[RuleVersion(0)]
	public Header2FunctionContext header2Function() {
		Header2FunctionContext _localctx = new Header2FunctionContext(_ctx, State);
		EnterRule(_localctx, 136, RULE_header2Function);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 944; Match(HEADER2);
			State = 945; Match(LPAREN);
			State = 946; _localctx.text = compositeList();
			State = 947; Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Header3FunctionContext : ParserRuleContext {
		public CompositeListContext text;
		public ITerminalNode HEADER3() { return GetToken(PftParser.HEADER3, 0); }
		public ITerminalNode RPAREN() { return GetToken(PftParser.RPAREN, 0); }
		public ITerminalNode LPAREN() { return GetToken(PftParser.LPAREN, 0); }
		public CompositeListContext compositeList() {
			return GetRuleContext<CompositeListContext>(0);
		}
		public Header3FunctionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_header3Function; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPftListener typedListener = listener as IPftListener;
			if (typedListener != null) typedListener.EnterHeader3Function(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPftListener typedListener = listener as IPftListener;
			if (typedListener != null) typedListener.ExitHeader3Function(this);
		}
	}

	[RuleVersion(0)]
	public Header3FunctionContext header3Function() {
		Header3FunctionContext _localctx = new Header3FunctionContext(_ctx, State);
		EnterRule(_localctx, 138, RULE_header3Function);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 949; Match(HEADER3);
			State = 950; Match(LPAREN);
			State = 951; _localctx.text = compositeList();
			State = 952; Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class HostFunctionContext : ParserRuleContext {
		public ITerminalNode RPAREN() { return GetToken(PftParser.RPAREN, 0); }
		public ITerminalNode HOST() { return GetToken(PftParser.HOST, 0); }
		public ITerminalNode LPAREN() { return GetToken(PftParser.LPAREN, 0); }
		public HostFunctionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_hostFunction; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPftListener typedListener = listener as IPftListener;
			if (typedListener != null) typedListener.EnterHostFunction(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPftListener typedListener = listener as IPftListener;
			if (typedListener != null) typedListener.ExitHostFunction(this);
		}
	}

	[RuleVersion(0)]
	public HostFunctionContext hostFunction() {
		HostFunctionContext _localctx = new HostFunctionContext(_ctx, State);
		EnterRule(_localctx, 140, RULE_hostFunction);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 954; Match(HOST);
			State = 957;
			switch ( Interpreter.AdaptivePredict(_input,33,_ctx) ) {
			case 1:
				{
				State = 955; Match(LPAREN);
				State = 956; Match(RPAREN);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IffFunctionContext : ParserRuleContext {
		public SimpleFormatContext thenBranch;
		public SimpleFormatContext elseBranch;
		public ConditionContext condition() {
			return GetRuleContext<ConditionContext>(0);
		}
		public ITerminalNode[] COMMA() { return GetTokens(PftParser.COMMA); }
		public ITerminalNode RPAREN() { return GetToken(PftParser.RPAREN, 0); }
		public SimpleFormatContext simpleFormat(int i) {
			return GetRuleContext<SimpleFormatContext>(i);
		}
		public SimpleFormatContext[] simpleFormat() {
			return GetRuleContexts<SimpleFormatContext>();
		}
		public ITerminalNode LPAREN() { return GetToken(PftParser.LPAREN, 0); }
		public ITerminalNode IFF() { return GetToken(PftParser.IFF, 0); }
		public ITerminalNode COMMA(int i) {
			return GetToken(PftParser.COMMA, i);
		}
		public IffFunctionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_iffFunction; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPftListener typedListener = listener as IPftListener;
			if (typedListener != null) typedListener.EnterIffFunction(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPftListener typedListener = listener as IPftListener;
			if (typedListener != null) typedListener.ExitIffFunction(this);
		}
	}

	[RuleVersion(0)]
	public IffFunctionContext iffFunction() {
		IffFunctionContext _localctx = new IffFunctionContext(_ctx, State);
		EnterRule(_localctx, 142, RULE_iffFunction);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 959; Match(IFF);
			State = 960; Match(LPAREN);
			State = 961; condition(0);
			State = 962; Match(COMMA);
			State = 963; _localctx.thenBranch = simpleFormat();
			State = 964; Match(COMMA);
			State = 965; _localctx.elseBranch = simpleFormat();
			State = 966; Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IncludeFunctionContext : ParserRuleContext {
		public CompositeListContext name;
		public ITerminalNode INCLUDE() { return GetToken(PftParser.INCLUDE, 0); }
		public ITerminalNode RPAREN() { return GetToken(PftParser.RPAREN, 0); }
		public ITerminalNode LPAREN() { return GetToken(PftParser.LPAREN, 0); }
		public CompositeListContext compositeList() {
			return GetRuleContext<CompositeListContext>(0);
		}
		public IncludeFunctionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_includeFunction; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPftListener typedListener = listener as IPftListener;
			if (typedListener != null) typedListener.EnterIncludeFunction(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPftListener typedListener = listener as IPftListener;
			if (typedListener != null) typedListener.ExitIncludeFunction(this);
		}
	}

	[RuleVersion(0)]
	public IncludeFunctionContext includeFunction() {
		IncludeFunctionContext _localctx = new IncludeFunctionContext(_ctx, State);
		EnterRule(_localctx, 144, RULE_includeFunction);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 968; Match(INCLUDE);
			State = 969; Match(LPAREN);
			State = 970; _localctx.name = compositeList();
			State = 971; Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IncludeStatementContext : ParserRuleContext {
		public ITerminalNode INCLUSION() { return GetToken(PftParser.INCLUSION, 0); }
		public IncludeStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_includeStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPftListener typedListener = listener as IPftListener;
			if (typedListener != null) typedListener.EnterIncludeStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPftListener typedListener = listener as IPftListener;
			if (typedListener != null) typedListener.ExitIncludeStatement(this);
		}
	}

	[RuleVersion(0)]
	public IncludeStatementContext includeStatement() {
		IncludeStatementContext _localctx = new IncludeStatementContext(_ctx, State);
		EnterRule(_localctx, 146, RULE_includeStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 973; Match(INCLUSION);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IncrementFunctionContext : ParserRuleContext {
		public SimpleFormatContext text;
		public ITerminalNode INCREMENT() { return GetToken(PftParser.INCREMENT, 0); }
		public ITerminalNode RPAREN() { return GetToken(PftParser.RPAREN, 0); }
		public SimpleFormatContext simpleFormat() {
			return GetRuleContext<SimpleFormatContext>(0);
		}
		public ITerminalNode LPAREN() { return GetToken(PftParser.LPAREN, 0); }
		public IncrementFunctionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_incrementFunction; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPftListener typedListener = listener as IPftListener;
			if (typedListener != null) typedListener.EnterIncrementFunction(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPftListener typedListener = listener as IPftListener;
			if (typedListener != null) typedListener.ExitIncrementFunction(this);
		}
	}

	[RuleVersion(0)]
	public IncrementFunctionContext incrementFunction() {
		IncrementFunctionContext _localctx = new IncrementFunctionContext(_ctx, State);
		EnterRule(_localctx, 148, RULE_incrementFunction);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 975; Match(INCREMENT);
			State = 976; Match(LPAREN);
			State = 977; _localctx.text = simpleFormat();
			State = 978; Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IniFunctionContext : ParserRuleContext {
		public SimpleFormatContext section;
		public SimpleFormatContext name;
		public SimpleFormatContext defaultValue;
		public ITerminalNode[] COMMA() { return GetTokens(PftParser.COMMA); }
		public ITerminalNode RPAREN() { return GetToken(PftParser.RPAREN, 0); }
		public SimpleFormatContext simpleFormat(int i) {
			return GetRuleContext<SimpleFormatContext>(i);
		}
		public SimpleFormatContext[] simpleFormat() {
			return GetRuleContexts<SimpleFormatContext>();
		}
		public ITerminalNode LPAREN() { return GetToken(PftParser.LPAREN, 0); }
		public ITerminalNode COMMA(int i) {
			return GetToken(PftParser.COMMA, i);
		}
		public ITerminalNode INI() { return GetToken(PftParser.INI, 0); }
		public IniFunctionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_iniFunction; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPftListener typedListener = listener as IPftListener;
			if (typedListener != null) typedListener.EnterIniFunction(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPftListener typedListener = listener as IPftListener;
			if (typedListener != null) typedListener.ExitIniFunction(this);
		}
	}

	[RuleVersion(0)]
	public IniFunctionContext iniFunction() {
		IniFunctionContext _localctx = new IniFunctionContext(_ctx, State);
		EnterRule(_localctx, 150, RULE_iniFunction);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 980; Match(INI);
			State = 981; Match(LPAREN);
			State = 982; _localctx.section = simpleFormat();
			State = 983; Match(COMMA);
			State = 984; _localctx.name = simpleFormat();
			State = 987;
			_la = _input.La(1);
			if (_la==COMMA) {
				{
				State = 985; Match(COMMA);
				State = 986; _localctx.defaultValue = simpleFormat();
				}
			}

			State = 989; Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ItalicFunctionContext : ParserRuleContext {
		public CompositeListContext text;
		public ITerminalNode RPAREN() { return GetToken(PftParser.RPAREN, 0); }
		public ITerminalNode ITALIC() { return GetToken(PftParser.ITALIC, 0); }
		public ITerminalNode LPAREN() { return GetToken(PftParser.LPAREN, 0); }
		public CompositeListContext compositeList() {
			return GetRuleContext<CompositeListContext>(0);
		}
		public ItalicFunctionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_italicFunction; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPftListener typedListener = listener as IPftListener;
			if (typedListener != null) typedListener.EnterItalicFunction(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPftListener typedListener = listener as IPftListener;
			if (typedListener != null) typedListener.ExitItalicFunction(this);
		}
	}

	[RuleVersion(0)]
	public ItalicFunctionContext italicFunction() {
		ItalicFunctionContext _localctx = new ItalicFunctionContext(_ctx, State);
		EnterRule(_localctx, 152, RULE_italicFunction);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 991; Match(ITALIC);
			State = 992; Match(LPAREN);
			State = 993; _localctx.text = compositeList();
			State = 994; Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LeftFunctionContext : ParserRuleContext {
		public SimpleFormatContext text;
		public ArithExprContext len;
		public ITerminalNode COMMA() { return GetToken(PftParser.COMMA, 0); }
		public ArithExprContext arithExpr() {
			return GetRuleContext<ArithExprContext>(0);
		}
		public ITerminalNode RPAREN() { return GetToken(PftParser.RPAREN, 0); }
		public SimpleFormatContext simpleFormat() {
			return GetRuleContext<SimpleFormatContext>(0);
		}
		public ITerminalNode LPAREN() { return GetToken(PftParser.LPAREN, 0); }
		public ITerminalNode LEFT() { return GetToken(PftParser.LEFT, 0); }
		public LeftFunctionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_leftFunction; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPftListener typedListener = listener as IPftListener;
			if (typedListener != null) typedListener.EnterLeftFunction(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPftListener typedListener = listener as IPftListener;
			if (typedListener != null) typedListener.ExitLeftFunction(this);
		}
	}

	[RuleVersion(0)]
	public LeftFunctionContext leftFunction() {
		LeftFunctionContext _localctx = new LeftFunctionContext(_ctx, State);
		EnterRule(_localctx, 154, RULE_leftFunction);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 996; Match(LEFT);
			State = 997; Match(LPAREN);
			State = 998; _localctx.text = simpleFormat();
			State = 999; Match(COMMA);
			State = 1000; _localctx.len = arithExpr(0);
			State = 1001; Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LineBreakContext : ParserRuleContext {
		public ITerminalNode LINEBREAK() { return GetToken(PftParser.LINEBREAK, 0); }
		public LineBreakContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_lineBreak; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPftListener typedListener = listener as IPftListener;
			if (typedListener != null) typedListener.EnterLineBreak(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPftListener typedListener = listener as IPftListener;
			if (typedListener != null) typedListener.ExitLineBreak(this);
		}
	}

	[RuleVersion(0)]
	public LineBreakContext lineBreak() {
		LineBreakContext _localctx = new LineBreakContext(_ctx, State);
		EnterRule(_localctx, 156, RULE_lineBreak);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1003; Match(LINEBREAK);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LocalIPFunctionContext : ParserRuleContext {
		public ITerminalNode RPAREN() { return GetToken(PftParser.RPAREN, 0); }
		public ITerminalNode LPAREN() { return GetToken(PftParser.LPAREN, 0); }
		public ITerminalNode LOCALIP() { return GetToken(PftParser.LOCALIP, 0); }
		public LocalIPFunctionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_localIPFunction; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPftListener typedListener = listener as IPftListener;
			if (typedListener != null) typedListener.EnterLocalIPFunction(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPftListener typedListener = listener as IPftListener;
			if (typedListener != null) typedListener.ExitLocalIPFunction(this);
		}
	}

	[RuleVersion(0)]
	public LocalIPFunctionContext localIPFunction() {
		LocalIPFunctionContext _localctx = new LocalIPFunctionContext(_ctx, State);
		EnterRule(_localctx, 158, RULE_localIPFunction);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1005; Match(LOCALIP);
			State = 1008;
			switch ( Interpreter.AdaptivePredict(_input,35,_ctx) ) {
			case 1:
				{
				State = 1006; Match(LPAREN);
				State = 1007; Match(RPAREN);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LongLiteralContext : ParserRuleContext {
		public ITerminalNode LONGLITERAL() { return GetToken(PftParser.LONGLITERAL, 0); }
		public LongLiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_longLiteral; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPftListener typedListener = listener as IPftListener;
			if (typedListener != null) typedListener.EnterLongLiteral(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPftListener typedListener = listener as IPftListener;
			if (typedListener != null) typedListener.ExitLongLiteral(this);
		}
	}

	[RuleVersion(0)]
	public LongLiteralContext longLiteral() {
		LongLiteralContext _localctx = new LongLiteralContext(_ctx, State);
		EnterRule(_localctx, 160, RULE_longLiteral);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1010; Match(LONGLITERAL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MachineNameFunctionContext : ParserRuleContext {
		public ITerminalNode MACHINENAME() { return GetToken(PftParser.MACHINENAME, 0); }
		public ITerminalNode RPAREN() { return GetToken(PftParser.RPAREN, 0); }
		public ITerminalNode LPAREN() { return GetToken(PftParser.LPAREN, 0); }
		public MachineNameFunctionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_machineNameFunction; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPftListener typedListener = listener as IPftListener;
			if (typedListener != null) typedListener.EnterMachineNameFunction(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPftListener typedListener = listener as IPftListener;
			if (typedListener != null) typedListener.ExitMachineNameFunction(this);
		}
	}

	[RuleVersion(0)]
	public MachineNameFunctionContext machineNameFunction() {
		MachineNameFunctionContext _localctx = new MachineNameFunctionContext(_ctx, State);
		EnterRule(_localctx, 162, RULE_machineNameFunction);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1012; Match(MACHINENAME);
			State = 1015;
			switch ( Interpreter.AdaptivePredict(_input,36,_ctx) ) {
			case 1:
				{
				State = 1013; Match(LPAREN);
				State = 1014; Match(RPAREN);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MapFunctionContext : ParserRuleContext {
		public SimpleFormatContext menu;
		public CompositeListContext key;
		public ITerminalNode COMMA() { return GetToken(PftParser.COMMA, 0); }
		public ITerminalNode RPAREN() { return GetToken(PftParser.RPAREN, 0); }
		public ITerminalNode MAP() { return GetToken(PftParser.MAP, 0); }
		public SimpleFormatContext simpleFormat() {
			return GetRuleContext<SimpleFormatContext>(0);
		}
		public ITerminalNode LPAREN() { return GetToken(PftParser.LPAREN, 0); }
		public CompositeListContext compositeList() {
			return GetRuleContext<CompositeListContext>(0);
		}
		public MapFunctionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_mapFunction; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPftListener typedListener = listener as IPftListener;
			if (typedListener != null) typedListener.EnterMapFunction(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPftListener typedListener = listener as IPftListener;
			if (typedListener != null) typedListener.ExitMapFunction(this);
		}
	}

	[RuleVersion(0)]
	public MapFunctionContext mapFunction() {
		MapFunctionContext _localctx = new MapFunctionContext(_ctx, State);
		EnterRule(_localctx, 164, RULE_mapFunction);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1017; Match(MAP);
			State = 1018; Match(LPAREN);
			State = 1019; _localctx.menu = simpleFormat();
			State = 1020; Match(COMMA);
			State = 1021; _localctx.key = compositeList();
			State = 1022; Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MessageFunctionContext : ParserRuleContext {
		public CompositeListContext text;
		public ITerminalNode RPAREN() { return GetToken(PftParser.RPAREN, 0); }
		public ITerminalNode LPAREN() { return GetToken(PftParser.LPAREN, 0); }
		public ITerminalNode MESSAGE() { return GetToken(PftParser.MESSAGE, 0); }
		public CompositeListContext compositeList() {
			return GetRuleContext<CompositeListContext>(0);
		}
		public MessageFunctionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_messageFunction; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPftListener typedListener = listener as IPftListener;
			if (typedListener != null) typedListener.EnterMessageFunction(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPftListener typedListener = listener as IPftListener;
			if (typedListener != null) typedListener.ExitMessageFunction(this);
		}
	}

	[RuleVersion(0)]
	public MessageFunctionContext messageFunction() {
		MessageFunctionContext _localctx = new MessageFunctionContext(_ctx, State);
		EnterRule(_localctx, 166, RULE_messageFunction);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1024; Match(MESSAGE);
			State = 1025; Match(LPAREN);
			State = 1026; _localctx.text = compositeList();
			State = 1027; Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MfnOperatorContext : ParserRuleContext {
		public ITerminalNode MFN() { return GetToken(PftParser.MFN, 0); }
		public ITerminalNode MFNWITHLENGTH() { return GetToken(PftParser.MFNWITHLENGTH, 0); }
		public MfnOperatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_mfnOperator; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPftListener typedListener = listener as IPftListener;
			if (typedListener != null) typedListener.EnterMfnOperator(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPftListener typedListener = listener as IPftListener;
			if (typedListener != null) typedListener.ExitMfnOperator(this);
		}
	}

	[RuleVersion(0)]
	public MfnOperatorContext mfnOperator() {
		MfnOperatorContext _localctx = new MfnOperatorContext(_ctx, State);
		EnterRule(_localctx, 168, RULE_mfnOperator);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1029;
			_la = _input.La(1);
			if ( !(_la==MFNWITHLENGTH || _la==MFN) ) {
			_errHandler.RecoverInline(this);
			}
			Consume();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MidFunctionContext : ParserRuleContext {
		public SimpleFormatContext text;
		public ArithExprContext offset;
		public ArithExprContext len;
		public ITerminalNode MID() { return GetToken(PftParser.MID, 0); }
		public ArithExprContext arithExpr(int i) {
			return GetRuleContext<ArithExprContext>(i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(PftParser.COMMA); }
		public ArithExprContext[] arithExpr() {
			return GetRuleContexts<ArithExprContext>();
		}
		public ITerminalNode RPAREN() { return GetToken(PftParser.RPAREN, 0); }
		public SimpleFormatContext simpleFormat() {
			return GetRuleContext<SimpleFormatContext>(0);
		}
		public ITerminalNode LPAREN() { return GetToken(PftParser.LPAREN, 0); }
		public ITerminalNode COMMA(int i) {
			return GetToken(PftParser.COMMA, i);
		}
		public MidFunctionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_midFunction; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPftListener typedListener = listener as IPftListener;
			if (typedListener != null) typedListener.EnterMidFunction(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPftListener typedListener = listener as IPftListener;
			if (typedListener != null) typedListener.ExitMidFunction(this);
		}
	}

	[RuleVersion(0)]
	public MidFunctionContext midFunction() {
		MidFunctionContext _localctx = new MidFunctionContext(_ctx, State);
		EnterRule(_localctx, 170, RULE_midFunction);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1031; Match(MID);
			State = 1032; Match(LPAREN);
			State = 1033; _localctx.text = simpleFormat();
			State = 1034; Match(COMMA);
			State = 1035; _localctx.offset = arithExpr(0);
			State = 1036; Match(COMMA);
			State = 1037; _localctx.len = arithExpr(0);
			State = 1038; Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ModeSwitchContext : ParserRuleContext {
		public ITerminalNode MODESWITCH() { return GetToken(PftParser.MODESWITCH, 0); }
		public ModeSwitchContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_modeSwitch; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPftListener typedListener = listener as IPftListener;
			if (typedListener != null) typedListener.EnterModeSwitch(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPftListener typedListener = listener as IPftListener;
			if (typedListener != null) typedListener.ExitModeSwitch(this);
		}
	}

	[RuleVersion(0)]
	public ModeSwitchContext modeSwitch() {
		ModeSwitchContext _localctx = new ModeSwitchContext(_ctx, State);
		EnterRule(_localctx, 172, RULE_modeSwitch);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1040; Match(MODESWITCH);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MsgFunctionContext : ParserRuleContext {
		public ArithExprContext index;
		public ArithExprContext arithExpr() {
			return GetRuleContext<ArithExprContext>(0);
		}
		public ITerminalNode RPAREN() { return GetToken(PftParser.RPAREN, 0); }
		public ITerminalNode MSG() { return GetToken(PftParser.MSG, 0); }
		public ITerminalNode LPAREN() { return GetToken(PftParser.LPAREN, 0); }
		public MsgFunctionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_msgFunction; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPftListener typedListener = listener as IPftListener;
			if (typedListener != null) typedListener.EnterMsgFunction(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPftListener typedListener = listener as IPftListener;
			if (typedListener != null) typedListener.ExitMsgFunction(this);
		}
	}

	[RuleVersion(0)]
	public MsgFunctionContext msgFunction() {
		MsgFunctionContext _localctx = new MsgFunctionContext(_ctx, State);
		EnterRule(_localctx, 174, RULE_msgFunction);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1042; Match(MSG);
			State = 1043; Match(LPAREN);
			State = 1044; _localctx.index = arithExpr(0);
			State = 1045; Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MstnameFunctionContext : ParserRuleContext {
		public ITerminalNode RPAREN() { return GetToken(PftParser.RPAREN, 0); }
		public ITerminalNode LPAREN() { return GetToken(PftParser.LPAREN, 0); }
		public ITerminalNode MSTNAME() { return GetToken(PftParser.MSTNAME, 0); }
		public MstnameFunctionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_mstnameFunction; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPftListener typedListener = listener as IPftListener;
			if (typedListener != null) typedListener.EnterMstnameFunction(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPftListener typedListener = listener as IPftListener;
			if (typedListener != null) typedListener.ExitMstnameFunction(this);
		}
	}

	[RuleVersion(0)]
	public MstnameFunctionContext mstnameFunction() {
		MstnameFunctionContext _localctx = new MstnameFunctionContext(_ctx, State);
		EnterRule(_localctx, 176, RULE_mstnameFunction);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1047; Match(MSTNAME);
			State = 1050;
			switch ( Interpreter.AdaptivePredict(_input,37,_ctx) ) {
			case 1:
				{
				State = 1048; Match(LPAREN);
				State = 1049; Match(RPAREN);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NewrecFunctionContext : ParserRuleContext {
		public ITerminalNode NEWREC() { return GetToken(PftParser.NEWREC, 0); }
		public ITerminalNode RPAREN() { return GetToken(PftParser.RPAREN, 0); }
		public ITerminalNode LPAREN() { return GetToken(PftParser.LPAREN, 0); }
		public NewrecFunctionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_newrecFunction; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPftListener typedListener = listener as IPftListener;
			if (typedListener != null) typedListener.EnterNewrecFunction(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPftListener typedListener = listener as IPftListener;
			if (typedListener != null) typedListener.ExitNewrecFunction(this);
		}
	}

	[RuleVersion(0)]
	public NewrecFunctionContext newrecFunction() {
		NewrecFunctionContext _localctx = new NewrecFunctionContext(_ctx, State);
		EnterRule(_localctx, 178, RULE_newrecFunction);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1052; Match(NEWREC);
			State = 1055;
			switch ( Interpreter.AdaptivePredict(_input,38,_ctx) ) {
			case 1:
				{
				State = 1053; Match(LPAREN);
				State = 1054; Match(RPAREN);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NlOperatorContext : ParserRuleContext {
		public ITerminalNode NL() { return GetToken(PftParser.NL, 0); }
		public NlOperatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_nlOperator; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPftListener typedListener = listener as IPftListener;
			if (typedListener != null) typedListener.EnterNlOperator(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPftListener typedListener = listener as IPftListener;
			if (typedListener != null) typedListener.ExitNlOperator(this);
		}
	}

	[RuleVersion(0)]
	public NlOperatorContext nlOperator() {
		NlOperatorContext _localctx = new NlOperatorContext(_ctx, State);
		EnterRule(_localctx, 180, RULE_nlOperator);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1057; Match(NL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NowFunctionContext : ParserRuleContext {
		public CompositeListContext format;
		public ITerminalNode NOW() { return GetToken(PftParser.NOW, 0); }
		public ITerminalNode RPAREN() { return GetToken(PftParser.RPAREN, 0); }
		public ITerminalNode LPAREN() { return GetToken(PftParser.LPAREN, 0); }
		public CompositeListContext compositeList() {
			return GetRuleContext<CompositeListContext>(0);
		}
		public NowFunctionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_nowFunction; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPftListener typedListener = listener as IPftListener;
			if (typedListener != null) typedListener.EnterNowFunction(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPftListener typedListener = listener as IPftListener;
			if (typedListener != null) typedListener.ExitNowFunction(this);
		}
	}

	[RuleVersion(0)]
	public NowFunctionContext nowFunction() {
		NowFunctionContext _localctx = new NowFunctionContext(_ctx, State);
		EnterRule(_localctx, 182, RULE_nowFunction);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1059; Match(NOW);
			State = 1064;
			switch ( Interpreter.AdaptivePredict(_input,39,_ctx) ) {
			case 1:
				{
				State = 1060; Match(LPAREN);
				State = 1061; _localctx.format = compositeList();
				State = 1062; Match(RPAREN);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OrganizationFunctionContext : ParserRuleContext {
		public ITerminalNode ORGANIZATION() { return GetToken(PftParser.ORGANIZATION, 0); }
		public ITerminalNode RPAREN() { return GetToken(PftParser.RPAREN, 0); }
		public ITerminalNode LPAREN() { return GetToken(PftParser.LPAREN, 0); }
		public OrganizationFunctionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_organizationFunction; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPftListener typedListener = listener as IPftListener;
			if (typedListener != null) typedListener.EnterOrganizationFunction(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPftListener typedListener = listener as IPftListener;
			if (typedListener != null) typedListener.ExitOrganizationFunction(this);
		}
	}

	[RuleVersion(0)]
	public OrganizationFunctionContext organizationFunction() {
		OrganizationFunctionContext _localctx = new OrganizationFunctionContext(_ctx, State);
		EnterRule(_localctx, 184, RULE_organizationFunction);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1066; Match(ORGANIZATION);
			State = 1069;
			switch ( Interpreter.AdaptivePredict(_input,40,_ctx) ) {
			case 1:
				{
				State = 1067; Match(LPAREN);
				State = 1068; Match(RPAREN);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OsFunctionContext : ParserRuleContext {
		public ITerminalNode RPAREN() { return GetToken(PftParser.RPAREN, 0); }
		public ITerminalNode OS() { return GetToken(PftParser.OS, 0); }
		public ITerminalNode LPAREN() { return GetToken(PftParser.LPAREN, 0); }
		public OsFunctionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_osFunction; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPftListener typedListener = listener as IPftListener;
			if (typedListener != null) typedListener.EnterOsFunction(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPftListener typedListener = listener as IPftListener;
			if (typedListener != null) typedListener.ExitOsFunction(this);
		}
	}

	[RuleVersion(0)]
	public OsFunctionContext osFunction() {
		OsFunctionContext _localctx = new OsFunctionContext(_ctx, State);
		EnterRule(_localctx, 186, RULE_osFunction);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1071; Match(OS);
			State = 1074;
			switch ( Interpreter.AdaptivePredict(_input,41,_ctx) ) {
			case 1:
				{
				State = 1072; Match(LPAREN);
				State = 1073; Match(RPAREN);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PadFunctionContext : ParserRuleContext {
		public CompositeElementContext text;
		public ArithExprContext len;
		public CompositeElementContext compositeElement() {
			return GetRuleContext<CompositeElementContext>(0);
		}
		public ITerminalNode COMMA() { return GetToken(PftParser.COMMA, 0); }
		public ArithExprContext arithExpr() {
			return GetRuleContext<ArithExprContext>(0);
		}
		public ITerminalNode RPAREN() { return GetToken(PftParser.RPAREN, 0); }
		public ITerminalNode PAD() { return GetToken(PftParser.PAD, 0); }
		public ITerminalNode LPAREN() { return GetToken(PftParser.LPAREN, 0); }
		public PadFunctionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_padFunction; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPftListener typedListener = listener as IPftListener;
			if (typedListener != null) typedListener.EnterPadFunction(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPftListener typedListener = listener as IPftListener;
			if (typedListener != null) typedListener.ExitPadFunction(this);
		}
	}

	[RuleVersion(0)]
	public PadFunctionContext padFunction() {
		PadFunctionContext _localctx = new PadFunctionContext(_ctx, State);
		EnterRule(_localctx, 188, RULE_padFunction);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1076; Match(PAD);
			State = 1077; Match(LPAREN);
			State = 1078; _localctx.text = compositeElement();
			State = 1079; Match(COMMA);
			State = 1080; _localctx.len = arithExpr(0);
			State = 1081; Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PadLeftFunctionContext : ParserRuleContext {
		public CompositeElementContext text;
		public ArithExprContext len;
		public CompositeElementContext compositeElement() {
			return GetRuleContext<CompositeElementContext>(0);
		}
		public ITerminalNode COMMA() { return GetToken(PftParser.COMMA, 0); }
		public ArithExprContext arithExpr() {
			return GetRuleContext<ArithExprContext>(0);
		}
		public ITerminalNode RPAREN() { return GetToken(PftParser.RPAREN, 0); }
		public ITerminalNode LPAREN() { return GetToken(PftParser.LPAREN, 0); }
		public ITerminalNode PADLEFT() { return GetToken(PftParser.PADLEFT, 0); }
		public PadLeftFunctionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_padLeftFunction; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPftListener typedListener = listener as IPftListener;
			if (typedListener != null) typedListener.EnterPadLeftFunction(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPftListener typedListener = listener as IPftListener;
			if (typedListener != null) typedListener.ExitPadLeftFunction(this);
		}
	}

	[RuleVersion(0)]
	public PadLeftFunctionContext padLeftFunction() {
		PadLeftFunctionContext _localctx = new PadLeftFunctionContext(_ctx, State);
		EnterRule(_localctx, 190, RULE_padLeftFunction);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1083; Match(PADLEFT);
			State = 1084; Match(LPAREN);
			State = 1085; _localctx.text = compositeElement();
			State = 1086; Match(COMMA);
			State = 1087; _localctx.len = arithExpr(0);
			State = 1088; Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PadRightFunctionContext : ParserRuleContext {
		public CompositeElementContext text;
		public ArithExprContext len;
		public ITerminalNode PADRIGHT() { return GetToken(PftParser.PADRIGHT, 0); }
		public CompositeElementContext compositeElement() {
			return GetRuleContext<CompositeElementContext>(0);
		}
		public ITerminalNode COMMA() { return GetToken(PftParser.COMMA, 0); }
		public ArithExprContext arithExpr() {
			return GetRuleContext<ArithExprContext>(0);
		}
		public ITerminalNode RPAREN() { return GetToken(PftParser.RPAREN, 0); }
		public ITerminalNode LPAREN() { return GetToken(PftParser.LPAREN, 0); }
		public PadRightFunctionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_padRightFunction; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPftListener typedListener = listener as IPftListener;
			if (typedListener != null) typedListener.EnterPadRightFunction(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPftListener typedListener = listener as IPftListener;
			if (typedListener != null) typedListener.ExitPadRightFunction(this);
		}
	}

	[RuleVersion(0)]
	public PadRightFunctionContext padRightFunction() {
		PadRightFunctionContext _localctx = new PadRightFunctionContext(_ctx, State);
		EnterRule(_localctx, 192, RULE_padRightFunction);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1090; Match(PADRIGHT);
			State = 1091; Match(LPAREN);
			State = 1092; _localctx.text = compositeElement();
			State = 1093; Match(COMMA);
			State = 1094; _localctx.len = arithExpr(0);
			State = 1095; Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PageBreakContext : ParserRuleContext {
		public ITerminalNode PAGEBREAK() { return GetToken(PftParser.PAGEBREAK, 0); }
		public PageBreakContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pageBreak; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPftListener typedListener = listener as IPftListener;
			if (typedListener != null) typedListener.EnterPageBreak(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPftListener typedListener = listener as IPftListener;
			if (typedListener != null) typedListener.ExitPageBreak(this);
		}
	}

	[RuleVersion(0)]
	public PageBreakContext pageBreak() {
		PageBreakContext _localctx = new PageBreakContext(_ctx, State);
		EnterRule(_localctx, 194, RULE_pageBreak);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1097; Match(PAGEBREAK);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ParaOperatorContext : ParserRuleContext {
		public ITerminalNode PARA() { return GetToken(PftParser.PARA, 0); }
		public ParaOperatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_paraOperator; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPftListener typedListener = listener as IPftListener;
			if (typedListener != null) typedListener.EnterParaOperator(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPftListener typedListener = listener as IPftListener;
			if (typedListener != null) typedListener.ExitParaOperator(this);
		}
	}

	[RuleVersion(0)]
	public ParaOperatorContext paraOperator() {
		ParaOperatorContext _localctx = new ParaOperatorContext(_ctx, State);
		EnterRule(_localctx, 196, RULE_paraOperator);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1099; Match(PARA);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PercentOperatorContext : ParserRuleContext {
		public ITerminalNode PERCENT() { return GetToken(PftParser.PERCENT, 0); }
		public PercentOperatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_percentOperator; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPftListener typedListener = listener as IPftListener;
			if (typedListener != null) typedListener.EnterPercentOperator(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPftListener typedListener = listener as IPftListener;
			if (typedListener != null) typedListener.ExitPercentOperator(this);
		}
	}

	[RuleVersion(0)]
	public PercentOperatorContext percentOperator() {
		PercentOperatorContext _localctx = new PercentOperatorContext(_ctx, State);
		EnterRule(_localctx, 198, RULE_percentOperator);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1101; Match(PERCENT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PlatformFunctionContext : ParserRuleContext {
		public ITerminalNode RPAREN() { return GetToken(PftParser.RPAREN, 0); }
		public ITerminalNode LPAREN() { return GetToken(PftParser.LPAREN, 0); }
		public ITerminalNode PLATFORM() { return GetToken(PftParser.PLATFORM, 0); }
		public PlatformFunctionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_platformFunction; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPftListener typedListener = listener as IPftListener;
			if (typedListener != null) typedListener.EnterPlatformFunction(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPftListener typedListener = listener as IPftListener;
			if (typedListener != null) typedListener.ExitPlatformFunction(this);
		}
	}

	[RuleVersion(0)]
	public PlatformFunctionContext platformFunction() {
		PlatformFunctionContext _localctx = new PlatformFunctionContext(_ctx, State);
		EnterRule(_localctx, 200, RULE_platformFunction);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1103; Match(PLATFORM);
			State = 1106;
			switch ( Interpreter.AdaptivePredict(_input,42,_ctx) ) {
			case 1:
				{
				State = 1104; Match(LPAREN);
				State = 1105; Match(RPAREN);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PopModeOperatorContext : ParserRuleContext {
		public ITerminalNode POPMODE() { return GetToken(PftParser.POPMODE, 0); }
		public PopModeOperatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_popModeOperator; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPftListener typedListener = listener as IPftListener;
			if (typedListener != null) typedListener.EnterPopModeOperator(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPftListener typedListener = listener as IPftListener;
			if (typedListener != null) typedListener.ExitPopModeOperator(this);
		}
	}

	[RuleVersion(0)]
	public PopModeOperatorContext popModeOperator() {
		PopModeOperatorContext _localctx = new PopModeOperatorContext(_ctx, State);
		EnterRule(_localctx, 202, RULE_popModeOperator);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1108; Match(POPMODE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PortFunctionContext : ParserRuleContext {
		public ITerminalNode PORT() { return GetToken(PftParser.PORT, 0); }
		public ITerminalNode RPAREN() { return GetToken(PftParser.RPAREN, 0); }
		public ITerminalNode LPAREN() { return GetToken(PftParser.LPAREN, 0); }
		public PortFunctionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_portFunction; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPftListener typedListener = listener as IPftListener;
			if (typedListener != null) typedListener.EnterPortFunction(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPftListener typedListener = listener as IPftListener;
			if (typedListener != null) typedListener.ExitPortFunction(this);
		}
	}

	[RuleVersion(0)]
	public PortFunctionContext portFunction() {
		PortFunctionContext _localctx = new PortFunctionContext(_ctx, State);
		EnterRule(_localctx, 204, RULE_portFunction);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1110; Match(PORT);
			State = 1113;
			switch ( Interpreter.AdaptivePredict(_input,43,_ctx) ) {
			case 1:
				{
				State = 1111; Match(LPAREN);
				State = 1112; Match(RPAREN);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ProcFunctionContext : ParserRuleContext {
		public CompositeListContext text;
		public ITerminalNode RPAREN() { return GetToken(PftParser.RPAREN, 0); }
		public ITerminalNode PROC() { return GetToken(PftParser.PROC, 0); }
		public ITerminalNode LPAREN() { return GetToken(PftParser.LPAREN, 0); }
		public CompositeListContext compositeList() {
			return GetRuleContext<CompositeListContext>(0);
		}
		public ProcFunctionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_procFunction; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPftListener typedListener = listener as IPftListener;
			if (typedListener != null) typedListener.EnterProcFunction(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPftListener typedListener = listener as IPftListener;
			if (typedListener != null) typedListener.ExitProcFunction(this);
		}
	}

	[RuleVersion(0)]
	public ProcFunctionContext procFunction() {
		ProcFunctionContext _localctx = new ProcFunctionContext(_ctx, State);
		EnterRule(_localctx, 206, RULE_procFunction);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1115; Match(PROC);
			State = 1116; Match(LPAREN);
			State = 1117; _localctx.text = compositeList();
			State = 1118; Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PushModeOperatorContext : ParserRuleContext {
		public ITerminalNode PUSHMODE() { return GetToken(PftParser.PUSHMODE, 0); }
		public PushModeOperatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pushModeOperator; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPftListener typedListener = listener as IPftListener;
			if (typedListener != null) typedListener.EnterPushModeOperator(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPftListener typedListener = listener as IPftListener;
			if (typedListener != null) typedListener.ExitPushModeOperator(this);
		}
	}

	[RuleVersion(0)]
	public PushModeOperatorContext pushModeOperator() {
		PushModeOperatorContext _localctx = new PushModeOperatorContext(_ctx, State);
		EnterRule(_localctx, 208, RULE_pushModeOperator);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1120; Match(PUSHMODE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PutenvFunctionContext : ParserRuleContext {
		public SimpleFormatContext name;
		public CompositeListContext value;
		public ITerminalNode PUTENV() { return GetToken(PftParser.PUTENV, 0); }
		public ITerminalNode COMMA() { return GetToken(PftParser.COMMA, 0); }
		public ITerminalNode RPAREN() { return GetToken(PftParser.RPAREN, 0); }
		public SimpleFormatContext simpleFormat() {
			return GetRuleContext<SimpleFormatContext>(0);
		}
		public ITerminalNode LPAREN() { return GetToken(PftParser.LPAREN, 0); }
		public CompositeListContext compositeList() {
			return GetRuleContext<CompositeListContext>(0);
		}
		public PutenvFunctionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_putenvFunction; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPftListener typedListener = listener as IPftListener;
			if (typedListener != null) typedListener.EnterPutenvFunction(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPftListener typedListener = listener as IPftListener;
			if (typedListener != null) typedListener.ExitPutenvFunction(this);
		}
	}

	[RuleVersion(0)]
	public PutenvFunctionContext putenvFunction() {
		PutenvFunctionContext _localctx = new PutenvFunctionContext(_ctx, State);
		EnterRule(_localctx, 210, RULE_putenvFunction);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1122; Match(PUTENV);
			State = 1123; Match(LPAREN);
			State = 1124; _localctx.name = simpleFormat();
			State = 1125; Match(COMMA);
			State = 1126; _localctx.value = compositeList();
			State = 1127; Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ReadFileFunctionContext : ParserRuleContext {
		public CompositeListContext name;
		public ITerminalNode READFILE() { return GetToken(PftParser.READFILE, 0); }
		public ITerminalNode RPAREN() { return GetToken(PftParser.RPAREN, 0); }
		public ITerminalNode LPAREN() { return GetToken(PftParser.LPAREN, 0); }
		public CompositeListContext compositeList() {
			return GetRuleContext<CompositeListContext>(0);
		}
		public ReadFileFunctionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_readFileFunction; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPftListener typedListener = listener as IPftListener;
			if (typedListener != null) typedListener.EnterReadFileFunction(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPftListener typedListener = listener as IPftListener;
			if (typedListener != null) typedListener.ExitReadFileFunction(this);
		}
	}

	[RuleVersion(0)]
	public ReadFileFunctionContext readFileFunction() {
		ReadFileFunctionContext _localctx = new ReadFileFunctionContext(_ctx, State);
		EnterRule(_localctx, 212, RULE_readFileFunction);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1129; Match(READFILE);
			State = 1130; Match(LPAREN);
			State = 1131; _localctx.name = compositeList();
			State = 1132; Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ReadLineFunctionContext : ParserRuleContext {
		public CompositeListContext prompt;
		public ITerminalNode READLINE() { return GetToken(PftParser.READLINE, 0); }
		public ITerminalNode RPAREN() { return GetToken(PftParser.RPAREN, 0); }
		public ITerminalNode LPAREN() { return GetToken(PftParser.LPAREN, 0); }
		public CompositeListContext compositeList() {
			return GetRuleContext<CompositeListContext>(0);
		}
		public ReadLineFunctionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_readLineFunction; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPftListener typedListener = listener as IPftListener;
			if (typedListener != null) typedListener.EnterReadLineFunction(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPftListener typedListener = listener as IPftListener;
			if (typedListener != null) typedListener.ExitReadLineFunction(this);
		}
	}

	[RuleVersion(0)]
	public ReadLineFunctionContext readLineFunction() {
		ReadLineFunctionContext _localctx = new ReadLineFunctionContext(_ctx, State);
		EnterRule(_localctx, 214, RULE_readLineFunction);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1134; Match(READLINE);
			{
			State = 1135; Match(LPAREN);
			State = 1136; _localctx.prompt = compositeList();
			State = 1137; Match(RPAREN);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RefFunctionContext : ParserRuleContext {
		public ArithExprContext arg1;
		public CompositeListContext arg2;
		public ITerminalNode REF() { return GetToken(PftParser.REF, 0); }
		public ITerminalNode COMMA() { return GetToken(PftParser.COMMA, 0); }
		public ArithExprContext arithExpr() {
			return GetRuleContext<ArithExprContext>(0);
		}
		public ITerminalNode RPAREN() { return GetToken(PftParser.RPAREN, 0); }
		public ITerminalNode LPAREN() { return GetToken(PftParser.LPAREN, 0); }
		public CompositeListContext compositeList() {
			return GetRuleContext<CompositeListContext>(0);
		}
		public RefFunctionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_refFunction; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPftListener typedListener = listener as IPftListener;
			if (typedListener != null) typedListener.EnterRefFunction(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPftListener typedListener = listener as IPftListener;
			if (typedListener != null) typedListener.ExitRefFunction(this);
		}
	}

	[RuleVersion(0)]
	public RefFunctionContext refFunction() {
		RefFunctionContext _localctx = new RefFunctionContext(_ctx, State);
		EnterRule(_localctx, 216, RULE_refFunction);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1139; Match(REF);
			State = 1140; Match(LPAREN);
			State = 1141; _localctx.arg1 = arithExpr(0);
			State = 1142; Match(COMMA);
			State = 1143; _localctx.arg2 = compositeList();
			State = 1144; Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ReplaceFunctionContext : ParserRuleContext {
		public SimpleFormatContext arg1;
		public SimpleFormatContext arg2;
		public SimpleFormatContext arg3;
		public ITerminalNode[] COMMA() { return GetTokens(PftParser.COMMA); }
		public ITerminalNode RPAREN() { return GetToken(PftParser.RPAREN, 0); }
		public ITerminalNode REPLACE() { return GetToken(PftParser.REPLACE, 0); }
		public SimpleFormatContext simpleFormat(int i) {
			return GetRuleContext<SimpleFormatContext>(i);
		}
		public SimpleFormatContext[] simpleFormat() {
			return GetRuleContexts<SimpleFormatContext>();
		}
		public ITerminalNode LPAREN() { return GetToken(PftParser.LPAREN, 0); }
		public ITerminalNode COMMA(int i) {
			return GetToken(PftParser.COMMA, i);
		}
		public ReplaceFunctionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_replaceFunction; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPftListener typedListener = listener as IPftListener;
			if (typedListener != null) typedListener.EnterReplaceFunction(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPftListener typedListener = listener as IPftListener;
			if (typedListener != null) typedListener.ExitReplaceFunction(this);
		}
	}

	[RuleVersion(0)]
	public ReplaceFunctionContext replaceFunction() {
		ReplaceFunctionContext _localctx = new ReplaceFunctionContext(_ctx, State);
		EnterRule(_localctx, 218, RULE_replaceFunction);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1146; Match(REPLACE);
			State = 1147; Match(LPAREN);
			State = 1148; _localctx.arg1 = simpleFormat();
			State = 1149; Match(COMMA);
			State = 1150; _localctx.arg2 = simpleFormat();
			State = 1151; Match(COMMA);
			State = 1152; _localctx.arg3 = simpleFormat();
			State = 1153; Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RequireClientFunctionContext : ParserRuleContext {
		public CompositeListContext text;
		public ITerminalNode RPAREN() { return GetToken(PftParser.RPAREN, 0); }
		public ITerminalNode LPAREN() { return GetToken(PftParser.LPAREN, 0); }
		public ITerminalNode REQUIRECLIENT() { return GetToken(PftParser.REQUIRECLIENT, 0); }
		public CompositeListContext compositeList() {
			return GetRuleContext<CompositeListContext>(0);
		}
		public RequireClientFunctionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_requireClientFunction; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPftListener typedListener = listener as IPftListener;
			if (typedListener != null) typedListener.EnterRequireClientFunction(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPftListener typedListener = listener as IPftListener;
			if (typedListener != null) typedListener.ExitRequireClientFunction(this);
		}
	}

	[RuleVersion(0)]
	public RequireClientFunctionContext requireClientFunction() {
		RequireClientFunctionContext _localctx = new RequireClientFunctionContext(_ctx, State);
		EnterRule(_localctx, 220, RULE_requireClientFunction);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1155; Match(REQUIRECLIENT);
			State = 1156; Match(LPAREN);
			State = 1157; _localctx.text = compositeList();
			State = 1158; Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RequireServerFunctionContext : ParserRuleContext {
		public CompositeListContext text;
		public ITerminalNode RPAREN() { return GetToken(PftParser.RPAREN, 0); }
		public ITerminalNode LPAREN() { return GetToken(PftParser.LPAREN, 0); }
		public ITerminalNode REQUIRESERVER() { return GetToken(PftParser.REQUIRESERVER, 0); }
		public CompositeListContext compositeList() {
			return GetRuleContext<CompositeListContext>(0);
		}
		public RequireServerFunctionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_requireServerFunction; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPftListener typedListener = listener as IPftListener;
			if (typedListener != null) typedListener.EnterRequireServerFunction(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPftListener typedListener = listener as IPftListener;
			if (typedListener != null) typedListener.ExitRequireServerFunction(this);
		}
	}

	[RuleVersion(0)]
	public RequireServerFunctionContext requireServerFunction() {
		RequireServerFunctionContext _localctx = new RequireServerFunctionContext(_ctx, State);
		EnterRule(_localctx, 222, RULE_requireServerFunction);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1160; Match(REQUIRESERVER);
			State = 1161; Match(LPAREN);
			State = 1162; _localctx.text = compositeList();
			State = 1163; Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RevertFunctionContext : ParserRuleContext {
		public ArithExprContext version;
		public ITerminalNode REVERT() { return GetToken(PftParser.REVERT, 0); }
		public ArithExprContext arithExpr() {
			return GetRuleContext<ArithExprContext>(0);
		}
		public ITerminalNode RPAREN() { return GetToken(PftParser.RPAREN, 0); }
		public ITerminalNode LPAREN() { return GetToken(PftParser.LPAREN, 0); }
		public RevertFunctionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_revertFunction; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPftListener typedListener = listener as IPftListener;
			if (typedListener != null) typedListener.EnterRevertFunction(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPftListener typedListener = listener as IPftListener;
			if (typedListener != null) typedListener.ExitRevertFunction(this);
		}
	}

	[RuleVersion(0)]
	public RevertFunctionContext revertFunction() {
		RevertFunctionContext _localctx = new RevertFunctionContext(_ctx, State);
		EnterRule(_localctx, 224, RULE_revertFunction);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1165; Match(REVERT);
			State = 1170;
			switch ( Interpreter.AdaptivePredict(_input,44,_ctx) ) {
			case 1:
				{
				State = 1166; Match(LPAREN);
				State = 1167; _localctx.version = arithExpr(0);
				State = 1168; Match(RPAREN);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RightFunctionContext : ParserRuleContext {
		public CompositeElementContext text;
		public ArithExprContext len;
		public CompositeElementContext compositeElement() {
			return GetRuleContext<CompositeElementContext>(0);
		}
		public ITerminalNode COMMA() { return GetToken(PftParser.COMMA, 0); }
		public ArithExprContext arithExpr() {
			return GetRuleContext<ArithExprContext>(0);
		}
		public ITerminalNode RPAREN() { return GetToken(PftParser.RPAREN, 0); }
		public ITerminalNode LPAREN() { return GetToken(PftParser.LPAREN, 0); }
		public ITerminalNode RIGHT() { return GetToken(PftParser.RIGHT, 0); }
		public RightFunctionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_rightFunction; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPftListener typedListener = listener as IPftListener;
			if (typedListener != null) typedListener.EnterRightFunction(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPftListener typedListener = listener as IPftListener;
			if (typedListener != null) typedListener.ExitRightFunction(this);
		}
	}

	[RuleVersion(0)]
	public RightFunctionContext rightFunction() {
		RightFunctionContext _localctx = new RightFunctionContext(_ctx, State);
		EnterRule(_localctx, 226, RULE_rightFunction);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1172; Match(RIGHT);
			State = 1173; Match(LPAREN);
			State = 1174; _localctx.text = compositeElement();
			State = 1175; Match(COMMA);
			State = 1176; _localctx.len = arithExpr(0);
			State = 1177; Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RuntimeFunctionContext : ParserRuleContext {
		public ITerminalNode RUNTIME() { return GetToken(PftParser.RUNTIME, 0); }
		public ITerminalNode RPAREN() { return GetToken(PftParser.RPAREN, 0); }
		public ITerminalNode LPAREN() { return GetToken(PftParser.LPAREN, 0); }
		public RuntimeFunctionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_runtimeFunction; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPftListener typedListener = listener as IPftListener;
			if (typedListener != null) typedListener.EnterRuntimeFunction(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPftListener typedListener = listener as IPftListener;
			if (typedListener != null) typedListener.ExitRuntimeFunction(this);
		}
	}

	[RuleVersion(0)]
	public RuntimeFunctionContext runtimeFunction() {
		RuntimeFunctionContext _localctx = new RuntimeFunctionContext(_ctx, State);
		EnterRule(_localctx, 228, RULE_runtimeFunction);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1179; Match(RUNTIME);
			State = 1182;
			switch ( Interpreter.AdaptivePredict(_input,45,_ctx) ) {
			case 1:
				{
				State = 1180; Match(LPAREN);
				State = 1181; Match(RPAREN);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ServerVersionFunctionContext : ParserRuleContext {
		public ITerminalNode RPAREN() { return GetToken(PftParser.RPAREN, 0); }
		public ITerminalNode LPAREN() { return GetToken(PftParser.LPAREN, 0); }
		public ITerminalNode SERVERVERSION() { return GetToken(PftParser.SERVERVERSION, 0); }
		public ServerVersionFunctionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_serverVersionFunction; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPftListener typedListener = listener as IPftListener;
			if (typedListener != null) typedListener.EnterServerVersionFunction(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPftListener typedListener = listener as IPftListener;
			if (typedListener != null) typedListener.ExitServerVersionFunction(this);
		}
	}

	[RuleVersion(0)]
	public ServerVersionFunctionContext serverVersionFunction() {
		ServerVersionFunctionContext _localctx = new ServerVersionFunctionContext(_ctx, State);
		EnterRule(_localctx, 230, RULE_serverVersionFunction);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1184; Match(SERVERVERSION);
			State = 1187;
			switch ( Interpreter.AdaptivePredict(_input,46,_ctx) ) {
			case 1:
				{
				State = 1185; Match(LPAREN);
				State = 1186; Match(RPAREN);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SFunctionContext : ParserRuleContext {
		public CompositeListContext text;
		public ITerminalNode S() { return GetToken(PftParser.S, 0); }
		public ITerminalNode RPAREN() { return GetToken(PftParser.RPAREN, 0); }
		public ITerminalNode LPAREN() { return GetToken(PftParser.LPAREN, 0); }
		public CompositeListContext compositeList() {
			return GetRuleContext<CompositeListContext>(0);
		}
		public SFunctionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_sFunction; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPftListener typedListener = listener as IPftListener;
			if (typedListener != null) typedListener.EnterSFunction(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPftListener typedListener = listener as IPftListener;
			if (typedListener != null) typedListener.ExitSFunction(this);
		}
	}

	[RuleVersion(0)]
	public SFunctionContext sFunction() {
		SFunctionContext _localctx = new SFunctionContext(_ctx, State);
		EnterRule(_localctx, 232, RULE_sFunction);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1189; Match(S);
			State = 1190; Match(LPAREN);
			State = 1191; _localctx.text = compositeList();
			State = 1192; Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SlashOperatorContext : ParserRuleContext {
		public ITerminalNode SLASH() { return GetToken(PftParser.SLASH, 0); }
		public SlashOperatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_slashOperator; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPftListener typedListener = listener as IPftListener;
			if (typedListener != null) typedListener.EnterSlashOperator(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPftListener typedListener = listener as IPftListener;
			if (typedListener != null) typedListener.ExitSlashOperator(this);
		}
	}

	[RuleVersion(0)]
	public SlashOperatorContext slashOperator() {
		SlashOperatorContext _localctx = new SlashOperatorContext(_ctx, State);
		EnterRule(_localctx, 234, RULE_slashOperator);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1194; Match(SLASH);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SysdirFunctionContext : ParserRuleContext {
		public ITerminalNode SYSDIR() { return GetToken(PftParser.SYSDIR, 0); }
		public ITerminalNode RPAREN() { return GetToken(PftParser.RPAREN, 0); }
		public ITerminalNode LPAREN() { return GetToken(PftParser.LPAREN, 0); }
		public SysdirFunctionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_sysdirFunction; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPftListener typedListener = listener as IPftListener;
			if (typedListener != null) typedListener.EnterSysdirFunction(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPftListener typedListener = listener as IPftListener;
			if (typedListener != null) typedListener.ExitSysdirFunction(this);
		}
	}

	[RuleVersion(0)]
	public SysdirFunctionContext sysdirFunction() {
		SysdirFunctionContext _localctx = new SysdirFunctionContext(_ctx, State);
		EnterRule(_localctx, 236, RULE_sysdirFunction);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1196; Match(SYSDIR);
			State = 1199;
			switch ( Interpreter.AdaptivePredict(_input,47,_ctx) ) {
			case 1:
				{
				State = 1197; Match(LPAREN);
				State = 1198; Match(RPAREN);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SystemFunctionContext : ParserRuleContext {
		public CompositeListContext text;
		public ITerminalNode SYSTEM() { return GetToken(PftParser.SYSTEM, 0); }
		public ITerminalNode RPAREN() { return GetToken(PftParser.RPAREN, 0); }
		public ITerminalNode LPAREN() { return GetToken(PftParser.LPAREN, 0); }
		public CompositeListContext compositeList() {
			return GetRuleContext<CompositeListContext>(0);
		}
		public SystemFunctionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_systemFunction; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPftListener typedListener = listener as IPftListener;
			if (typedListener != null) typedListener.EnterSystemFunction(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPftListener typedListener = listener as IPftListener;
			if (typedListener != null) typedListener.ExitSystemFunction(this);
		}
	}

	[RuleVersion(0)]
	public SystemFunctionContext systemFunction() {
		SystemFunctionContext _localctx = new SystemFunctionContext(_ctx, State);
		EnterRule(_localctx, 238, RULE_systemFunction);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1201; Match(SYSTEM);
			State = 1202; Match(LPAREN);
			State = 1203; _localctx.text = compositeList();
			State = 1204; Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TempdirFunctionContext : ParserRuleContext {
		public ITerminalNode RPAREN() { return GetToken(PftParser.RPAREN, 0); }
		public ITerminalNode TEMPDIR() { return GetToken(PftParser.TEMPDIR, 0); }
		public ITerminalNode LPAREN() { return GetToken(PftParser.LPAREN, 0); }
		public TempdirFunctionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tempdirFunction; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPftListener typedListener = listener as IPftListener;
			if (typedListener != null) typedListener.EnterTempdirFunction(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPftListener typedListener = listener as IPftListener;
			if (typedListener != null) typedListener.ExitTempdirFunction(this);
		}
	}

	[RuleVersion(0)]
	public TempdirFunctionContext tempdirFunction() {
		TempdirFunctionContext _localctx = new TempdirFunctionContext(_ctx, State);
		EnterRule(_localctx, 240, RULE_tempdirFunction);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1206; Match(TEMPDIR);
			State = 1209;
			switch ( Interpreter.AdaptivePredict(_input,48,_ctx) ) {
			case 1:
				{
				State = 1207; Match(LPAREN);
				State = 1208; Match(RPAREN);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TimeFunctionContext : ParserRuleContext {
		public CompositeListContext format;
		public ITerminalNode TIME() { return GetToken(PftParser.TIME, 0); }
		public ITerminalNode RPAREN() { return GetToken(PftParser.RPAREN, 0); }
		public ITerminalNode LPAREN() { return GetToken(PftParser.LPAREN, 0); }
		public CompositeListContext compositeList() {
			return GetRuleContext<CompositeListContext>(0);
		}
		public TimeFunctionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_timeFunction; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPftListener typedListener = listener as IPftListener;
			if (typedListener != null) typedListener.EnterTimeFunction(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPftListener typedListener = listener as IPftListener;
			if (typedListener != null) typedListener.ExitTimeFunction(this);
		}
	}

	[RuleVersion(0)]
	public TimeFunctionContext timeFunction() {
		TimeFunctionContext _localctx = new TimeFunctionContext(_ctx, State);
		EnterRule(_localctx, 242, RULE_timeFunction);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1211; Match(TIME);
			State = 1216;
			switch ( Interpreter.AdaptivePredict(_input,49,_ctx) ) {
			case 1:
				{
				State = 1212; Match(LPAREN);
				State = 1213; _localctx.format = compositeList();
				State = 1214; Match(RPAREN);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TolowerFunctionContext : ParserRuleContext {
		public CompositeListContext text;
		public ITerminalNode RPAREN() { return GetToken(PftParser.RPAREN, 0); }
		public ITerminalNode LPAREN() { return GetToken(PftParser.LPAREN, 0); }
		public ITerminalNode TOLOWER() { return GetToken(PftParser.TOLOWER, 0); }
		public CompositeListContext compositeList() {
			return GetRuleContext<CompositeListContext>(0);
		}
		public TolowerFunctionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tolowerFunction; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPftListener typedListener = listener as IPftListener;
			if (typedListener != null) typedListener.EnterTolowerFunction(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPftListener typedListener = listener as IPftListener;
			if (typedListener != null) typedListener.ExitTolowerFunction(this);
		}
	}

	[RuleVersion(0)]
	public TolowerFunctionContext tolowerFunction() {
		TolowerFunctionContext _localctx = new TolowerFunctionContext(_ctx, State);
		EnterRule(_localctx, 244, RULE_tolowerFunction);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1218; Match(TOLOWER);
			State = 1219; Match(LPAREN);
			State = 1220; _localctx.text = compositeList();
			State = 1221; Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TouchFileFunctionContext : ParserRuleContext {
		public CompositeListContext name;
		public ITerminalNode RPAREN() { return GetToken(PftParser.RPAREN, 0); }
		public ITerminalNode LPAREN() { return GetToken(PftParser.LPAREN, 0); }
		public ITerminalNode TOUCHFILE() { return GetToken(PftParser.TOUCHFILE, 0); }
		public CompositeListContext compositeList() {
			return GetRuleContext<CompositeListContext>(0);
		}
		public TouchFileFunctionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_touchFileFunction; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPftListener typedListener = listener as IPftListener;
			if (typedListener != null) typedListener.EnterTouchFileFunction(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPftListener typedListener = listener as IPftListener;
			if (typedListener != null) typedListener.ExitTouchFileFunction(this);
		}
	}

	[RuleVersion(0)]
	public TouchFileFunctionContext touchFileFunction() {
		TouchFileFunctionContext _localctx = new TouchFileFunctionContext(_ctx, State);
		EnterRule(_localctx, 246, RULE_touchFileFunction);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1223; Match(TOUCHFILE);
			State = 1224; Match(LPAREN);
			State = 1225; _localctx.name = compositeList();
			State = 1226; Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ToupperFunctionContext : ParserRuleContext {
		public CompositeListContext text;
		public ITerminalNode TOUPPER() { return GetToken(PftParser.TOUPPER, 0); }
		public ITerminalNode RPAREN() { return GetToken(PftParser.RPAREN, 0); }
		public ITerminalNode LPAREN() { return GetToken(PftParser.LPAREN, 0); }
		public CompositeListContext compositeList() {
			return GetRuleContext<CompositeListContext>(0);
		}
		public ToupperFunctionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_toupperFunction; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPftListener typedListener = listener as IPftListener;
			if (typedListener != null) typedListener.EnterToupperFunction(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPftListener typedListener = listener as IPftListener;
			if (typedListener != null) typedListener.ExitToupperFunction(this);
		}
	}

	[RuleVersion(0)]
	public ToupperFunctionContext toupperFunction() {
		ToupperFunctionContext _localctx = new ToupperFunctionContext(_ctx, State);
		EnterRule(_localctx, 248, RULE_toupperFunction);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1228; Match(TOUPPER);
			State = 1229; Match(LPAREN);
			State = 1230; _localctx.text = compositeList();
			State = 1231; Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TraceStatementContext : ParserRuleContext {
		public CompositeListContext text;
		public ITerminalNode TRACE() { return GetToken(PftParser.TRACE, 0); }
		public ITerminalNode RPAREN() { return GetToken(PftParser.RPAREN, 0); }
		public ITerminalNode LPAREN() { return GetToken(PftParser.LPAREN, 0); }
		public CompositeListContext compositeList() {
			return GetRuleContext<CompositeListContext>(0);
		}
		public TraceStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_traceStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPftListener typedListener = listener as IPftListener;
			if (typedListener != null) typedListener.EnterTraceStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPftListener typedListener = listener as IPftListener;
			if (typedListener != null) typedListener.ExitTraceStatement(this);
		}
	}

	[RuleVersion(0)]
	public TraceStatementContext traceStatement() {
		TraceStatementContext _localctx = new TraceStatementContext(_ctx, State);
		EnterRule(_localctx, 250, RULE_traceStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1233; Match(TRACE);
			State = 1234; Match(LPAREN);
			State = 1235; _localctx.text = compositeList();
			State = 1236; Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TrimFunctionContext : ParserRuleContext {
		public CompositeListContext text;
		public ITerminalNode RPAREN() { return GetToken(PftParser.RPAREN, 0); }
		public ITerminalNode TRIM() { return GetToken(PftParser.TRIM, 0); }
		public ITerminalNode LPAREN() { return GetToken(PftParser.LPAREN, 0); }
		public CompositeListContext compositeList() {
			return GetRuleContext<CompositeListContext>(0);
		}
		public TrimFunctionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_trimFunction; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPftListener typedListener = listener as IPftListener;
			if (typedListener != null) typedListener.EnterTrimFunction(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPftListener typedListener = listener as IPftListener;
			if (typedListener != null) typedListener.ExitTrimFunction(this);
		}
	}

	[RuleVersion(0)]
	public TrimFunctionContext trimFunction() {
		TrimFunctionContext _localctx = new TrimFunctionContext(_ctx, State);
		EnterRule(_localctx, 252, RULE_trimFunction);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1238; Match(TRIM);
			State = 1239; Match(LPAREN);
			State = 1240; _localctx.text = compositeList();
			State = 1241; Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TrimLeftFunctionContext : ParserRuleContext {
		public CompositeListContext text;
		public ITerminalNode RPAREN() { return GetToken(PftParser.RPAREN, 0); }
		public ITerminalNode TRIMLEFT() { return GetToken(PftParser.TRIMLEFT, 0); }
		public ITerminalNode LPAREN() { return GetToken(PftParser.LPAREN, 0); }
		public CompositeListContext compositeList() {
			return GetRuleContext<CompositeListContext>(0);
		}
		public TrimLeftFunctionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_trimLeftFunction; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPftListener typedListener = listener as IPftListener;
			if (typedListener != null) typedListener.EnterTrimLeftFunction(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPftListener typedListener = listener as IPftListener;
			if (typedListener != null) typedListener.ExitTrimLeftFunction(this);
		}
	}

	[RuleVersion(0)]
	public TrimLeftFunctionContext trimLeftFunction() {
		TrimLeftFunctionContext _localctx = new TrimLeftFunctionContext(_ctx, State);
		EnterRule(_localctx, 254, RULE_trimLeftFunction);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1243; Match(TRIMLEFT);
			State = 1244; Match(LPAREN);
			State = 1245; _localctx.text = compositeList();
			State = 1246; Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TrimRightFunctionContext : ParserRuleContext {
		public CompositeListContext text;
		public ITerminalNode RPAREN() { return GetToken(PftParser.RPAREN, 0); }
		public ITerminalNode LPAREN() { return GetToken(PftParser.LPAREN, 0); }
		public ITerminalNode TRIMRIGHT() { return GetToken(PftParser.TRIMRIGHT, 0); }
		public CompositeListContext compositeList() {
			return GetRuleContext<CompositeListContext>(0);
		}
		public TrimRightFunctionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_trimRightFunction; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPftListener typedListener = listener as IPftListener;
			if (typedListener != null) typedListener.EnterTrimRightFunction(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPftListener typedListener = listener as IPftListener;
			if (typedListener != null) typedListener.ExitTrimRightFunction(this);
		}
	}

	[RuleVersion(0)]
	public TrimRightFunctionContext trimRightFunction() {
		TrimRightFunctionContext _localctx = new TrimRightFunctionContext(_ctx, State);
		EnterRule(_localctx, 256, RULE_trimRightFunction);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1248; Match(TRIMRIGHT);
			State = 1249; Match(LPAREN);
			State = 1250; _localctx.text = compositeList();
			State = 1251; Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TruncateFileFunctionContext : ParserRuleContext {
		public CompositeListContext name;
		public ITerminalNode RPAREN() { return GetToken(PftParser.RPAREN, 0); }
		public ITerminalNode LPAREN() { return GetToken(PftParser.LPAREN, 0); }
		public ITerminalNode TRUNCATEFILE() { return GetToken(PftParser.TRUNCATEFILE, 0); }
		public CompositeListContext compositeList() {
			return GetRuleContext<CompositeListContext>(0);
		}
		public TruncateFileFunctionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_truncateFileFunction; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPftListener typedListener = listener as IPftListener;
			if (typedListener != null) typedListener.EnterTruncateFileFunction(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPftListener typedListener = listener as IPftListener;
			if (typedListener != null) typedListener.ExitTruncateFileFunction(this);
		}
	}

	[RuleVersion(0)]
	public TruncateFileFunctionContext truncateFileFunction() {
		TruncateFileFunctionContext _localctx = new TruncateFileFunctionContext(_ctx, State);
		EnterRule(_localctx, 258, RULE_truncateFileFunction);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1253; Match(TRUNCATEFILE);
			State = 1254; Match(LPAREN);
			State = 1255; _localctx.name = compositeList();
			State = 1256; Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeFunctionContext : ParserRuleContext {
		public CompositeListContext text;
		public ITerminalNode RPAREN() { return GetToken(PftParser.RPAREN, 0); }
		public ITerminalNode LPAREN() { return GetToken(PftParser.LPAREN, 0); }
		public ITerminalNode TYPE() { return GetToken(PftParser.TYPE, 0); }
		public CompositeListContext compositeList() {
			return GetRuleContext<CompositeListContext>(0);
		}
		public TypeFunctionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeFunction; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPftListener typedListener = listener as IPftListener;
			if (typedListener != null) typedListener.EnterTypeFunction(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPftListener typedListener = listener as IPftListener;
			if (typedListener != null) typedListener.ExitTypeFunction(this);
		}
	}

	[RuleVersion(0)]
	public TypeFunctionContext typeFunction() {
		TypeFunctionContext _localctx = new TypeFunctionContext(_ctx, State);
		EnterRule(_localctx, 260, RULE_typeFunction);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1258; Match(TYPE);
			State = 1259; Match(LPAREN);
			State = 1260; _localctx.text = compositeList();
			State = 1261; Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UnconditionalLiteralContext : ParserRuleContext {
		public ITerminalNode UNCONDITIONAL() { return GetToken(PftParser.UNCONDITIONAL, 0); }
		public UnconditionalLiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_unconditionalLiteral; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPftListener typedListener = listener as IPftListener;
			if (typedListener != null) typedListener.EnterUnconditionalLiteral(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPftListener typedListener = listener as IPftListener;
			if (typedListener != null) typedListener.ExitUnconditionalLiteral(this);
		}
	}

	[RuleVersion(0)]
	public UnconditionalLiteralContext unconditionalLiteral() {
		UnconditionalLiteralContext _localctx = new UnconditionalLiteralContext(_ctx, State);
		EnterRule(_localctx, 262, RULE_unconditionalLiteral);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1263; Match(UNCONDITIONAL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UndelRecFunctionContext : ParserRuleContext {
		public ITerminalNode UNDELREC() { return GetToken(PftParser.UNDELREC, 0); }
		public ITerminalNode RPAREN() { return GetToken(PftParser.RPAREN, 0); }
		public ITerminalNode LPAREN() { return GetToken(PftParser.LPAREN, 0); }
		public UndelRecFunctionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_undelRecFunction; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPftListener typedListener = listener as IPftListener;
			if (typedListener != null) typedListener.EnterUndelRecFunction(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPftListener typedListener = listener as IPftListener;
			if (typedListener != null) typedListener.ExitUndelRecFunction(this);
		}
	}

	[RuleVersion(0)]
	public UndelRecFunctionContext undelRecFunction() {
		UndelRecFunctionContext _localctx = new UndelRecFunctionContext(_ctx, State);
		EnterRule(_localctx, 264, RULE_undelRecFunction);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1265; Match(UNDELREC);
			State = 1268;
			switch ( Interpreter.AdaptivePredict(_input,50,_ctx) ) {
			case 1:
				{
				State = 1266; Match(LPAREN);
				State = 1267; Match(RPAREN);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UnderlineFunctionContext : ParserRuleContext {
		public CompositeListContext text;
		public ITerminalNode RPAREN() { return GetToken(PftParser.RPAREN, 0); }
		public ITerminalNode UNDERLINE() { return GetToken(PftParser.UNDERLINE, 0); }
		public ITerminalNode LPAREN() { return GetToken(PftParser.LPAREN, 0); }
		public CompositeListContext compositeList() {
			return GetRuleContext<CompositeListContext>(0);
		}
		public UnderlineFunctionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_underlineFunction; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPftListener typedListener = listener as IPftListener;
			if (typedListener != null) typedListener.EnterUnderlineFunction(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPftListener typedListener = listener as IPftListener;
			if (typedListener != null) typedListener.ExitUnderlineFunction(this);
		}
	}

	[RuleVersion(0)]
	public UnderlineFunctionContext underlineFunction() {
		UnderlineFunctionContext _localctx = new UnderlineFunctionContext(_ctx, State);
		EnterRule(_localctx, 266, RULE_underlineFunction);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1270; Match(UNDERLINE);
			State = 1271; Match(LPAREN);
			State = 1272; _localctx.text = compositeList();
			State = 1273; Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UserFunctionContext : ParserRuleContext {
		public ITerminalNode USER() { return GetToken(PftParser.USER, 0); }
		public ITerminalNode RPAREN() { return GetToken(PftParser.RPAREN, 0); }
		public ITerminalNode LPAREN() { return GetToken(PftParser.LPAREN, 0); }
		public UserFunctionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_userFunction; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPftListener typedListener = listener as IPftListener;
			if (typedListener != null) typedListener.EnterUserFunction(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPftListener typedListener = listener as IPftListener;
			if (typedListener != null) typedListener.ExitUserFunction(this);
		}
	}

	[RuleVersion(0)]
	public UserFunctionContext userFunction() {
		UserFunctionContext _localctx = new UserFunctionContext(_ctx, State);
		EnterRule(_localctx, 268, RULE_userFunction);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1275; Match(USER);
			State = 1278;
			switch ( Interpreter.AdaptivePredict(_input,51,_ctx) ) {
			case 1:
				{
				State = 1276; Match(LPAREN);
				State = 1277; Match(RPAREN);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WarningStatementContext : ParserRuleContext {
		public CompositeListContext text;
		public ITerminalNode RPAREN() { return GetToken(PftParser.RPAREN, 0); }
		public ITerminalNode WARNING() { return GetToken(PftParser.WARNING, 0); }
		public ITerminalNode LPAREN() { return GetToken(PftParser.LPAREN, 0); }
		public CompositeListContext compositeList() {
			return GetRuleContext<CompositeListContext>(0);
		}
		public WarningStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_warningStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPftListener typedListener = listener as IPftListener;
			if (typedListener != null) typedListener.EnterWarningStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPftListener typedListener = listener as IPftListener;
			if (typedListener != null) typedListener.ExitWarningStatement(this);
		}
	}

	[RuleVersion(0)]
	public WarningStatementContext warningStatement() {
		WarningStatementContext _localctx = new WarningStatementContext(_ctx, State);
		EnterRule(_localctx, 270, RULE_warningStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1280; Match(WARNING);
			State = 1281; Match(LPAREN);
			State = 1282; _localctx.text = compositeList();
			State = 1283; Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WriteFunctionContext : ParserRuleContext {
		public SimpleFormatContext name;
		public CompositeListContext text;
		public ITerminalNode COMMA() { return GetToken(PftParser.COMMA, 0); }
		public ITerminalNode RPAREN() { return GetToken(PftParser.RPAREN, 0); }
		public ITerminalNode WRITE() { return GetToken(PftParser.WRITE, 0); }
		public SimpleFormatContext simpleFormat() {
			return GetRuleContext<SimpleFormatContext>(0);
		}
		public ITerminalNode LPAREN() { return GetToken(PftParser.LPAREN, 0); }
		public CompositeListContext compositeList() {
			return GetRuleContext<CompositeListContext>(0);
		}
		public WriteFunctionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_writeFunction; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPftListener typedListener = listener as IPftListener;
			if (typedListener != null) typedListener.EnterWriteFunction(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPftListener typedListener = listener as IPftListener;
			if (typedListener != null) typedListener.ExitWriteFunction(this);
		}
	}

	[RuleVersion(0)]
	public WriteFunctionContext writeFunction() {
		WriteFunctionContext _localctx = new WriteFunctionContext(_ctx, State);
		EnterRule(_localctx, 272, RULE_writeFunction);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1285; Match(WRITE);
			State = 1286; Match(LPAREN);
			State = 1287; _localctx.name = simpleFormat();
			State = 1288; Match(COMMA);
			State = 1289; _localctx.text = compositeList();
			State = 1290; Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WriteFileFunctionContext : ParserRuleContext {
		public SimpleFormatContext name;
		public CompositeListContext text;
		public ITerminalNode COMMA() { return GetToken(PftParser.COMMA, 0); }
		public ITerminalNode RPAREN() { return GetToken(PftParser.RPAREN, 0); }
		public SimpleFormatContext simpleFormat() {
			return GetRuleContext<SimpleFormatContext>(0);
		}
		public ITerminalNode LPAREN() { return GetToken(PftParser.LPAREN, 0); }
		public ITerminalNode WRITEFILE() { return GetToken(PftParser.WRITEFILE, 0); }
		public CompositeListContext compositeList() {
			return GetRuleContext<CompositeListContext>(0);
		}
		public WriteFileFunctionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_writeFileFunction; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPftListener typedListener = listener as IPftListener;
			if (typedListener != null) typedListener.EnterWriteFileFunction(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPftListener typedListener = listener as IPftListener;
			if (typedListener != null) typedListener.ExitWriteFileFunction(this);
		}
	}

	[RuleVersion(0)]
	public WriteFileFunctionContext writeFileFunction() {
		WriteFileFunctionContext _localctx = new WriteFileFunctionContext(_ctx, State);
		EnterRule(_localctx, 274, RULE_writeFileFunction);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1292; Match(WRITEFILE);
			State = 1293; Match(LPAREN);
			State = 1294; _localctx.name = simpleFormat();
			State = 1295; Match(COMMA);
			State = 1296; _localctx.text = compositeList();
			State = 1297; Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FieldReferenceContext : ParserRuleContext {
		public LeftHandContext leftHand() {
			return GetRuleContext<LeftHandContext>(0);
		}
		public RightHandContext rightHand() {
			return GetRuleContext<RightHandContext>(0);
		}
		public ITerminalNode FIELD() { return GetToken(PftParser.FIELD, 0); }
		public FieldReferenceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fieldReference; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPftListener typedListener = listener as IPftListener;
			if (typedListener != null) typedListener.EnterFieldReference(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPftListener typedListener = listener as IPftListener;
			if (typedListener != null) typedListener.ExitFieldReference(this);
		}
	}

	[RuleVersion(0)]
	public FieldReferenceContext fieldReference() {
		FieldReferenceContext _localctx = new FieldReferenceContext(_ctx, State);
		EnterRule(_localctx, 276, RULE_fieldReference);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1299; leftHand();
			State = 1300; Match(FIELD);
			State = 1301; rightHand();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GlobalReferenceContext : ParserRuleContext {
		public ITerminalNode GLOBALVAR() { return GetToken(PftParser.GLOBALVAR, 0); }
		public LeftHandContext leftHand() {
			return GetRuleContext<LeftHandContext>(0);
		}
		public RightHandContext rightHand() {
			return GetRuleContext<RightHandContext>(0);
		}
		public GlobalReferenceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_globalReference; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPftListener typedListener = listener as IPftListener;
			if (typedListener != null) typedListener.EnterGlobalReference(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPftListener typedListener = listener as IPftListener;
			if (typedListener != null) typedListener.ExitGlobalReference(this);
		}
	}

	[RuleVersion(0)]
	public GlobalReferenceContext globalReference() {
		GlobalReferenceContext _localctx = new GlobalReferenceContext(_ctx, State);
		EnterRule(_localctx, 278, RULE_globalReference);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1303; leftHand();
			State = 1304; Match(GLOBALVAR);
			State = 1305; rightHand();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LeftHandContext : ParserRuleContext {
		public CommandCContext[] commandC() {
			return GetRuleContexts<CommandCContext>();
		}
		public HashOperatorContext[] hashOperator() {
			return GetRuleContexts<HashOperatorContext>();
		}
		public PercentOperatorContext[] percentOperator() {
			return GetRuleContexts<PercentOperatorContext>();
		}
		public CommandCContext commandC(int i) {
			return GetRuleContext<CommandCContext>(i);
		}
		public SlashOperatorContext[] slashOperator() {
			return GetRuleContexts<SlashOperatorContext>();
		}
		public CommandXContext[] commandX() {
			return GetRuleContexts<CommandXContext>();
		}
		public ModeSwitchContext modeSwitch(int i) {
			return GetRuleContext<ModeSwitchContext>(i);
		}
		public ConditionalLiteralContext conditionalLiteral(int i) {
			return GetRuleContext<ConditionalLiteralContext>(i);
		}
		public ConditionalLiteralContext[] conditionalLiteral() {
			return GetRuleContexts<ConditionalLiteralContext>();
		}
		public CommandXContext commandX(int i) {
			return GetRuleContext<CommandXContext>(i);
		}
		public ITerminalNode PLUS() { return GetToken(PftParser.PLUS, 0); }
		public SlashOperatorContext slashOperator(int i) {
			return GetRuleContext<SlashOperatorContext>(i);
		}
		public PercentOperatorContext percentOperator(int i) {
			return GetRuleContext<PercentOperatorContext>(i);
		}
		public RepeatableLiteralContext repeatableLiteral() {
			return GetRuleContext<RepeatableLiteralContext>(0);
		}
		public ModeSwitchContext[] modeSwitch() {
			return GetRuleContexts<ModeSwitchContext>();
		}
		public HashOperatorContext hashOperator(int i) {
			return GetRuleContext<HashOperatorContext>(i);
		}
		public LeftHandContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_leftHand; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPftListener typedListener = listener as IPftListener;
			if (typedListener != null) typedListener.EnterLeftHand(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPftListener typedListener = listener as IPftListener;
			if (typedListener != null) typedListener.ExitLeftHand(this);
		}
	}

	[RuleVersion(0)]
	public LeftHandContext leftHand() {
		LeftHandContext _localctx = new LeftHandContext(_ctx, State);
		EnterRule(_localctx, 280, RULE_leftHand);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1320;
			_la = _input.La(1);
			if (_la==CONDITIONAL) {
				{
				State = 1307; conditionalLiteral();
				State = 1317;
				_errHandler.Sync(this);
				_la = _input.La(1);
				while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << COMMANDC) | (1L << COMMANDX) | (1L << CONDITIONAL) | (1L << MODESWITCH))) != 0) || _la==HASH || _la==PERCENT || _la==SLASH) {
					{
					State = 1315;
					switch (_input.La(1)) {
					case CONDITIONAL:
						{
						State = 1308; conditionalLiteral();
						}
						break;
					case COMMANDC:
						{
						State = 1309; commandC();
						}
						break;
					case COMMANDX:
						{
						State = 1310; commandX();
						}
						break;
					case MODESWITCH:
						{
						State = 1311; modeSwitch();
						}
						break;
					case SLASH:
						{
						State = 1312; slashOperator();
						}
						break;
					case HASH:
						{
						State = 1313; hashOperator();
						}
						break;
					case PERCENT:
						{
						State = 1314; percentOperator();
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
					State = 1319;
					_errHandler.Sync(this);
					_la = _input.La(1);
				}
				}
			}

			State = 1326;
			_la = _input.La(1);
			if (_la==REPEATABLE) {
				{
				State = 1322; repeatableLiteral();
				State = 1324;
				_la = _input.La(1);
				if (_la==PLUS) {
					{
					State = 1323; Match(PLUS);
					}
				}

				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RightHandContext : ParserRuleContext {
		public ConditionalLiteralContext conditionalLiteral() {
			return GetRuleContext<ConditionalLiteralContext>(0);
		}
		public ITerminalNode PLUS() { return GetToken(PftParser.PLUS, 0); }
		public RepeatableLiteralContext repeatableLiteral() {
			return GetRuleContext<RepeatableLiteralContext>(0);
		}
		public RightHandContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_rightHand; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPftListener typedListener = listener as IPftListener;
			if (typedListener != null) typedListener.EnterRightHand(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPftListener typedListener = listener as IPftListener;
			if (typedListener != null) typedListener.ExitRightHand(this);
		}
	}

	[RuleVersion(0)]
	public RightHandContext rightHand() {
		RightHandContext _localctx = new RightHandContext(_ctx, State);
		EnterRule(_localctx, 282, RULE_rightHand);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1332;
			switch ( Interpreter.AdaptivePredict(_input,58,_ctx) ) {
			case 1:
				{
				State = 1329;
				_la = _input.La(1);
				if (_la==PLUS) {
					{
					State = 1328; Match(PLUS);
					}
				}

				State = 1331; repeatableLiteral();
				}
				break;
			}
			State = 1335;
			switch ( Interpreter.AdaptivePredict(_input,59,_ctx) ) {
			case 1:
				{
				State = 1334; conditionalLiteral();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FieldListContext : ParserRuleContext {
		public FieldReferenceContext fieldReference(int i) {
			return GetRuleContext<FieldReferenceContext>(i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(PftParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(PftParser.COMMA, i);
		}
		public FieldReferenceContext[] fieldReference() {
			return GetRuleContexts<FieldReferenceContext>();
		}
		public FieldListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fieldList; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPftListener typedListener = listener as IPftListener;
			if (typedListener != null) typedListener.EnterFieldList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPftListener typedListener = listener as IPftListener;
			if (typedListener != null) typedListener.ExitFieldList(this);
		}
	}

	[RuleVersion(0)]
	public FieldListContext fieldList() {
		FieldListContext _localctx = new FieldListContext(_ctx, State);
		EnterRule(_localctx, 284, RULE_fieldList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1337; fieldReference();
			State = 1342;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==COMMA) {
				{
				{
				State = 1338; Match(COMMA);
				State = 1339; fieldReference();
				}
				}
				State = 1344;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConditionalLiteralContext : ParserRuleContext {
		public ITerminalNode CONDITIONAL() { return GetToken(PftParser.CONDITIONAL, 0); }
		public ConditionalLiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_conditionalLiteral; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPftListener typedListener = listener as IPftListener;
			if (typedListener != null) typedListener.EnterConditionalLiteral(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPftListener typedListener = listener as IPftListener;
			if (typedListener != null) typedListener.ExitConditionalLiteral(this);
		}
	}

	[RuleVersion(0)]
	public ConditionalLiteralContext conditionalLiteral() {
		ConditionalLiteralContext _localctx = new ConditionalLiteralContext(_ctx, State);
		EnterRule(_localctx, 286, RULE_conditionalLiteral);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1345; Match(CONDITIONAL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RepeatableLiteralContext : ParserRuleContext {
		public ITerminalNode REPEATABLE() { return GetToken(PftParser.REPEATABLE, 0); }
		public RepeatableLiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_repeatableLiteral; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPftListener typedListener = listener as IPftListener;
			if (typedListener != null) typedListener.EnterRepeatableLiteral(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPftListener typedListener = listener as IPftListener;
			if (typedListener != null) typedListener.ExitRepeatableLiteral(this);
		}
	}

	[RuleVersion(0)]
	public RepeatableLiteralContext repeatableLiteral() {
		RepeatableLiteralContext _localctx = new RepeatableLiteralContext(_ctx, State);
		EnterRule(_localctx, 288, RULE_repeatableLiteral);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1347; Match(REPEATABLE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GroupStatementContext : ParserRuleContext {
		public AssignmentContext assignment(int i) {
			return GetRuleContext<AssignmentContext>(i);
		}
		public AssignmentContext[] assignment() {
			return GetRuleContexts<AssignmentContext>();
		}
		public CallStatementContext callStatement(int i) {
			return GetRuleContext<CallStatementContext>(i);
		}
		public SimpleFormatContext[] simpleFormat() {
			return GetRuleContexts<SimpleFormatContext>();
		}
		public SimpleFormatContext simpleFormat(int i) {
			return GetRuleContext<SimpleFormatContext>(i);
		}
		public ITerminalNode LPAREN() { return GetToken(PftParser.LPAREN, 0); }
		public CommaOperatorContext[] commaOperator() {
			return GetRuleContexts<CommaOperatorContext>();
		}
		public CommaOperatorContext commaOperator(int i) {
			return GetRuleContext<CommaOperatorContext>(i);
		}
		public WhileLoopContext[] whileLoop() {
			return GetRuleContexts<WhileLoopContext>();
		}
		public SelectStatementContext selectStatement(int i) {
			return GetRuleContext<SelectStatementContext>(i);
		}
		public ForLoopContext forLoop(int i) {
			return GetRuleContext<ForLoopContext>(i);
		}
		public ConditionalStatementContext conditionalStatement(int i) {
			return GetRuleContext<ConditionalStatementContext>(i);
		}
		public ITerminalNode RPAREN() { return GetToken(PftParser.RPAREN, 0); }
		public WhileLoopContext whileLoop(int i) {
			return GetRuleContext<WhileLoopContext>(i);
		}
		public ForLoopContext[] forLoop() {
			return GetRuleContexts<ForLoopContext>();
		}
		public CallStatementContext[] callStatement() {
			return GetRuleContexts<CallStatementContext>();
		}
		public SelectStatementContext[] selectStatement() {
			return GetRuleContexts<SelectStatementContext>();
		}
		public ConditionalStatementContext[] conditionalStatement() {
			return GetRuleContexts<ConditionalStatementContext>();
		}
		public GroupStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_groupStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPftListener typedListener = listener as IPftListener;
			if (typedListener != null) typedListener.EnterGroupStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPftListener typedListener = listener as IPftListener;
			if (typedListener != null) typedListener.ExitGroupStatement(this);
		}
	}

	[RuleVersion(0)]
	public GroupStatementContext groupStatement() {
		GroupStatementContext _localctx = new GroupStatementContext(_ctx, State);
		EnterRule(_localctx, 290, RULE_groupStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1349; Match(LPAREN);
			State = 1360;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << COMMANDC) | (1L << COMMANDX) | (1L << CONDITIONAL) | (1L << ESCAPED) | (1L << FIELD) | (1L << FORMATEXIT) | (1L << GLOBALVAR) | (1L << ID) | (1L << INCLUSION) | (1L << LONGLITERAL) | (1L << MFNWITHLENGTH) | (1L << MODESWITCH) | (1L << REPEATABLE) | (1L << UNCONDITIONAL) | (1L << APPDIR) | (1L << APPENDFILE) | (1L << APPSETTING) | (1L << ASK) | (1L << BANG) | (1L << BEEP) | (1L << BOLD) | (1L << BREAK) | (1L << CALL) | (1L << CAT) | (1L << COLOR) | (1L << CENTER) | (1L << CHANGEDB) | (1L << CHOOSE) | (1L << CHR) | (1L << CLIENTVERSION) | (1L << CMDLINE) | (1L << COMBINE) | (1L << COMMA) | (1L << COUT) | (1L << CPU) | (1L << CREATEDB) | (1L << CURDIR) | (1L << DATABASE) | (1L << DATE) | (1L << DEBUG) | (1L << DELETEDB) | (1L << DELETEFILE) | (1L << DELREC) | (1L << EAT) | (1L << EDITTEXT) | (1L << ERROR) | (1L << EXPANDENV) | (1L << EXTRACTDIR))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (EXTRACTDRIVE - 64)) | (1L << (EXTRACTEXT - 64)) | (1L << (EXTRACTNAME - 64)) | (1L << (F - 64)) | (1L << (F2 - 64)) | (1L << (FATAL - 64)) | (1L << (FONTNAME - 64)) | (1L << (FONTSIZE - 64)) | (1L << (FOR - 64)) | (1L << (GETENV - 64)) | (1L << (HASH - 64)) | (1L << (HEADER1 - 64)) | (1L << (HEADER2 - 64)) | (1L << (HEADER3 - 64)) | (1L << (HOST - 64)) | (1L << (IF - 64)) | (1L << (IFF - 64)) | (1L << (INCLUDE - 64)) | (1L << (INCREMENT - 64)) | (1L << (ITALIC - 64)) | (1L << (LEFT - 64)) | (1L << (LINEBREAK - 64)) | (1L << (LOCALIP - 64)) | (1L << (MACHINENAME - 64)) | (1L << (MAP - 64)) | (1L << (MESSAGE - 64)) | (1L << (MFN - 64)) | (1L << (MID - 64)) | (1L << (MSG - 64)) | (1L << (MSTNAME - 64)) | (1L << (NEWREC - 64)) | (1L << (NL - 64)) | (1L << (NOW - 64)) | (1L << (ORGANIZATION - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (OS - 128)) | (1L << (PAD - 128)) | (1L << (PADLEFT - 128)) | (1L << (PADRIGHT - 128)) | (1L << (PAGEBREAK - 128)) | (1L << (PARA - 128)) | (1L << (PERCENT - 128)) | (1L << (PLATFORM - 128)) | (1L << (POPMODE - 128)) | (1L << (PORT - 128)) | (1L << (PROC - 128)) | (1L << (PUSHMODE - 128)) | (1L << (PUTENV - 128)) | (1L << (READFILE - 128)) | (1L << (READLINE - 128)) | (1L << (REF - 128)) | (1L << (REPLACE - 128)) | (1L << (REQUIRECLIENT - 128)) | (1L << (REQUIRESERVER - 128)) | (1L << (REVERT - 128)) | (1L << (RIGHT - 128)) | (1L << (RUNTIME - 128)) | (1L << (S - 128)) | (1L << (SELECT - 128)) | (1L << (SERVERVERSION - 128)) | (1L << (SLASH - 128)) | (1L << (SYSDIR - 128)) | (1L << (SYSTEM - 128)) | (1L << (TEMPDIR - 128)) | (1L << (TIME - 128)) | (1L << (TOLOWER - 128)) | (1L << (TOUCHFILE - 128)) | (1L << (TOUPPER - 128)) | (1L << (TRACE - 128)) | (1L << (TRIM - 128)) | (1L << (TRIMLEFT - 128)) | (1L << (TRIMRIGHT - 128)) | (1L << (TRUNCATEFILE - 128)) | (1L << (TYPE - 128)) | (1L << (UNDELREC - 128)) | (1L << (UNDERLINE - 128)) | (1L << (USER - 128)))) != 0) || ((((_la - 193)) & ~0x3f) == 0 && ((1L << (_la - 193)) & ((1L << (WARNING - 193)) | (1L << (WHILE - 193)) | (1L << (WRITE - 193)) | (1L << (WRITEFILE - 193)))) != 0)) {
				{
				State = 1358;
				switch ( Interpreter.AdaptivePredict(_input,61,_ctx) ) {
				case 1:
					{
					State = 1350; simpleFormat();
					}
					break;

				case 2:
					{
					State = 1351; commaOperator();
					}
					break;

				case 3:
					{
					State = 1352; assignment();
					}
					break;

				case 4:
					{
					State = 1353; forLoop();
					}
					break;

				case 5:
					{
					State = 1354; whileLoop();
					}
					break;

				case 6:
					{
					State = 1355; selectStatement();
					}
					break;

				case 7:
					{
					State = 1356; callStatement();
					}
					break;

				case 8:
					{
					State = 1357; conditionalStatement();
					}
					break;
				}
				}
				State = 1362;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 1363; Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExtendedGroupStatementContext : ParserRuleContext {
		public ITerminalNode LCURLY() { return GetToken(PftParser.LCURLY, 0); }
		public AssignmentContext assignment(int i) {
			return GetRuleContext<AssignmentContext>(i);
		}
		public AssignmentContext[] assignment() {
			return GetRuleContexts<AssignmentContext>();
		}
		public CallStatementContext callStatement(int i) {
			return GetRuleContext<CallStatementContext>(i);
		}
		public FieldListContext fieldList() {
			return GetRuleContext<FieldListContext>(0);
		}
		public SimpleFormatContext[] simpleFormat() {
			return GetRuleContexts<SimpleFormatContext>();
		}
		public SimpleFormatContext simpleFormat(int i) {
			return GetRuleContext<SimpleFormatContext>(i);
		}
		public ITerminalNode RCURLY() { return GetToken(PftParser.RCURLY, 0); }
		public CommaOperatorContext[] commaOperator() {
			return GetRuleContexts<CommaOperatorContext>();
		}
		public CommaOperatorContext commaOperator(int i) {
			return GetRuleContext<CommaOperatorContext>(i);
		}
		public WhileLoopContext[] whileLoop() {
			return GetRuleContexts<WhileLoopContext>();
		}
		public SelectStatementContext selectStatement(int i) {
			return GetRuleContext<SelectStatementContext>(i);
		}
		public ForLoopContext forLoop(int i) {
			return GetRuleContext<ForLoopContext>(i);
		}
		public ConditionalStatementContext conditionalStatement(int i) {
			return GetRuleContext<ConditionalStatementContext>(i);
		}
		public WhileLoopContext whileLoop(int i) {
			return GetRuleContext<WhileLoopContext>(i);
		}
		public ForLoopContext[] forLoop() {
			return GetRuleContexts<ForLoopContext>();
		}
		public CallStatementContext[] callStatement() {
			return GetRuleContexts<CallStatementContext>();
		}
		public SelectStatementContext[] selectStatement() {
			return GetRuleContexts<SelectStatementContext>();
		}
		public ITerminalNode COLON() { return GetToken(PftParser.COLON, 0); }
		public ConditionalStatementContext[] conditionalStatement() {
			return GetRuleContexts<ConditionalStatementContext>();
		}
		public ExtendedGroupStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_extendedGroupStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPftListener typedListener = listener as IPftListener;
			if (typedListener != null) typedListener.EnterExtendedGroupStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPftListener typedListener = listener as IPftListener;
			if (typedListener != null) typedListener.ExitExtendedGroupStatement(this);
		}
	}

	[RuleVersion(0)]
	public ExtendedGroupStatementContext extendedGroupStatement() {
		ExtendedGroupStatementContext _localctx = new ExtendedGroupStatementContext(_ctx, State);
		EnterRule(_localctx, 292, RULE_extendedGroupStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1365; Match(LCURLY);
			State = 1366; fieldList();
			State = 1367; Match(COLON);
			State = 1378;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << COMMANDC) | (1L << COMMANDX) | (1L << CONDITIONAL) | (1L << ESCAPED) | (1L << FIELD) | (1L << FORMATEXIT) | (1L << GLOBALVAR) | (1L << ID) | (1L << INCLUSION) | (1L << LONGLITERAL) | (1L << MFNWITHLENGTH) | (1L << MODESWITCH) | (1L << REPEATABLE) | (1L << UNCONDITIONAL) | (1L << APPDIR) | (1L << APPENDFILE) | (1L << APPSETTING) | (1L << ASK) | (1L << BANG) | (1L << BEEP) | (1L << BOLD) | (1L << BREAK) | (1L << CALL) | (1L << CAT) | (1L << COLOR) | (1L << CENTER) | (1L << CHANGEDB) | (1L << CHOOSE) | (1L << CHR) | (1L << CLIENTVERSION) | (1L << CMDLINE) | (1L << COMBINE) | (1L << COMMA) | (1L << COUT) | (1L << CPU) | (1L << CREATEDB) | (1L << CURDIR) | (1L << DATABASE) | (1L << DATE) | (1L << DEBUG) | (1L << DELETEDB) | (1L << DELETEFILE) | (1L << DELREC) | (1L << EAT) | (1L << EDITTEXT) | (1L << ERROR) | (1L << EXPANDENV) | (1L << EXTRACTDIR))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (EXTRACTDRIVE - 64)) | (1L << (EXTRACTEXT - 64)) | (1L << (EXTRACTNAME - 64)) | (1L << (F - 64)) | (1L << (F2 - 64)) | (1L << (FATAL - 64)) | (1L << (FONTNAME - 64)) | (1L << (FONTSIZE - 64)) | (1L << (FOR - 64)) | (1L << (GETENV - 64)) | (1L << (HASH - 64)) | (1L << (HEADER1 - 64)) | (1L << (HEADER2 - 64)) | (1L << (HEADER3 - 64)) | (1L << (HOST - 64)) | (1L << (IF - 64)) | (1L << (IFF - 64)) | (1L << (INCLUDE - 64)) | (1L << (INCREMENT - 64)) | (1L << (ITALIC - 64)) | (1L << (LEFT - 64)) | (1L << (LINEBREAK - 64)) | (1L << (LOCALIP - 64)) | (1L << (MACHINENAME - 64)) | (1L << (MAP - 64)) | (1L << (MESSAGE - 64)) | (1L << (MFN - 64)) | (1L << (MID - 64)) | (1L << (MSG - 64)) | (1L << (MSTNAME - 64)) | (1L << (NEWREC - 64)) | (1L << (NL - 64)) | (1L << (NOW - 64)) | (1L << (ORGANIZATION - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (OS - 128)) | (1L << (PAD - 128)) | (1L << (PADLEFT - 128)) | (1L << (PADRIGHT - 128)) | (1L << (PAGEBREAK - 128)) | (1L << (PARA - 128)) | (1L << (PERCENT - 128)) | (1L << (PLATFORM - 128)) | (1L << (POPMODE - 128)) | (1L << (PORT - 128)) | (1L << (PROC - 128)) | (1L << (PUSHMODE - 128)) | (1L << (PUTENV - 128)) | (1L << (READFILE - 128)) | (1L << (READLINE - 128)) | (1L << (REF - 128)) | (1L << (REPLACE - 128)) | (1L << (REQUIRECLIENT - 128)) | (1L << (REQUIRESERVER - 128)) | (1L << (REVERT - 128)) | (1L << (RIGHT - 128)) | (1L << (RUNTIME - 128)) | (1L << (S - 128)) | (1L << (SELECT - 128)) | (1L << (SERVERVERSION - 128)) | (1L << (SLASH - 128)) | (1L << (SYSDIR - 128)) | (1L << (SYSTEM - 128)) | (1L << (TEMPDIR - 128)) | (1L << (TIME - 128)) | (1L << (TOLOWER - 128)) | (1L << (TOUCHFILE - 128)) | (1L << (TOUPPER - 128)) | (1L << (TRACE - 128)) | (1L << (TRIM - 128)) | (1L << (TRIMLEFT - 128)) | (1L << (TRIMRIGHT - 128)) | (1L << (TRUNCATEFILE - 128)) | (1L << (TYPE - 128)) | (1L << (UNDELREC - 128)) | (1L << (UNDERLINE - 128)) | (1L << (USER - 128)))) != 0) || ((((_la - 193)) & ~0x3f) == 0 && ((1L << (_la - 193)) & ((1L << (WARNING - 193)) | (1L << (WHILE - 193)) | (1L << (WRITE - 193)) | (1L << (WRITEFILE - 193)))) != 0)) {
				{
				State = 1376;
				switch ( Interpreter.AdaptivePredict(_input,63,_ctx) ) {
				case 1:
					{
					State = 1368; simpleFormat();
					}
					break;

				case 2:
					{
					State = 1369; commaOperator();
					}
					break;

				case 3:
					{
					State = 1370; assignment();
					}
					break;

				case 4:
					{
					State = 1371; forLoop();
					}
					break;

				case 5:
					{
					State = 1372; whileLoop();
					}
					break;

				case 6:
					{
					State = 1373; selectStatement();
					}
					break;

				case 7:
					{
					State = 1374; callStatement();
					}
					break;

				case 8:
					{
					State = 1375; conditionalStatement();
					}
					break;
				}
				}
				State = 1380;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 1381; Match(RCURLY);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConditionalStatementContext : ParserRuleContext {
		public CompositeListContext thenBranch;
		public CompositeListContext elseBranch;
		public ITerminalNode THEN() { return GetToken(PftParser.THEN, 0); }
		public ITerminalNode IF() { return GetToken(PftParser.IF, 0); }
		public ConditionContext condition() {
			return GetRuleContext<ConditionContext>(0);
		}
		public ITerminalNode FI() { return GetToken(PftParser.FI, 0); }
		public ITerminalNode ELSE() { return GetToken(PftParser.ELSE, 0); }
		public CompositeListContext compositeList(int i) {
			return GetRuleContext<CompositeListContext>(i);
		}
		public CompositeListContext[] compositeList() {
			return GetRuleContexts<CompositeListContext>();
		}
		public ConditionalStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_conditionalStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPftListener typedListener = listener as IPftListener;
			if (typedListener != null) typedListener.EnterConditionalStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPftListener typedListener = listener as IPftListener;
			if (typedListener != null) typedListener.ExitConditionalStatement(this);
		}
	}

	[RuleVersion(0)]
	public ConditionalStatementContext conditionalStatement() {
		ConditionalStatementContext _localctx = new ConditionalStatementContext(_ctx, State);
		EnterRule(_localctx, 294, RULE_conditionalStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1383; Match(IF);
			State = 1384; condition(0);
			State = 1385; Match(THEN);
			State = 1386; _localctx.thenBranch = compositeList();
			State = 1389;
			_la = _input.La(1);
			if (_la==ELSE) {
				{
				State = 1387; Match(ELSE);
				State = 1388; _localctx.elseBranch = compositeList();
				}
			}

			State = 1391; Match(FI);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConditionContext : ParserRuleContext {
		public IToken op;
		public ConditionArithContext conditionArith() {
			return GetRuleContext<ConditionArithContext>(0);
		}
		public ConditionContext[] condition() {
			return GetRuleContexts<ConditionContext>();
		}
		public ConditionNotContext conditionNot() {
			return GetRuleContext<ConditionNotContext>(0);
		}
		public ITerminalNode AND() { return GetToken(PftParser.AND, 0); }
		public ConditionContext condition(int i) {
			return GetRuleContext<ConditionContext>(i);
		}
		public ITerminalNode OR() { return GetToken(PftParser.OR, 0); }
		public ConditionStringContext conditionString() {
			return GetRuleContext<ConditionStringContext>(0);
		}
		public ConditionBooleanContext conditionBoolean() {
			return GetRuleContext<ConditionBooleanContext>(0);
		}
		public ConditionParenContext conditionParen() {
			return GetRuleContext<ConditionParenContext>(0);
		}
		public ConditionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_condition; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPftListener typedListener = listener as IPftListener;
			if (typedListener != null) typedListener.EnterCondition(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPftListener typedListener = listener as IPftListener;
			if (typedListener != null) typedListener.ExitCondition(this);
		}
	}

	[RuleVersion(0)]
	public ConditionContext condition() {
		return condition(0);
	}

	private ConditionContext condition(int _p) {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = State;
		ConditionContext _localctx = new ConditionContext(_ctx, _parentState);
		ConditionContext _prevctx = _localctx;
		int _startState = 296;
		EnterRecursionRule(_localctx, 296, RULE_condition, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1399;
			switch ( Interpreter.AdaptivePredict(_input,66,_ctx) ) {
			case 1:
				{
				State = 1394; conditionNot();
				}
				break;

			case 2:
				{
				State = 1395; conditionParen();
				}
				break;

			case 3:
				{
				State = 1396; conditionString();
				}
				break;

			case 4:
				{
				State = 1397; conditionBoolean();
				}
				break;

			case 5:
				{
				State = 1398; conditionArith();
				}
				break;
			}
			_ctx.stop = _input.Lt(-1);
			State = 1406;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,67,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new ConditionContext(_parentctx, _parentState);
					PushNewRecursionContext(_localctx, _startState, RULE_condition);
					State = 1401;
					if (!(Precpred(_ctx, 6))) throw new FailedPredicateException(this, "Precpred(_ctx, 6)");
					State = 1402;
					_localctx.op = _input.Lt(1);
					_la = _input.La(1);
					if ( !(_la==AND || _la==OR) ) {
						_localctx.op = _errHandler.RecoverInline(this);
					}
					Consume();
					State = 1403; condition(7);
					}
					} 
				}
				State = 1408;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,67,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class ConditionNotContext : ParserRuleContext {
		public ConditionContext condition() {
			return GetRuleContext<ConditionContext>(0);
		}
		public ITerminalNode NOT() { return GetToken(PftParser.NOT, 0); }
		public ConditionNotContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_conditionNot; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPftListener typedListener = listener as IPftListener;
			if (typedListener != null) typedListener.EnterConditionNot(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPftListener typedListener = listener as IPftListener;
			if (typedListener != null) typedListener.ExitConditionNot(this);
		}
	}

	[RuleVersion(0)]
	public ConditionNotContext conditionNot() {
		ConditionNotContext _localctx = new ConditionNotContext(_ctx, State);
		EnterRule(_localctx, 298, RULE_conditionNot);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1409; Match(NOT);
			State = 1410; condition(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConditionParenContext : ParserRuleContext {
		public ConditionContext condition() {
			return GetRuleContext<ConditionContext>(0);
		}
		public ITerminalNode RPAREN() { return GetToken(PftParser.RPAREN, 0); }
		public ITerminalNode LPAREN() { return GetToken(PftParser.LPAREN, 0); }
		public ConditionParenContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_conditionParen; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPftListener typedListener = listener as IPftListener;
			if (typedListener != null) typedListener.EnterConditionParen(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPftListener typedListener = listener as IPftListener;
			if (typedListener != null) typedListener.ExitConditionParen(this);
		}
	}

	[RuleVersion(0)]
	public ConditionParenContext conditionParen() {
		ConditionParenContext _localctx = new ConditionParenContext(_ctx, State);
		EnterRule(_localctx, 300, RULE_conditionParen);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1412; Match(LPAREN);
			State = 1413; condition(0);
			State = 1414; Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConditionStringContext : ParserRuleContext {
		public PrimaryElementContext left;
		public IToken op;
		public PrimaryElementContext right;
		public ITerminalNode MORE() { return GetToken(PftParser.MORE, 0); }
		public ITerminalNode LESSEQ() { return GetToken(PftParser.LESSEQ, 0); }
		public PrimaryElementContext primaryElement(int i) {
			return GetRuleContext<PrimaryElementContext>(i);
		}
		public ITerminalNode EQUALS() { return GetToken(PftParser.EQUALS, 0); }
		public ITerminalNode LESS() { return GetToken(PftParser.LESS, 0); }
		public ITerminalNode MOREEQ() { return GetToken(PftParser.MOREEQ, 0); }
		public ITerminalNode NOTEQUALS() { return GetToken(PftParser.NOTEQUALS, 0); }
		public ITerminalNode COLON() { return GetToken(PftParser.COLON, 0); }
		public PrimaryElementContext[] primaryElement() {
			return GetRuleContexts<PrimaryElementContext>();
		}
		public ConditionStringContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_conditionString; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPftListener typedListener = listener as IPftListener;
			if (typedListener != null) typedListener.EnterConditionString(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPftListener typedListener = listener as IPftListener;
			if (typedListener != null) typedListener.ExitConditionString(this);
		}
	}

	[RuleVersion(0)]
	public ConditionStringContext conditionString() {
		ConditionStringContext _localctx = new ConditionStringContext(_ctx, State);
		EnterRule(_localctx, 302, RULE_conditionString);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1416; _localctx.left = primaryElement();
			State = 1417;
			_localctx.op = _input.Lt(1);
			_la = _input.La(1);
			if ( !(_la==COLON || _la==EQUALS || ((((_la - 98)) & ~0x3f) == 0 && ((1L << (_la - 98)) & ((1L << (LESS - 98)) | (1L << (LESSEQ - 98)) | (1L << (MORE - 98)) | (1L << (MOREEQ - 98)) | (1L << (NOTEQUALS - 98)))) != 0)) ) {
				_localctx.op = _errHandler.RecoverInline(this);
			}
			Consume();
			State = 1418; _localctx.right = primaryElement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConditionBooleanContext : ParserRuleContext {
		public StartsWithFunctionContext startsWithFunction() {
			return GetRuleContext<StartsWithFunctionContext>(0);
		}
		public X64FunctionContext x64Function() {
			return GetRuleContext<X64FunctionContext>(0);
		}
		public FieldPresenseContext fieldPresense() {
			return GetRuleContext<FieldPresenseContext>(0);
		}
		public FileExistFunctionContext fileExistFunction() {
			return GetRuleContext<FileExistFunctionContext>(0);
		}
		public ConnectedFunctionContext connectedFunction() {
			return GetRuleContext<ConnectedFunctionContext>(0);
		}
		public InteractiveFunctionContext interactiveFunction() {
			return GetRuleContext<InteractiveFunctionContext>(0);
		}
		public EndsWithFunctionContext endsWithFunction() {
			return GetRuleContext<EndsWithFunctionContext>(0);
		}
		public ExistFunctionContext existFunction() {
			return GetRuleContext<ExistFunctionContext>(0);
		}
		public DeletedFunctionContext deletedFunction() {
			return GetRuleContext<DeletedFunctionContext>(0);
		}
		public ConditionBooleanContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_conditionBoolean; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPftListener typedListener = listener as IPftListener;
			if (typedListener != null) typedListener.EnterConditionBoolean(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPftListener typedListener = listener as IPftListener;
			if (typedListener != null) typedListener.ExitConditionBoolean(this);
		}
	}

	[RuleVersion(0)]
	public ConditionBooleanContext conditionBoolean() {
		ConditionBooleanContext _localctx = new ConditionBooleanContext(_ctx, State);
		EnterRule(_localctx, 304, RULE_conditionBoolean);
		try {
			State = 1429;
			switch (_input.La(1)) {
			case A:
			case P:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1420; fieldPresense();
				}
				break;
			case STARTSWITH:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1421; startsWithFunction();
				}
				break;
			case ENDSWITH:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1422; endsWithFunction();
				}
				break;
			case INTERACTIVE:
				EnterOuterAlt(_localctx, 4);
				{
				State = 1423; interactiveFunction();
				}
				break;
			case X64:
				EnterOuterAlt(_localctx, 5);
				{
				State = 1424; x64Function();
				}
				break;
			case DELETED:
				EnterOuterAlt(_localctx, 6);
				{
				State = 1425; deletedFunction();
				}
				break;
			case EXIST:
				EnterOuterAlt(_localctx, 7);
				{
				State = 1426; existFunction();
				}
				break;
			case CONNECTED:
				EnterOuterAlt(_localctx, 8);
				{
				State = 1427; connectedFunction();
				}
				break;
			case FILEEXIST:
				EnterOuterAlt(_localctx, 9);
				{
				State = 1428; fileExistFunction();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConditionArithContext : ParserRuleContext {
		public ArithExprContext left;
		public IToken op;
		public ArithExprContext right;
		public ITerminalNode MORE() { return GetToken(PftParser.MORE, 0); }
		public ITerminalNode LESSEQ() { return GetToken(PftParser.LESSEQ, 0); }
		public ArithExprContext arithExpr(int i) {
			return GetRuleContext<ArithExprContext>(i);
		}
		public ITerminalNode EQUALS() { return GetToken(PftParser.EQUALS, 0); }
		public ITerminalNode LESS() { return GetToken(PftParser.LESS, 0); }
		public ArithExprContext[] arithExpr() {
			return GetRuleContexts<ArithExprContext>();
		}
		public ITerminalNode MOREEQ() { return GetToken(PftParser.MOREEQ, 0); }
		public ITerminalNode NOTEQUALS() { return GetToken(PftParser.NOTEQUALS, 0); }
		public ConditionArithContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_conditionArith; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPftListener typedListener = listener as IPftListener;
			if (typedListener != null) typedListener.EnterConditionArith(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPftListener typedListener = listener as IPftListener;
			if (typedListener != null) typedListener.ExitConditionArith(this);
		}
	}

	[RuleVersion(0)]
	public ConditionArithContext conditionArith() {
		ConditionArithContext _localctx = new ConditionArithContext(_ctx, State);
		EnterRule(_localctx, 306, RULE_conditionArith);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1431; _localctx.left = arithExpr(0);
			State = 1432;
			_localctx.op = _input.Lt(1);
			_la = _input.La(1);
			if ( !(((((_la - 59)) & ~0x3f) == 0 && ((1L << (_la - 59)) & ((1L << (EQUALS - 59)) | (1L << (LESS - 59)) | (1L << (LESSEQ - 59)) | (1L << (MORE - 59)) | (1L << (MOREEQ - 59)) | (1L << (NOTEQUALS - 59)))) != 0)) ) {
				_localctx.op = _errHandler.RecoverInline(this);
			}
			Consume();
			State = 1433; _localctx.right = arithExpr(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArithExprContext : ParserRuleContext {
		public ArithExprContext left;
		public IToken op;
		public ArithExprContext right;
		public ArithExprContext arithExpr(int i) {
			return GetRuleContext<ArithExprContext>(i);
		}
		public ITerminalNode MINUS() { return GetToken(PftParser.MINUS, 0); }
		public ArithExprContext[] arithExpr() {
			return GetRuleContexts<ArithExprContext>();
		}
		public NumericValueContext numericValue() {
			return GetRuleContext<NumericValueContext>(0);
		}
		public ITerminalNode STAR() { return GetToken(PftParser.STAR, 0); }
		public ITerminalNode PLUS() { return GetToken(PftParser.PLUS, 0); }
		public ITerminalNode SLASH() { return GetToken(PftParser.SLASH, 0); }
		public ArithExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_arithExpr; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPftListener typedListener = listener as IPftListener;
			if (typedListener != null) typedListener.EnterArithExpr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPftListener typedListener = listener as IPftListener;
			if (typedListener != null) typedListener.ExitArithExpr(this);
		}
	}

	[RuleVersion(0)]
	public ArithExprContext arithExpr() {
		return arithExpr(0);
	}

	private ArithExprContext arithExpr(int _p) {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = State;
		ArithExprContext _localctx = new ArithExprContext(_ctx, _parentState);
		ArithExprContext _prevctx = _localctx;
		int _startState = 308;
		EnterRecursionRule(_localctx, 308, RULE_arithExpr, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 1436; numericValue();
			}
			_ctx.stop = _input.Lt(-1);
			State = 1446;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,70,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 1444;
					switch ( Interpreter.AdaptivePredict(_input,69,_ctx) ) {
					case 1:
						{
						_localctx = new ArithExprContext(_parentctx, _parentState);
						_localctx.left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_arithExpr);
						State = 1438;
						if (!(Precpred(_ctx, 3))) throw new FailedPredicateException(this, "Precpred(_ctx, 3)");
						State = 1439;
						_localctx.op = _input.Lt(1);
						_la = _input.La(1);
						if ( !(_la==SLASH || _la==STAR) ) {
							_localctx.op = _errHandler.RecoverInline(this);
						}
						Consume();
						State = 1440; _localctx.right = arithExpr(4);
						}
						break;

					case 2:
						{
						_localctx = new ArithExprContext(_parentctx, _parentState);
						_localctx.left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_arithExpr);
						State = 1441;
						if (!(Precpred(_ctx, 2))) throw new FailedPredicateException(this, "Precpred(_ctx, 2)");
						State = 1442;
						_localctx.op = _input.Lt(1);
						_la = _input.La(1);
						if ( !(_la==MINUS || _la==PLUS) ) {
							_localctx.op = _errHandler.RecoverInline(this);
						}
						Consume();
						State = 1443; _localctx.right = arithExpr(3);
						}
						break;
					}
					} 
				}
				State = 1448;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,70,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class NumericValueContext : ParserRuleContext {
		public VariableReferenceContext variableReference() {
			return GetRuleContext<VariableReferenceContext>(0);
		}
		public ParenValueContext parenValue() {
			return GetRuleContext<ParenValueContext>(0);
		}
		public ArithFunctionContext arithFunction() {
			return GetRuleContext<ArithFunctionContext>(0);
		}
		public MfnValueContext mfnValue() {
			return GetRuleContext<MfnValueContext>(0);
		}
		public FloatValueContext floatValue() {
			return GetRuleContext<FloatValueContext>(0);
		}
		public MinusValueContext minusValue() {
			return GetRuleContext<MinusValueContext>(0);
		}
		public NumericValueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_numericValue; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPftListener typedListener = listener as IPftListener;
			if (typedListener != null) typedListener.EnterNumericValue(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPftListener typedListener = listener as IPftListener;
			if (typedListener != null) typedListener.ExitNumericValue(this);
		}
	}

	[RuleVersion(0)]
	public NumericValueContext numericValue() {
		NumericValueContext _localctx = new NumericValueContext(_ctx, State);
		EnterRule(_localctx, 310, RULE_numericValue);
		try {
			State = 1455;
			switch (_input.La(1)) {
			case FLOAT:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1449; floatValue();
				}
				break;
			case MINUS:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1450; minusValue();
				}
				break;
			case LPAREN:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1451; parenValue();
				}
				break;
			case FREEMEMORY:
			case IOCC:
			case L:
			case LICENSECOUNT:
			case LICENSELEFT:
			case LICENSEUSED:
			case NOCC:
			case NPOST:
			case ORD:
			case RSUM:
			case SIZE:
			case TOTALMEMORY:
			case VAL:
			case WORKINGSET:
				EnterOuterAlt(_localctx, 4);
				{
				State = 1452; arithFunction();
				}
				break;
			case MFN:
				EnterOuterAlt(_localctx, 5);
				{
				State = 1453; mfnValue();
				}
				break;
			case ID:
				EnterOuterAlt(_localctx, 6);
				{
				State = 1454; variableReference();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FloatValueContext : ParserRuleContext {
		public ITerminalNode FLOAT() { return GetToken(PftParser.FLOAT, 0); }
		public FloatValueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_floatValue; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPftListener typedListener = listener as IPftListener;
			if (typedListener != null) typedListener.EnterFloatValue(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPftListener typedListener = listener as IPftListener;
			if (typedListener != null) typedListener.ExitFloatValue(this);
		}
	}

	[RuleVersion(0)]
	public FloatValueContext floatValue() {
		FloatValueContext _localctx = new FloatValueContext(_ctx, State);
		EnterRule(_localctx, 312, RULE_floatValue);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1457; Match(FLOAT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MinusValueContext : ParserRuleContext {
		public ITerminalNode MINUS() { return GetToken(PftParser.MINUS, 0); }
		public ArithExprContext arithExpr() {
			return GetRuleContext<ArithExprContext>(0);
		}
		public MinusValueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_minusValue; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPftListener typedListener = listener as IPftListener;
			if (typedListener != null) typedListener.EnterMinusValue(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPftListener typedListener = listener as IPftListener;
			if (typedListener != null) typedListener.ExitMinusValue(this);
		}
	}

	[RuleVersion(0)]
	public MinusValueContext minusValue() {
		MinusValueContext _localctx = new MinusValueContext(_ctx, State);
		EnterRule(_localctx, 314, RULE_minusValue);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1459; Match(MINUS);
			State = 1460; arithExpr(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ParenValueContext : ParserRuleContext {
		public ITerminalNode RPAREN() { return GetToken(PftParser.RPAREN, 0); }
		public ArithExprContext arithExpr() {
			return GetRuleContext<ArithExprContext>(0);
		}
		public ITerminalNode LPAREN() { return GetToken(PftParser.LPAREN, 0); }
		public ParenValueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_parenValue; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPftListener typedListener = listener as IPftListener;
			if (typedListener != null) typedListener.EnterParenValue(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPftListener typedListener = listener as IPftListener;
			if (typedListener != null) typedListener.ExitParenValue(this);
		}
	}

	[RuleVersion(0)]
	public ParenValueContext parenValue() {
		ParenValueContext _localctx = new ParenValueContext(_ctx, State);
		EnterRule(_localctx, 316, RULE_parenValue);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1462; Match(LPAREN);
			State = 1463; arithExpr(0);
			State = 1464; Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MfnValueContext : ParserRuleContext {
		public ITerminalNode MFN() { return GetToken(PftParser.MFN, 0); }
		public MfnValueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_mfnValue; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPftListener typedListener = listener as IPftListener;
			if (typedListener != null) typedListener.EnterMfnValue(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPftListener typedListener = listener as IPftListener;
			if (typedListener != null) typedListener.ExitMfnValue(this);
		}
	}

	[RuleVersion(0)]
	public MfnValueContext mfnValue() {
		MfnValueContext _localctx = new MfnValueContext(_ctx, State);
		EnterRule(_localctx, 318, RULE_mfnValue);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1466; Match(MFN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VariableReferenceContext : ParserRuleContext {
		public ITerminalNode ID() { return GetToken(PftParser.ID, 0); }
		public VariableReferenceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variableReference; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPftListener typedListener = listener as IPftListener;
			if (typedListener != null) typedListener.EnterVariableReference(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPftListener typedListener = listener as IPftListener;
			if (typedListener != null) typedListener.ExitVariableReference(this);
		}
	}

	[RuleVersion(0)]
	public VariableReferenceContext variableReference() {
		VariableReferenceContext _localctx = new VariableReferenceContext(_ctx, State);
		EnterRule(_localctx, 320, RULE_variableReference);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1468; Match(ID);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArithFunctionContext : ParserRuleContext {
		public TotalMemoryFunctionContext totalMemoryFunction() {
			return GetRuleContext<TotalMemoryFunctionContext>(0);
		}
		public RmaxFunctionContext rmaxFunction() {
			return GetRuleContext<RmaxFunctionContext>(0);
		}
		public LicenseUsedFunctionContext licenseUsedFunction() {
			return GetRuleContext<LicenseUsedFunctionContext>(0);
		}
		public NoccFunctionContext noccFunction() {
			return GetRuleContext<NoccFunctionContext>(0);
		}
		public LicenseLeftFunctionContext licenseLeftFunction() {
			return GetRuleContext<LicenseLeftFunctionContext>(0);
		}
		public LFunctionContext lFunction() {
			return GetRuleContext<LFunctionContext>(0);
		}
		public LicenseCountFunctionContext licenseCountFunction() {
			return GetRuleContext<LicenseCountFunctionContext>(0);
		}
		public FreeMemoryFunctionContext freeMemoryFunction() {
			return GetRuleContext<FreeMemoryFunctionContext>(0);
		}
		public RsumFunctionContext rsumFunction() {
			return GetRuleContext<RsumFunctionContext>(0);
		}
		public WorkingSetFunctionContext workingSetFunction() {
			return GetRuleContext<WorkingSetFunctionContext>(0);
		}
		public RminFunctionContext rminFunction() {
			return GetRuleContext<RminFunctionContext>(0);
		}
		public NoccOperatorContext noccOperator() {
			return GetRuleContext<NoccOperatorContext>(0);
		}
		public RavrFunctionContext ravrFunction() {
			return GetRuleContext<RavrFunctionContext>(0);
		}
		public IoccOperatorContext ioccOperator() {
			return GetRuleContext<IoccOperatorContext>(0);
		}
		public OrdFunctionContext ordFunction() {
			return GetRuleContext<OrdFunctionContext>(0);
		}
		public ValFunctionContext valFunction() {
			return GetRuleContext<ValFunctionContext>(0);
		}
		public NpostFunctionContext npostFunction() {
			return GetRuleContext<NpostFunctionContext>(0);
		}
		public SizeFunctionContext sizeFunction() {
			return GetRuleContext<SizeFunctionContext>(0);
		}
		public ArithFunctionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_arithFunction; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPftListener typedListener = listener as IPftListener;
			if (typedListener != null) typedListener.EnterArithFunction(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPftListener typedListener = listener as IPftListener;
			if (typedListener != null) typedListener.ExitArithFunction(this);
		}
	}

	[RuleVersion(0)]
	public ArithFunctionContext arithFunction() {
		ArithFunctionContext _localctx = new ArithFunctionContext(_ctx, State);
		EnterRule(_localctx, 322, RULE_arithFunction);
		try {
			State = 1488;
			switch ( Interpreter.AdaptivePredict(_input,72,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1470; rsumFunction();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1471; rmaxFunction();
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1472; rminFunction();
				}
				break;

			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 1473; ravrFunction();
				}
				break;

			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 1474; valFunction();
				}
				break;

			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 1475; lFunction();
				}
				break;

			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 1476; npostFunction();
				}
				break;

			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 1477; sizeFunction();
				}
				break;

			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 1478; workingSetFunction();
				}
				break;

			case 10:
				EnterOuterAlt(_localctx, 10);
				{
				State = 1479; ioccOperator();
				}
				break;

			case 11:
				EnterOuterAlt(_localctx, 11);
				{
				State = 1480; noccFunction();
				}
				break;

			case 12:
				EnterOuterAlt(_localctx, 12);
				{
				State = 1481; noccOperator();
				}
				break;

			case 13:
				EnterOuterAlt(_localctx, 13);
				{
				State = 1482; licenseCountFunction();
				}
				break;

			case 14:
				EnterOuterAlt(_localctx, 14);
				{
				State = 1483; licenseLeftFunction();
				}
				break;

			case 15:
				EnterOuterAlt(_localctx, 15);
				{
				State = 1484; licenseUsedFunction();
				}
				break;

			case 16:
				EnterOuterAlt(_localctx, 16);
				{
				State = 1485; ordFunction();
				}
				break;

			case 17:
				EnterOuterAlt(_localctx, 17);
				{
				State = 1486; totalMemoryFunction();
				}
				break;

			case 18:
				EnterOuterAlt(_localctx, 18);
				{
				State = 1487; freeMemoryFunction();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CompareFunctionContext : ParserRuleContext {
		public SimpleFormatContext left;
		public SimpleFormatContext right;
		public ITerminalNode COMPARE() { return GetToken(PftParser.COMPARE, 0); }
		public ITerminalNode COMMA() { return GetToken(PftParser.COMMA, 0); }
		public ITerminalNode RPAREN() { return GetToken(PftParser.RPAREN, 0); }
		public SimpleFormatContext simpleFormat(int i) {
			return GetRuleContext<SimpleFormatContext>(i);
		}
		public SimpleFormatContext[] simpleFormat() {
			return GetRuleContexts<SimpleFormatContext>();
		}
		public ITerminalNode LPAREN() { return GetToken(PftParser.LPAREN, 0); }
		public CompareFunctionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_compareFunction; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPftListener typedListener = listener as IPftListener;
			if (typedListener != null) typedListener.EnterCompareFunction(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPftListener typedListener = listener as IPftListener;
			if (typedListener != null) typedListener.ExitCompareFunction(this);
		}
	}

	[RuleVersion(0)]
	public CompareFunctionContext compareFunction() {
		CompareFunctionContext _localctx = new CompareFunctionContext(_ctx, State);
		EnterRule(_localctx, 324, RULE_compareFunction);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1490; Match(COMPARE);
			State = 1491; Match(LPAREN);
			State = 1492; _localctx.left = simpleFormat();
			State = 1493; Match(COMMA);
			State = 1494; _localctx.right = simpleFormat();
			State = 1495; Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FileSizeFunctionContext : ParserRuleContext {
		public CompositeListContext name;
		public ITerminalNode RPAREN() { return GetToken(PftParser.RPAREN, 0); }
		public ITerminalNode LPAREN() { return GetToken(PftParser.LPAREN, 0); }
		public ITerminalNode FILESIZE() { return GetToken(PftParser.FILESIZE, 0); }
		public CompositeListContext compositeList() {
			return GetRuleContext<CompositeListContext>(0);
		}
		public FileSizeFunctionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fileSizeFunction; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPftListener typedListener = listener as IPftListener;
			if (typedListener != null) typedListener.EnterFileSizeFunction(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPftListener typedListener = listener as IPftListener;
			if (typedListener != null) typedListener.ExitFileSizeFunction(this);
		}
	}

	[RuleVersion(0)]
	public FileSizeFunctionContext fileSizeFunction() {
		FileSizeFunctionContext _localctx = new FileSizeFunctionContext(_ctx, State);
		EnterRule(_localctx, 326, RULE_fileSizeFunction);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1497; Match(FILESIZE);
			State = 1498; Match(LPAREN);
			State = 1499; _localctx.name = compositeList();
			State = 1500; Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FreeMemoryFunctionContext : ParserRuleContext {
		public ITerminalNode RPAREN() { return GetToken(PftParser.RPAREN, 0); }
		public ITerminalNode LPAREN() { return GetToken(PftParser.LPAREN, 0); }
		public ITerminalNode FREEMEMORY() { return GetToken(PftParser.FREEMEMORY, 0); }
		public FreeMemoryFunctionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_freeMemoryFunction; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPftListener typedListener = listener as IPftListener;
			if (typedListener != null) typedListener.EnterFreeMemoryFunction(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPftListener typedListener = listener as IPftListener;
			if (typedListener != null) typedListener.ExitFreeMemoryFunction(this);
		}
	}

	[RuleVersion(0)]
	public FreeMemoryFunctionContext freeMemoryFunction() {
		FreeMemoryFunctionContext _localctx = new FreeMemoryFunctionContext(_ctx, State);
		EnterRule(_localctx, 328, RULE_freeMemoryFunction);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1502; Match(FREEMEMORY);
			State = 1505;
			switch ( Interpreter.AdaptivePredict(_input,73,_ctx) ) {
			case 1:
				{
				State = 1503; Match(LPAREN);
				State = 1504; Match(RPAREN);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IoccOperatorContext : ParserRuleContext {
		public ITerminalNode IOCC() { return GetToken(PftParser.IOCC, 0); }
		public IoccOperatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ioccOperator; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPftListener typedListener = listener as IPftListener;
			if (typedListener != null) typedListener.EnterIoccOperator(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPftListener typedListener = listener as IPftListener;
			if (typedListener != null) typedListener.ExitIoccOperator(this);
		}
	}

	[RuleVersion(0)]
	public IoccOperatorContext ioccOperator() {
		IoccOperatorContext _localctx = new IoccOperatorContext(_ctx, State);
		EnterRule(_localctx, 330, RULE_ioccOperator);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1507; Match(IOCC);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LFunctionContext : ParserRuleContext {
		public CompositeListContext text;
		public ITerminalNode L() { return GetToken(PftParser.L, 0); }
		public ITerminalNode RPAREN() { return GetToken(PftParser.RPAREN, 0); }
		public ITerminalNode LPAREN() { return GetToken(PftParser.LPAREN, 0); }
		public CompositeListContext compositeList() {
			return GetRuleContext<CompositeListContext>(0);
		}
		public LFunctionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_lFunction; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPftListener typedListener = listener as IPftListener;
			if (typedListener != null) typedListener.EnterLFunction(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPftListener typedListener = listener as IPftListener;
			if (typedListener != null) typedListener.ExitLFunction(this);
		}
	}

	[RuleVersion(0)]
	public LFunctionContext lFunction() {
		LFunctionContext _localctx = new LFunctionContext(_ctx, State);
		EnterRule(_localctx, 332, RULE_lFunction);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1509; Match(L);
			State = 1510; Match(LPAREN);
			State = 1511; _localctx.text = compositeList();
			State = 1512; Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LicenseCountFunctionContext : ParserRuleContext {
		public ITerminalNode RPAREN() { return GetToken(PftParser.RPAREN, 0); }
		public ITerminalNode LICENSECOUNT() { return GetToken(PftParser.LICENSECOUNT, 0); }
		public ITerminalNode LPAREN() { return GetToken(PftParser.LPAREN, 0); }
		public LicenseCountFunctionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_licenseCountFunction; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPftListener typedListener = listener as IPftListener;
			if (typedListener != null) typedListener.EnterLicenseCountFunction(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPftListener typedListener = listener as IPftListener;
			if (typedListener != null) typedListener.ExitLicenseCountFunction(this);
		}
	}

	[RuleVersion(0)]
	public LicenseCountFunctionContext licenseCountFunction() {
		LicenseCountFunctionContext _localctx = new LicenseCountFunctionContext(_ctx, State);
		EnterRule(_localctx, 334, RULE_licenseCountFunction);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1514; Match(LICENSECOUNT);
			State = 1517;
			switch ( Interpreter.AdaptivePredict(_input,74,_ctx) ) {
			case 1:
				{
				State = 1515; Match(LPAREN);
				State = 1516; Match(RPAREN);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LicenseLeftFunctionContext : ParserRuleContext {
		public ITerminalNode LICENSELEFT() { return GetToken(PftParser.LICENSELEFT, 0); }
		public ITerminalNode RPAREN() { return GetToken(PftParser.RPAREN, 0); }
		public ITerminalNode LPAREN() { return GetToken(PftParser.LPAREN, 0); }
		public LicenseLeftFunctionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_licenseLeftFunction; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPftListener typedListener = listener as IPftListener;
			if (typedListener != null) typedListener.EnterLicenseLeftFunction(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPftListener typedListener = listener as IPftListener;
			if (typedListener != null) typedListener.ExitLicenseLeftFunction(this);
		}
	}

	[RuleVersion(0)]
	public LicenseLeftFunctionContext licenseLeftFunction() {
		LicenseLeftFunctionContext _localctx = new LicenseLeftFunctionContext(_ctx, State);
		EnterRule(_localctx, 336, RULE_licenseLeftFunction);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1519; Match(LICENSELEFT);
			State = 1522;
			switch ( Interpreter.AdaptivePredict(_input,75,_ctx) ) {
			case 1:
				{
				State = 1520; Match(LPAREN);
				State = 1521; Match(RPAREN);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LicenseUsedFunctionContext : ParserRuleContext {
		public ITerminalNode RPAREN() { return GetToken(PftParser.RPAREN, 0); }
		public ITerminalNode LPAREN() { return GetToken(PftParser.LPAREN, 0); }
		public ITerminalNode LICENSEUSED() { return GetToken(PftParser.LICENSEUSED, 0); }
		public LicenseUsedFunctionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_licenseUsedFunction; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPftListener typedListener = listener as IPftListener;
			if (typedListener != null) typedListener.EnterLicenseUsedFunction(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPftListener typedListener = listener as IPftListener;
			if (typedListener != null) typedListener.ExitLicenseUsedFunction(this);
		}
	}

	[RuleVersion(0)]
	public LicenseUsedFunctionContext licenseUsedFunction() {
		LicenseUsedFunctionContext _localctx = new LicenseUsedFunctionContext(_ctx, State);
		EnterRule(_localctx, 338, RULE_licenseUsedFunction);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1524; Match(LICENSEUSED);
			State = 1527;
			switch ( Interpreter.AdaptivePredict(_input,76,_ctx) ) {
			case 1:
				{
				State = 1525; Match(LPAREN);
				State = 1526; Match(RPAREN);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MaxMfnFunctionContext : ParserRuleContext {
		public ITerminalNode RPAREN() { return GetToken(PftParser.RPAREN, 0); }
		public ITerminalNode LPAREN() { return GetToken(PftParser.LPAREN, 0); }
		public ITerminalNode MAXMFN() { return GetToken(PftParser.MAXMFN, 0); }
		public MaxMfnFunctionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_maxMfnFunction; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPftListener typedListener = listener as IPftListener;
			if (typedListener != null) typedListener.EnterMaxMfnFunction(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPftListener typedListener = listener as IPftListener;
			if (typedListener != null) typedListener.ExitMaxMfnFunction(this);
		}
	}

	[RuleVersion(0)]
	public MaxMfnFunctionContext maxMfnFunction() {
		MaxMfnFunctionContext _localctx = new MaxMfnFunctionContext(_ctx, State);
		EnterRule(_localctx, 340, RULE_maxMfnFunction);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1529; Match(MAXMFN);
			State = 1532;
			_la = _input.La(1);
			if (_la==LPAREN) {
				{
				State = 1530; Match(LPAREN);
				State = 1531; Match(RPAREN);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NoccFunctionContext : ParserRuleContext {
		public ITerminalNode NOCC() { return GetToken(PftParser.NOCC, 0); }
		public ITerminalNode RPAREN() { return GetToken(PftParser.RPAREN, 0); }
		public ITerminalNode LPAREN() { return GetToken(PftParser.LPAREN, 0); }
		public ITerminalNode FIELD() { return GetToken(PftParser.FIELD, 0); }
		public NoccFunctionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_noccFunction; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPftListener typedListener = listener as IPftListener;
			if (typedListener != null) typedListener.EnterNoccFunction(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPftListener typedListener = listener as IPftListener;
			if (typedListener != null) typedListener.ExitNoccFunction(this);
		}
	}

	[RuleVersion(0)]
	public NoccFunctionContext noccFunction() {
		NoccFunctionContext _localctx = new NoccFunctionContext(_ctx, State);
		EnterRule(_localctx, 342, RULE_noccFunction);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1534; Match(NOCC);
			State = 1535; Match(LPAREN);
			State = 1536; Match(FIELD);
			State = 1537; Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NoccOperatorContext : ParserRuleContext {
		public ITerminalNode NOCC() { return GetToken(PftParser.NOCC, 0); }
		public NoccOperatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_noccOperator; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPftListener typedListener = listener as IPftListener;
			if (typedListener != null) typedListener.EnterNoccOperator(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPftListener typedListener = listener as IPftListener;
			if (typedListener != null) typedListener.ExitNoccOperator(this);
		}
	}

	[RuleVersion(0)]
	public NoccOperatorContext noccOperator() {
		NoccOperatorContext _localctx = new NoccOperatorContext(_ctx, State);
		EnterRule(_localctx, 344, RULE_noccOperator);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1539; Match(NOCC);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NpostFunctionContext : ParserRuleContext {
		public CompositeListContext text;
		public ITerminalNode RPAREN() { return GetToken(PftParser.RPAREN, 0); }
		public ITerminalNode NPOST() { return GetToken(PftParser.NPOST, 0); }
		public ITerminalNode LPAREN() { return GetToken(PftParser.LPAREN, 0); }
		public CompositeListContext compositeList() {
			return GetRuleContext<CompositeListContext>(0);
		}
		public NpostFunctionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_npostFunction; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPftListener typedListener = listener as IPftListener;
			if (typedListener != null) typedListener.EnterNpostFunction(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPftListener typedListener = listener as IPftListener;
			if (typedListener != null) typedListener.ExitNpostFunction(this);
		}
	}

	[RuleVersion(0)]
	public NpostFunctionContext npostFunction() {
		NpostFunctionContext _localctx = new NpostFunctionContext(_ctx, State);
		EnterRule(_localctx, 346, RULE_npostFunction);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1541; Match(NPOST);
			State = 1542; Match(LPAREN);
			State = 1543; _localctx.text = compositeList();
			State = 1544; Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OrdFunctionContext : ParserRuleContext {
		public CompositeListContext text;
		public ITerminalNode RPAREN() { return GetToken(PftParser.RPAREN, 0); }
		public ITerminalNode ORD() { return GetToken(PftParser.ORD, 0); }
		public ITerminalNode LPAREN() { return GetToken(PftParser.LPAREN, 0); }
		public CompositeListContext compositeList() {
			return GetRuleContext<CompositeListContext>(0);
		}
		public OrdFunctionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ordFunction; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPftListener typedListener = listener as IPftListener;
			if (typedListener != null) typedListener.EnterOrdFunction(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPftListener typedListener = listener as IPftListener;
			if (typedListener != null) typedListener.ExitOrdFunction(this);
		}
	}

	[RuleVersion(0)]
	public OrdFunctionContext ordFunction() {
		OrdFunctionContext _localctx = new OrdFunctionContext(_ctx, State);
		EnterRule(_localctx, 348, RULE_ordFunction);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1546; Match(ORD);
			State = 1547; Match(LPAREN);
			State = 1548; _localctx.text = compositeList();
			State = 1549; Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RavrFunctionContext : ParserRuleContext {
		public CompositeListContext text;
		public ITerminalNode RSUM() { return GetToken(PftParser.RSUM, 0); }
		public ITerminalNode RPAREN() { return GetToken(PftParser.RPAREN, 0); }
		public ITerminalNode LPAREN() { return GetToken(PftParser.LPAREN, 0); }
		public CompositeListContext compositeList() {
			return GetRuleContext<CompositeListContext>(0);
		}
		public RavrFunctionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ravrFunction; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPftListener typedListener = listener as IPftListener;
			if (typedListener != null) typedListener.EnterRavrFunction(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPftListener typedListener = listener as IPftListener;
			if (typedListener != null) typedListener.ExitRavrFunction(this);
		}
	}

	[RuleVersion(0)]
	public RavrFunctionContext ravrFunction() {
		RavrFunctionContext _localctx = new RavrFunctionContext(_ctx, State);
		EnterRule(_localctx, 350, RULE_ravrFunction);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1551; Match(RSUM);
			State = 1552; Match(LPAREN);
			State = 1553; _localctx.text = compositeList();
			State = 1554; Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RmaxFunctionContext : ParserRuleContext {
		public CompositeListContext text;
		public ITerminalNode RSUM() { return GetToken(PftParser.RSUM, 0); }
		public ITerminalNode RPAREN() { return GetToken(PftParser.RPAREN, 0); }
		public ITerminalNode LPAREN() { return GetToken(PftParser.LPAREN, 0); }
		public CompositeListContext compositeList() {
			return GetRuleContext<CompositeListContext>(0);
		}
		public RmaxFunctionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_rmaxFunction; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPftListener typedListener = listener as IPftListener;
			if (typedListener != null) typedListener.EnterRmaxFunction(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPftListener typedListener = listener as IPftListener;
			if (typedListener != null) typedListener.ExitRmaxFunction(this);
		}
	}

	[RuleVersion(0)]
	public RmaxFunctionContext rmaxFunction() {
		RmaxFunctionContext _localctx = new RmaxFunctionContext(_ctx, State);
		EnterRule(_localctx, 352, RULE_rmaxFunction);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1556; Match(RSUM);
			State = 1557; Match(LPAREN);
			State = 1558; _localctx.text = compositeList();
			State = 1559; Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RminFunctionContext : ParserRuleContext {
		public CompositeListContext text;
		public ITerminalNode RSUM() { return GetToken(PftParser.RSUM, 0); }
		public ITerminalNode RPAREN() { return GetToken(PftParser.RPAREN, 0); }
		public ITerminalNode LPAREN() { return GetToken(PftParser.LPAREN, 0); }
		public CompositeListContext compositeList() {
			return GetRuleContext<CompositeListContext>(0);
		}
		public RminFunctionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_rminFunction; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPftListener typedListener = listener as IPftListener;
			if (typedListener != null) typedListener.EnterRminFunction(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPftListener typedListener = listener as IPftListener;
			if (typedListener != null) typedListener.ExitRminFunction(this);
		}
	}

	[RuleVersion(0)]
	public RminFunctionContext rminFunction() {
		RminFunctionContext _localctx = new RminFunctionContext(_ctx, State);
		EnterRule(_localctx, 354, RULE_rminFunction);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1561; Match(RSUM);
			State = 1562; Match(LPAREN);
			State = 1563; _localctx.text = compositeList();
			State = 1564; Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RsumFunctionContext : ParserRuleContext {
		public CompositeListContext text;
		public ITerminalNode RSUM() { return GetToken(PftParser.RSUM, 0); }
		public ITerminalNode RPAREN() { return GetToken(PftParser.RPAREN, 0); }
		public ITerminalNode LPAREN() { return GetToken(PftParser.LPAREN, 0); }
		public CompositeListContext compositeList() {
			return GetRuleContext<CompositeListContext>(0);
		}
		public RsumFunctionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_rsumFunction; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPftListener typedListener = listener as IPftListener;
			if (typedListener != null) typedListener.EnterRsumFunction(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPftListener typedListener = listener as IPftListener;
			if (typedListener != null) typedListener.ExitRsumFunction(this);
		}
	}

	[RuleVersion(0)]
	public RsumFunctionContext rsumFunction() {
		RsumFunctionContext _localctx = new RsumFunctionContext(_ctx, State);
		EnterRule(_localctx, 356, RULE_rsumFunction);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1566; Match(RSUM);
			State = 1567; Match(LPAREN);
			State = 1568; _localctx.text = compositeList();
			State = 1569; Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SizeFunctionContext : ParserRuleContext {
		public CompositeListContext text;
		public ITerminalNode SIZE() { return GetToken(PftParser.SIZE, 0); }
		public ITerminalNode RPAREN() { return GetToken(PftParser.RPAREN, 0); }
		public ITerminalNode LPAREN() { return GetToken(PftParser.LPAREN, 0); }
		public CompositeListContext compositeList() {
			return GetRuleContext<CompositeListContext>(0);
		}
		public SizeFunctionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_sizeFunction; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPftListener typedListener = listener as IPftListener;
			if (typedListener != null) typedListener.EnterSizeFunction(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPftListener typedListener = listener as IPftListener;
			if (typedListener != null) typedListener.ExitSizeFunction(this);
		}
	}

	[RuleVersion(0)]
	public SizeFunctionContext sizeFunction() {
		SizeFunctionContext _localctx = new SizeFunctionContext(_ctx, State);
		EnterRule(_localctx, 358, RULE_sizeFunction);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1571; Match(SIZE);
			State = 1572; Match(LPAREN);
			State = 1573; _localctx.text = compositeList();
			State = 1574; Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TotalMemoryFunctionContext : ParserRuleContext {
		public ITerminalNode TOTALMEMORY() { return GetToken(PftParser.TOTALMEMORY, 0); }
		public ITerminalNode RPAREN() { return GetToken(PftParser.RPAREN, 0); }
		public ITerminalNode LPAREN() { return GetToken(PftParser.LPAREN, 0); }
		public TotalMemoryFunctionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_totalMemoryFunction; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPftListener typedListener = listener as IPftListener;
			if (typedListener != null) typedListener.EnterTotalMemoryFunction(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPftListener typedListener = listener as IPftListener;
			if (typedListener != null) typedListener.ExitTotalMemoryFunction(this);
		}
	}

	[RuleVersion(0)]
	public TotalMemoryFunctionContext totalMemoryFunction() {
		TotalMemoryFunctionContext _localctx = new TotalMemoryFunctionContext(_ctx, State);
		EnterRule(_localctx, 360, RULE_totalMemoryFunction);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1576; Match(TOTALMEMORY);
			State = 1579;
			switch ( Interpreter.AdaptivePredict(_input,78,_ctx) ) {
			case 1:
				{
				State = 1577; Match(LPAREN);
				State = 1578; Match(RPAREN);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ValFunctionContext : ParserRuleContext {
		public CompositeListContext text;
		public ITerminalNode VAL() { return GetToken(PftParser.VAL, 0); }
		public ITerminalNode RPAREN() { return GetToken(PftParser.RPAREN, 0); }
		public ITerminalNode LPAREN() { return GetToken(PftParser.LPAREN, 0); }
		public CompositeListContext compositeList() {
			return GetRuleContext<CompositeListContext>(0);
		}
		public ValFunctionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_valFunction; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPftListener typedListener = listener as IPftListener;
			if (typedListener != null) typedListener.EnterValFunction(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPftListener typedListener = listener as IPftListener;
			if (typedListener != null) typedListener.ExitValFunction(this);
		}
	}

	[RuleVersion(0)]
	public ValFunctionContext valFunction() {
		ValFunctionContext _localctx = new ValFunctionContext(_ctx, State);
		EnterRule(_localctx, 362, RULE_valFunction);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1581; Match(VAL);
			State = 1582; Match(LPAREN);
			State = 1583; _localctx.text = compositeList();
			State = 1584; Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Val2FunctionContext : ParserRuleContext {
		public CompositeListContext text;
		public ITerminalNode RPAREN() { return GetToken(PftParser.RPAREN, 0); }
		public ITerminalNode VAL2() { return GetToken(PftParser.VAL2, 0); }
		public ITerminalNode LPAREN() { return GetToken(PftParser.LPAREN, 0); }
		public CompositeListContext compositeList() {
			return GetRuleContext<CompositeListContext>(0);
		}
		public Val2FunctionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_val2Function; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPftListener typedListener = listener as IPftListener;
			if (typedListener != null) typedListener.EnterVal2Function(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPftListener typedListener = listener as IPftListener;
			if (typedListener != null) typedListener.ExitVal2Function(this);
		}
	}

	[RuleVersion(0)]
	public Val2FunctionContext val2Function() {
		Val2FunctionContext _localctx = new Val2FunctionContext(_ctx, State);
		EnterRule(_localctx, 364, RULE_val2Function);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1586; Match(VAL2);
			State = 1587; Match(LPAREN);
			State = 1588; _localctx.text = compositeList();
			State = 1589; Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WorkingSetFunctionContext : ParserRuleContext {
		public ITerminalNode RPAREN() { return GetToken(PftParser.RPAREN, 0); }
		public ITerminalNode LPAREN() { return GetToken(PftParser.LPAREN, 0); }
		public ITerminalNode WORKINGSET() { return GetToken(PftParser.WORKINGSET, 0); }
		public WorkingSetFunctionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_workingSetFunction; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPftListener typedListener = listener as IPftListener;
			if (typedListener != null) typedListener.EnterWorkingSetFunction(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPftListener typedListener = listener as IPftListener;
			if (typedListener != null) typedListener.ExitWorkingSetFunction(this);
		}
	}

	[RuleVersion(0)]
	public WorkingSetFunctionContext workingSetFunction() {
		WorkingSetFunctionContext _localctx = new WorkingSetFunctionContext(_ctx, State);
		EnterRule(_localctx, 366, RULE_workingSetFunction);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1591; Match(WORKINGSET);
			State = 1594;
			switch ( Interpreter.AdaptivePredict(_input,79,_ctx) ) {
			case 1:
				{
				State = 1592; Match(LPAREN);
				State = 1593; Match(RPAREN);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConnectedFunctionContext : ParserRuleContext {
		public ITerminalNode RPAREN() { return GetToken(PftParser.RPAREN, 0); }
		public ITerminalNode LPAREN() { return GetToken(PftParser.LPAREN, 0); }
		public ITerminalNode CONNECTED() { return GetToken(PftParser.CONNECTED, 0); }
		public ConnectedFunctionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_connectedFunction; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPftListener typedListener = listener as IPftListener;
			if (typedListener != null) typedListener.EnterConnectedFunction(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPftListener typedListener = listener as IPftListener;
			if (typedListener != null) typedListener.ExitConnectedFunction(this);
		}
	}

	[RuleVersion(0)]
	public ConnectedFunctionContext connectedFunction() {
		ConnectedFunctionContext _localctx = new ConnectedFunctionContext(_ctx, State);
		EnterRule(_localctx, 368, RULE_connectedFunction);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1596; Match(CONNECTED);
			State = 1599;
			switch ( Interpreter.AdaptivePredict(_input,80,_ctx) ) {
			case 1:
				{
				State = 1597; Match(LPAREN);
				State = 1598; Match(RPAREN);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DeletedFunctionContext : ParserRuleContext {
		public ITerminalNode RPAREN() { return GetToken(PftParser.RPAREN, 0); }
		public ITerminalNode LPAREN() { return GetToken(PftParser.LPAREN, 0); }
		public ITerminalNode DELETED() { return GetToken(PftParser.DELETED, 0); }
		public DeletedFunctionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_deletedFunction; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPftListener typedListener = listener as IPftListener;
			if (typedListener != null) typedListener.EnterDeletedFunction(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPftListener typedListener = listener as IPftListener;
			if (typedListener != null) typedListener.ExitDeletedFunction(this);
		}
	}

	[RuleVersion(0)]
	public DeletedFunctionContext deletedFunction() {
		DeletedFunctionContext _localctx = new DeletedFunctionContext(_ctx, State);
		EnterRule(_localctx, 370, RULE_deletedFunction);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1601; Match(DELETED);
			State = 1604;
			switch ( Interpreter.AdaptivePredict(_input,81,_ctx) ) {
			case 1:
				{
				State = 1602; Match(LPAREN);
				State = 1603; Match(RPAREN);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EndsWithFunctionContext : ParserRuleContext {
		public PrimaryElementContext arg1;
		public PrimaryElementContext arg2;
		public PrimaryElementContext primaryElement(int i) {
			return GetRuleContext<PrimaryElementContext>(i);
		}
		public ITerminalNode COMMA() { return GetToken(PftParser.COMMA, 0); }
		public ITerminalNode RPAREN() { return GetToken(PftParser.RPAREN, 0); }
		public ITerminalNode LPAREN() { return GetToken(PftParser.LPAREN, 0); }
		public PrimaryElementContext[] primaryElement() {
			return GetRuleContexts<PrimaryElementContext>();
		}
		public ITerminalNode ENDSWITH() { return GetToken(PftParser.ENDSWITH, 0); }
		public EndsWithFunctionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_endsWithFunction; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPftListener typedListener = listener as IPftListener;
			if (typedListener != null) typedListener.EnterEndsWithFunction(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPftListener typedListener = listener as IPftListener;
			if (typedListener != null) typedListener.ExitEndsWithFunction(this);
		}
	}

	[RuleVersion(0)]
	public EndsWithFunctionContext endsWithFunction() {
		EndsWithFunctionContext _localctx = new EndsWithFunctionContext(_ctx, State);
		EnterRule(_localctx, 372, RULE_endsWithFunction);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1606; Match(ENDSWITH);
			State = 1607; Match(LPAREN);
			State = 1608; _localctx.arg1 = primaryElement();
			State = 1609; Match(COMMA);
			State = 1610; _localctx.arg2 = primaryElement();
			State = 1611; Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExistFunctionContext : ParserRuleContext {
		public ITerminalNode ID() { return GetToken(PftParser.ID, 0); }
		public ITerminalNode RPAREN() { return GetToken(PftParser.RPAREN, 0); }
		public ITerminalNode EXIST() { return GetToken(PftParser.EXIST, 0); }
		public SimpleFormatContext simpleFormat() {
			return GetRuleContext<SimpleFormatContext>(0);
		}
		public ITerminalNode LPAREN() { return GetToken(PftParser.LPAREN, 0); }
		public ExistFunctionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_existFunction; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPftListener typedListener = listener as IPftListener;
			if (typedListener != null) typedListener.EnterExistFunction(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPftListener typedListener = listener as IPftListener;
			if (typedListener != null) typedListener.ExitExistFunction(this);
		}
	}

	[RuleVersion(0)]
	public ExistFunctionContext existFunction() {
		ExistFunctionContext _localctx = new ExistFunctionContext(_ctx, State);
		EnterRule(_localctx, 374, RULE_existFunction);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1613; Match(EXIST);
			State = 1614; Match(LPAREN);
			State = 1617;
			switch ( Interpreter.AdaptivePredict(_input,82,_ctx) ) {
			case 1:
				{
				State = 1615; Match(ID);
				}
				break;

			case 2:
				{
				State = 1616; simpleFormat();
				}
				break;
			}
			State = 1619; Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FieldPresenseContext : ParserRuleContext {
		public ITerminalNode RPAREN() { return GetToken(PftParser.RPAREN, 0); }
		public ITerminalNode A() { return GetToken(PftParser.A, 0); }
		public ITerminalNode LPAREN() { return GetToken(PftParser.LPAREN, 0); }
		public ITerminalNode FIELD() { return GetToken(PftParser.FIELD, 0); }
		public ITerminalNode P() { return GetToken(PftParser.P, 0); }
		public FieldPresenseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fieldPresense; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPftListener typedListener = listener as IPftListener;
			if (typedListener != null) typedListener.EnterFieldPresense(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPftListener typedListener = listener as IPftListener;
			if (typedListener != null) typedListener.ExitFieldPresense(this);
		}
	}

	[RuleVersion(0)]
	public FieldPresenseContext fieldPresense() {
		FieldPresenseContext _localctx = new FieldPresenseContext(_ctx, State);
		EnterRule(_localctx, 376, RULE_fieldPresense);
		try {
			State = 1629;
			switch (_input.La(1)) {
			case P:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1621; Match(P);
				State = 1622; Match(LPAREN);
				State = 1623; Match(FIELD);
				State = 1624; Match(RPAREN);
				}
				break;
			case A:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1625; Match(A);
				State = 1626; Match(LPAREN);
				State = 1627; Match(FIELD);
				State = 1628; Match(RPAREN);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FileExistFunctionContext : ParserRuleContext {
		public CompositeListContext name;
		public ITerminalNode FILEEXIST() { return GetToken(PftParser.FILEEXIST, 0); }
		public ITerminalNode RPAREN() { return GetToken(PftParser.RPAREN, 0); }
		public ITerminalNode LPAREN() { return GetToken(PftParser.LPAREN, 0); }
		public CompositeListContext compositeList() {
			return GetRuleContext<CompositeListContext>(0);
		}
		public FileExistFunctionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fileExistFunction; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPftListener typedListener = listener as IPftListener;
			if (typedListener != null) typedListener.EnterFileExistFunction(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPftListener typedListener = listener as IPftListener;
			if (typedListener != null) typedListener.ExitFileExistFunction(this);
		}
	}

	[RuleVersion(0)]
	public FileExistFunctionContext fileExistFunction() {
		FileExistFunctionContext _localctx = new FileExistFunctionContext(_ctx, State);
		EnterRule(_localctx, 378, RULE_fileExistFunction);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1631; Match(FILEEXIST);
			State = 1632; Match(LPAREN);
			State = 1633; _localctx.name = compositeList();
			State = 1634; Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class HaveFunctionContext : ParserRuleContext {
		public CompositeListContext text;
		public ITerminalNode HAVE() { return GetToken(PftParser.HAVE, 0); }
		public ITerminalNode RPAREN() { return GetToken(PftParser.RPAREN, 0); }
		public ITerminalNode LPAREN() { return GetToken(PftParser.LPAREN, 0); }
		public CompositeListContext compositeList() {
			return GetRuleContext<CompositeListContext>(0);
		}
		public HaveFunctionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_haveFunction; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPftListener typedListener = listener as IPftListener;
			if (typedListener != null) typedListener.EnterHaveFunction(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPftListener typedListener = listener as IPftListener;
			if (typedListener != null) typedListener.ExitHaveFunction(this);
		}
	}

	[RuleVersion(0)]
	public HaveFunctionContext haveFunction() {
		HaveFunctionContext _localctx = new HaveFunctionContext(_ctx, State);
		EnterRule(_localctx, 380, RULE_haveFunction);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1636; Match(HAVE);
			State = 1637; Match(LPAREN);
			State = 1638; _localctx.text = compositeList();
			State = 1639; Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InteractiveFunctionContext : ParserRuleContext {
		public ITerminalNode INTERACTIVE() { return GetToken(PftParser.INTERACTIVE, 0); }
		public ITerminalNode RPAREN() { return GetToken(PftParser.RPAREN, 0); }
		public ITerminalNode LPAREN() { return GetToken(PftParser.LPAREN, 0); }
		public InteractiveFunctionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_interactiveFunction; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPftListener typedListener = listener as IPftListener;
			if (typedListener != null) typedListener.EnterInteractiveFunction(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPftListener typedListener = listener as IPftListener;
			if (typedListener != null) typedListener.ExitInteractiveFunction(this);
		}
	}

	[RuleVersion(0)]
	public InteractiveFunctionContext interactiveFunction() {
		InteractiveFunctionContext _localctx = new InteractiveFunctionContext(_ctx, State);
		EnterRule(_localctx, 382, RULE_interactiveFunction);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1641; Match(INTERACTIVE);
			State = 1644;
			switch ( Interpreter.AdaptivePredict(_input,84,_ctx) ) {
			case 1:
				{
				State = 1642; Match(LPAREN);
				State = 1643; Match(RPAREN);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StartsWithFunctionContext : ParserRuleContext {
		public PrimaryElementContext arg1;
		public PrimaryElementContext arg2;
		public PrimaryElementContext primaryElement(int i) {
			return GetRuleContext<PrimaryElementContext>(i);
		}
		public ITerminalNode COMMA() { return GetToken(PftParser.COMMA, 0); }
		public ITerminalNode STARTSWITH() { return GetToken(PftParser.STARTSWITH, 0); }
		public ITerminalNode RPAREN() { return GetToken(PftParser.RPAREN, 0); }
		public ITerminalNode LPAREN() { return GetToken(PftParser.LPAREN, 0); }
		public PrimaryElementContext[] primaryElement() {
			return GetRuleContexts<PrimaryElementContext>();
		}
		public StartsWithFunctionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_startsWithFunction; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPftListener typedListener = listener as IPftListener;
			if (typedListener != null) typedListener.EnterStartsWithFunction(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPftListener typedListener = listener as IPftListener;
			if (typedListener != null) typedListener.ExitStartsWithFunction(this);
		}
	}

	[RuleVersion(0)]
	public StartsWithFunctionContext startsWithFunction() {
		StartsWithFunctionContext _localctx = new StartsWithFunctionContext(_ctx, State);
		EnterRule(_localctx, 384, RULE_startsWithFunction);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1646; Match(STARTSWITH);
			State = 1647; Match(LPAREN);
			State = 1648; _localctx.arg1 = primaryElement();
			State = 1649; Match(COMMA);
			State = 1650; _localctx.arg2 = primaryElement();
			State = 1651; Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class X64FunctionContext : ParserRuleContext {
		public ITerminalNode X64() { return GetToken(PftParser.X64, 0); }
		public ITerminalNode RPAREN() { return GetToken(PftParser.RPAREN, 0); }
		public ITerminalNode LPAREN() { return GetToken(PftParser.LPAREN, 0); }
		public X64FunctionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_x64Function; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPftListener typedListener = listener as IPftListener;
			if (typedListener != null) typedListener.EnterX64Function(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPftListener typedListener = listener as IPftListener;
			if (typedListener != null) typedListener.ExitX64Function(this);
		}
	}

	[RuleVersion(0)]
	public X64FunctionContext x64Function() {
		X64FunctionContext _localctx = new X64FunctionContext(_ctx, State);
		EnterRule(_localctx, 386, RULE_x64Function);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1653; Match(X64);
			State = 1656;
			switch ( Interpreter.AdaptivePredict(_input,85,_ctx) ) {
			case 1:
				{
				State = 1654; Match(LPAREN);
				State = 1655; Match(RPAREN);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UnusedContext : ParserRuleContext {
		public ConditionalLiteralContext conditionalLiteral() {
			return GetRuleContext<ConditionalLiteralContext>(0);
		}
		public RepeatableLiteralContext repeatableLiteral() {
			return GetRuleContext<RepeatableLiteralContext>(0);
		}
		public UnusedContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_unused; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPftListener typedListener = listener as IPftListener;
			if (typedListener != null) typedListener.EnterUnused(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPftListener typedListener = listener as IPftListener;
			if (typedListener != null) typedListener.ExitUnused(this);
		}
	}

	[RuleVersion(0)]
	public UnusedContext unused() {
		UnusedContext _localctx = new UnusedContext(_ctx, State);
		EnterRule(_localctx, 388, RULE_unused);
		try {
			State = 1660;
			switch (_input.La(1)) {
			case CONDITIONAL:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1658; conditionalLiteral();
				}
				break;
			case REPEATABLE:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1659; repeatableLiteral();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 148: return condition_sempred((ConditionContext)_localctx, predIndex);

		case 154: return arithExpr_sempred((ArithExprContext)_localctx, predIndex);
		}
		return true;
	}
	private bool condition_sempred(ConditionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(_ctx, 6);
		}
		return true;
	}
	private bool arithExpr_sempred(ArithExprContext _localctx, int predIndex) {
		switch (predIndex) {
		case 1: return Precpred(_ctx, 3);

		case 2: return Precpred(_ctx, 2);
		}
		return true;
	}

	public static readonly string _serializedATN =
		"\x3\xAF6F\x8320\x479D\xB75C\x4880\x1605\x191C\xAB37\x3\xCA\x681\x4\x2"+
		"\t\x2\x4\x3\t\x3\x4\x4\t\x4\x4\x5\t\x5\x4\x6\t\x6\x4\a\t\a\x4\b\t\b\x4"+
		"\t\t\t\x4\n\t\n\x4\v\t\v\x4\f\t\f\x4\r\t\r\x4\xE\t\xE\x4\xF\t\xF\x4\x10"+
		"\t\x10\x4\x11\t\x11\x4\x12\t\x12\x4\x13\t\x13\x4\x14\t\x14\x4\x15\t\x15"+
		"\x4\x16\t\x16\x4\x17\t\x17\x4\x18\t\x18\x4\x19\t\x19\x4\x1A\t\x1A\x4\x1B"+
		"\t\x1B\x4\x1C\t\x1C\x4\x1D\t\x1D\x4\x1E\t\x1E\x4\x1F\t\x1F\x4 \t \x4!"+
		"\t!\x4\"\t\"\x4#\t#\x4$\t$\x4%\t%\x4&\t&\x4\'\t\'\x4(\t(\x4)\t)\x4*\t"+
		"*\x4+\t+\x4,\t,\x4-\t-\x4.\t.\x4/\t/\x4\x30\t\x30\x4\x31\t\x31\x4\x32"+
		"\t\x32\x4\x33\t\x33\x4\x34\t\x34\x4\x35\t\x35\x4\x36\t\x36\x4\x37\t\x37"+
		"\x4\x38\t\x38\x4\x39\t\x39\x4:\t:\x4;\t;\x4<\t<\x4=\t=\x4>\t>\x4?\t?\x4"+
		"@\t@\x4\x41\t\x41\x4\x42\t\x42\x4\x43\t\x43\x4\x44\t\x44\x4\x45\t\x45"+
		"\x4\x46\t\x46\x4G\tG\x4H\tH\x4I\tI\x4J\tJ\x4K\tK\x4L\tL\x4M\tM\x4N\tN"+
		"\x4O\tO\x4P\tP\x4Q\tQ\x4R\tR\x4S\tS\x4T\tT\x4U\tU\x4V\tV\x4W\tW\x4X\t"+
		"X\x4Y\tY\x4Z\tZ\x4[\t[\x4\\\t\\\x4]\t]\x4^\t^\x4_\t_\x4`\t`\x4\x61\t\x61"+
		"\x4\x62\t\x62\x4\x63\t\x63\x4\x64\t\x64\x4\x65\t\x65\x4\x66\t\x66\x4g"+
		"\tg\x4h\th\x4i\ti\x4j\tj\x4k\tk\x4l\tl\x4m\tm\x4n\tn\x4o\to\x4p\tp\x4"+
		"q\tq\x4r\tr\x4s\ts\x4t\tt\x4u\tu\x4v\tv\x4w\tw\x4x\tx\x4y\ty\x4z\tz\x4"+
		"{\t{\x4|\t|\x4}\t}\x4~\t~\x4\x7F\t\x7F\x4\x80\t\x80\x4\x81\t\x81\x4\x82"+
		"\t\x82\x4\x83\t\x83\x4\x84\t\x84\x4\x85\t\x85\x4\x86\t\x86\x4\x87\t\x87"+
		"\x4\x88\t\x88\x4\x89\t\x89\x4\x8A\t\x8A\x4\x8B\t\x8B\x4\x8C\t\x8C\x4\x8D"+
		"\t\x8D\x4\x8E\t\x8E\x4\x8F\t\x8F\x4\x90\t\x90\x4\x91\t\x91\x4\x92\t\x92"+
		"\x4\x93\t\x93\x4\x94\t\x94\x4\x95\t\x95\x4\x96\t\x96\x4\x97\t\x97\x4\x98"+
		"\t\x98\x4\x99\t\x99\x4\x9A\t\x9A\x4\x9B\t\x9B\x4\x9C\t\x9C\x4\x9D\t\x9D"+
		"\x4\x9E\t\x9E\x4\x9F\t\x9F\x4\xA0\t\xA0\x4\xA1\t\xA1\x4\xA2\t\xA2\x4\xA3"+
		"\t\xA3\x4\xA4\t\xA4\x4\xA5\t\xA5\x4\xA6\t\xA6\x4\xA7\t\xA7\x4\xA8\t\xA8"+
		"\x4\xA9\t\xA9\x4\xAA\t\xAA\x4\xAB\t\xAB\x4\xAC\t\xAC\x4\xAD\t\xAD\x4\xAE"+
		"\t\xAE\x4\xAF\t\xAF\x4\xB0\t\xB0\x4\xB1\t\xB1\x4\xB2\t\xB2\x4\xB3\t\xB3"+
		"\x4\xB4\t\xB4\x4\xB5\t\xB5\x4\xB6\t\xB6\x4\xB7\t\xB7\x4\xB8\t\xB8\x4\xB9"+
		"\t\xB9\x4\xBA\t\xBA\x4\xBB\t\xBB\x4\xBC\t\xBC\x4\xBD\t\xBD\x4\xBE\t\xBE"+
		"\x4\xBF\t\xBF\x4\xC0\t\xC0\x4\xC1\t\xC1\x4\xC2\t\xC2\x4\xC3\t\xC3\x4\xC4"+
		"\t\xC4\x3\x2\x5\x2\x18A\n\x2\x3\x2\a\x2\x18D\n\x2\f\x2\xE\x2\x190\v\x2"+
		"\x3\x2\x3\x2\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3"+
		"\x3\x3\x3\x3\x3\x5\x3\x1A0\n\x3\x3\x4\a\x4\x1A3\n\x4\f\x4\xE\x4\x1A6\v"+
		"\x4\x3\x5\x6\x5\x1A9\n\x5\r\x5\xE\x5\x1AA\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6"+
		"\x3\x6\x6\x6\x1B3\n\x6\r\x6\xE\x6\x1B4\x3\x6\x3\x6\x3\a\x3\a\x3\a\x3\a"+
		"\x3\a\x3\b\x3\b\x3\b\x3\b\x3\b\x3\t\x3\t\x3\t\x3\t\x3\t\x3\n\x3\n\x3\n"+
		"\x3\n\x3\n\x3\v\x3\v\x3\f\x3\f\x5\f\x1D1\n\f\x3\r\x3\r\x3\r\x3\r\x3\r"+
		"\x3\xE\x3\xE\x3\xE\x6\xE\x1DB\n\xE\r\xE\xE\xE\x1DC\x3\xE\x3\xE\x5\xE\x1E1"+
		"\n\xE\x3\xE\x3\xE\x3\xF\x3\xF\x3\xF\x3\xF\x3\xF\x3\xF\x3\xF\x3\xF\x3\xF"+
		"\x3\xF\x3\xF\x3\xF\x3\xF\x3\xF\x3\xF\x3\xF\x3\xF\a\xF\x1F6\n\xF\f\xF\xE"+
		"\xF\x1F9\v\xF\x3\xF\x3\xF\x3\x10\x3\x10\x3\x10\x3\x10\x3\x10\x3\x10\x3"+
		"\x10\x3\x10\x3\x10\x3\x10\x3\x10\x3\x10\x3\x10\x3\x10\a\x10\x20B\n\x10"+
		"\f\x10\xE\x10\x20E\v\x10\x3\x10\x3\x10\x3\x11\x3\x11\x3\x11\x3\x11\x3"+
		"\x11\x3\x11\x6\x11\x218\n\x11\r\x11\xE\x11\x219\x3\x11\x3\x11\x5\x11\x21E"+
		"\n\x11\x3\x11\x3\x11\x3\x12\x3\x12\x3\x12\x3\x12\x3\x12\x3\x12\x3\x12"+
		"\x3\x12\x3\x13\x3\x13\x3\x13\a\x13\x22D\n\x13\f\x13\xE\x13\x230\v\x13"+
		"\x5\x13\x232\n\x13\x3\x14\x3\x14\x3\x14\x3\x14\x3\x14\x3\x14\x3\x14\x3"+
		"\x14\x3\x14\x3\x14\a\x14\x23E\n\x14\f\x14\xE\x14\x241\v\x14\x3\x15\x3"+
		"\x15\x3\x15\x3\x15\x3\x15\x3\x15\x3\x16\x3\x16\x3\x16\x3\x16\x3\x16\x3"+
		"\x16\x3\x16\x3\x16\x3\x16\x3\x16\x3\x16\x3\x16\x3\x16\x3\x16\x3\x16\x3"+
		"\x16\x3\x16\x3\x16\x3\x16\x3\x16\x3\x16\x3\x16\x3\x16\x3\x16\x3\x16\x3"+
		"\x16\x3\x16\x3\x16\x3\x16\x3\x16\x3\x16\x3\x16\x3\x16\x3\x16\x3\x16\x3"+
		"\x16\x3\x16\x3\x16\x3\x16\x3\x16\x3\x16\x3\x16\x3\x16\x3\x16\x3\x16\x3"+
		"\x16\x3\x16\x3\x16\x3\x16\x3\x16\x3\x16\x3\x16\x3\x16\x3\x16\x3\x16\x3"+
		"\x16\x3\x16\x3\x16\x3\x16\x3\x16\x3\x16\x3\x16\x3\x16\x3\x16\x3\x16\x3"+
		"\x16\x3\x16\x3\x16\x3\x16\x3\x16\x3\x16\x3\x16\x3\x16\x3\x16\x3\x16\x3"+
		"\x16\x3\x16\x3\x16\x3\x16\x3\x16\x3\x16\x3\x16\x3\x16\x3\x16\x3\x16\x3"+
		"\x16\x3\x16\x3\x16\x3\x16\x3\x16\x3\x16\x3\x16\x3\x16\x3\x16\x3\x16\x3"+
		"\x16\x3\x16\x3\x16\x3\x16\x3\x16\x3\x16\x3\x16\x3\x16\x3\x16\x3\x16\x3"+
		"\x16\x3\x16\x3\x16\x3\x16\x3\x16\x3\x16\x3\x16\x3\x16\x3\x16\x3\x16\x3"+
		"\x16\x3\x16\x3\x16\x3\x16\x5\x16\x2C0\n\x16\x3\x17\x3\x17\x3\x17\x5\x17"+
		"\x2C5\n\x17\x3\x18\x3\x18\x3\x18\x3\x18\x3\x18\x3\x18\x3\x18\x3\x19\x3"+
		"\x19\x3\x19\x3\x19\x3\x19\x3\x1A\x3\x1A\x3\x1A\x3\x1A\x3\x1A\x3\x1B\x3"+
		"\x1B\x3\x1C\x3\x1C\x3\x1C\x3\x1C\x3\x1C\x3\x1D\x3\x1D\x3\x1E\x3\x1E\x3"+
		"\x1E\x3\x1E\x3\x1E\x3\x1F\x3\x1F\x3\x1F\x3\x1F\x3\x1F\x3 \x3 \x3 \x3 "+
		"\x3 \x3!\x3!\x3!\x3!\x3!\x3\"\x3\"\x3\"\x3\"\x3\"\x3#\x3#\x3#\x5#\x2FD"+
		"\n#\x3$\x3$\x3$\x5$\x302\n$\x3%\x3%\x3%\x3%\x3%\x3%\x3%\x3&\x3&\x3&\x3"+
		"&\x3&\x3&\x3&\x3\'\x3\'\x3(\x3(\x3)\x3)\x3)\x3)\x3)\x3*\x3*\x3*\x3*\x3"+
		"*\x3+\x3+\x3+\x5+\x323\n+\x3,\x3,\x3,\x5,\x328\n,\x3-\x3-\x3-\x5-\x32D"+
		"\n-\x3.\x3.\x3.\x3.\x3.\x5.\x334\n.\x3/\x3/\x3\x30\x3\x30\x3\x30\x3\x30"+
		"\x3\x30\x3\x31\x3\x31\x3\x31\x3\x31\x3\x31\x3\x32\x3\x32\x3\x32\x3\x32"+
		"\x3\x32\x3\x33\x3\x33\x3\x33\x5\x33\x34A\n\x33\x3\x33\x5\x33\x34D\n\x33"+
		"\x3\x34\x3\x34\x3\x34\x3\x34\x3\x34\x3\x35\x3\x35\x3\x35\x3\x35\x3\x35"+
		"\x3\x36\x3\x36\x3\x36\x3\x36\x3\x36\x3\x37\x3\x37\x3\x38\x3\x38\x3\x38"+
		"\x3\x38\x3\x38\x3\x39\x3\x39\x3\x39\x3\x39\x3\x39\x3:\x3:\x3:\x3:\x3:"+
		"\x3;\x3;\x3;\x3;\x3;\x3<\x3<\x3<\x3<\x3<\x3=\x3=\x3=\x3=\x3=\x3>\x3>\x3"+
		">\x3>\x3>\x5>\x383\n>\x3>\x3>\x3?\x3?\x3?\x3?\x3?\x3?\x3?\x5?\x38E\n?"+
		"\x5?\x390\n?\x3?\x3?\x3@\x3@\x3@\x3@\x3@\x3@\x3@\x3\x41\x3\x41\x3\x41"+
		"\x3\x41\x3\x41\x3\x41\x3\x41\x3\x42\x3\x42\x3\x42\x3\x42\x3\x42\x3\x43"+
		"\x3\x43\x3\x43\x3\x43\x3\x43\x3\x44\x3\x44\x3\x45\x3\x45\x3\x45\x3\x45"+
		"\x3\x45\x3\x46\x3\x46\x3\x46\x3\x46\x3\x46\x3G\x3G\x3G\x3G\x3G\x3H\x3"+
		"H\x3H\x5H\x3C0\nH\x3I\x3I\x3I\x3I\x3I\x3I\x3I\x3I\x3I\x3J\x3J\x3J\x3J"+
		"\x3J\x3K\x3K\x3L\x3L\x3L\x3L\x3L\x3M\x3M\x3M\x3M\x3M\x3M\x3M\x5M\x3DE"+
		"\nM\x3M\x3M\x3N\x3N\x3N\x3N\x3N\x3O\x3O\x3O\x3O\x3O\x3O\x3O\x3P\x3P\x3"+
		"Q\x3Q\x3Q\x5Q\x3F3\nQ\x3R\x3R\x3S\x3S\x3S\x5S\x3FA\nS\x3T\x3T\x3T\x3T"+
		"\x3T\x3T\x3T\x3U\x3U\x3U\x3U\x3U\x3V\x3V\x3W\x3W\x3W\x3W\x3W\x3W\x3W\x3"+
		"W\x3W\x3X\x3X\x3Y\x3Y\x3Y\x3Y\x3Y\x3Z\x3Z\x3Z\x5Z\x41D\nZ\x3[\x3[\x3["+
		"\x5[\x422\n[\x3\\\x3\\\x3]\x3]\x3]\x3]\x3]\x5]\x42B\n]\x3^\x3^\x3^\x5"+
		"^\x430\n^\x3_\x3_\x3_\x5_\x435\n_\x3`\x3`\x3`\x3`\x3`\x3`\x3`\x3\x61\x3"+
		"\x61\x3\x61\x3\x61\x3\x61\x3\x61\x3\x61\x3\x62\x3\x62\x3\x62\x3\x62\x3"+
		"\x62\x3\x62\x3\x62\x3\x63\x3\x63\x3\x64\x3\x64\x3\x65\x3\x65\x3\x66\x3"+
		"\x66\x3\x66\x5\x66\x455\n\x66\x3g\x3g\x3h\x3h\x3h\x5h\x45C\nh\x3i\x3i"+
		"\x3i\x3i\x3i\x3j\x3j\x3k\x3k\x3k\x3k\x3k\x3k\x3k\x3l\x3l\x3l\x3l\x3l\x3"+
		"m\x3m\x3m\x3m\x3m\x3n\x3n\x3n\x3n\x3n\x3n\x3n\x3o\x3o\x3o\x3o\x3o\x3o"+
		"\x3o\x3o\x3o\x3p\x3p\x3p\x3p\x3p\x3q\x3q\x3q\x3q\x3q\x3r\x3r\x3r\x3r\x3"+
		"r\x5r\x495\nr\x3s\x3s\x3s\x3s\x3s\x3s\x3s\x3t\x3t\x3t\x5t\x4A1\nt\x3u"+
		"\x3u\x3u\x5u\x4A6\nu\x3v\x3v\x3v\x3v\x3v\x3w\x3w\x3x\x3x\x3x\x5x\x4B2"+
		"\nx\x3y\x3y\x3y\x3y\x3y\x3z\x3z\x3z\x5z\x4BC\nz\x3{\x3{\x3{\x3{\x3{\x5"+
		"{\x4C3\n{\x3|\x3|\x3|\x3|\x3|\x3}\x3}\x3}\x3}\x3}\x3~\x3~\x3~\x3~\x3~"+
		"\x3\x7F\x3\x7F\x3\x7F\x3\x7F\x3\x7F\x3\x80\x3\x80\x3\x80\x3\x80\x3\x80"+
		"\x3\x81\x3\x81\x3\x81\x3\x81\x3\x81\x3\x82\x3\x82\x3\x82\x3\x82\x3\x82"+
		"\x3\x83\x3\x83\x3\x83\x3\x83\x3\x83\x3\x84\x3\x84\x3\x84\x3\x84\x3\x84"+
		"\x3\x85\x3\x85\x3\x86\x3\x86\x3\x86\x5\x86\x4F7\n\x86\x3\x87\x3\x87\x3"+
		"\x87\x3\x87\x3\x87\x3\x88\x3\x88\x3\x88\x5\x88\x501\n\x88\x3\x89\x3\x89"+
		"\x3\x89\x3\x89\x3\x89\x3\x8A\x3\x8A\x3\x8A\x3\x8A\x3\x8A\x3\x8A\x3\x8A"+
		"\x3\x8B\x3\x8B\x3\x8B\x3\x8B\x3\x8B\x3\x8B\x3\x8B\x3\x8C\x3\x8C\x3\x8C"+
		"\x3\x8C\x3\x8D\x3\x8D\x3\x8D\x3\x8D\x3\x8E\x3\x8E\x3\x8E\x3\x8E\x3\x8E"+
		"\x3\x8E\x3\x8E\x3\x8E\a\x8E\x526\n\x8E\f\x8E\xE\x8E\x529\v\x8E\x5\x8E"+
		"\x52B\n\x8E\x3\x8E\x3\x8E\x5\x8E\x52F\n\x8E\x5\x8E\x531\n\x8E\x3\x8F\x5"+
		"\x8F\x534\n\x8F\x3\x8F\x5\x8F\x537\n\x8F\x3\x8F\x5\x8F\x53A\n\x8F\x3\x90"+
		"\x3\x90\x3\x90\a\x90\x53F\n\x90\f\x90\xE\x90\x542\v\x90\x3\x91\x3\x91"+
		"\x3\x92\x3\x92\x3\x93\x3\x93\x3\x93\x3\x93\x3\x93\x3\x93\x3\x93\x3\x93"+
		"\x3\x93\a\x93\x551\n\x93\f\x93\xE\x93\x554\v\x93\x3\x93\x3\x93\x3\x94"+
		"\x3\x94\x3\x94\x3\x94\x3\x94\x3\x94\x3\x94\x3\x94\x3\x94\x3\x94\x3\x94"+
		"\a\x94\x563\n\x94\f\x94\xE\x94\x566\v\x94\x3\x94\x3\x94\x3\x95\x3\x95"+
		"\x3\x95\x3\x95\x3\x95\x3\x95\x5\x95\x570\n\x95\x3\x95\x3\x95\x3\x96\x3"+
		"\x96\x3\x96\x3\x96\x3\x96\x3\x96\x5\x96\x57A\n\x96\x3\x96\x3\x96\x3\x96"+
		"\a\x96\x57F\n\x96\f\x96\xE\x96\x582\v\x96\x3\x97\x3\x97\x3\x97\x3\x98"+
		"\x3\x98\x3\x98\x3\x98\x3\x99\x3\x99\x3\x99\x3\x99\x3\x9A\x3\x9A\x3\x9A"+
		"\x3\x9A\x3\x9A\x3\x9A\x3\x9A\x3\x9A\x3\x9A\x5\x9A\x598\n\x9A\x3\x9B\x3"+
		"\x9B\x3\x9B\x3\x9B\x3\x9C\x3\x9C\x3\x9C\x3\x9C\x3\x9C\x3\x9C\x3\x9C\x3"+
		"\x9C\x3\x9C\a\x9C\x5A7\n\x9C\f\x9C\xE\x9C\x5AA\v\x9C\x3\x9D\x3\x9D\x3"+
		"\x9D\x3\x9D\x3\x9D\x3\x9D\x5\x9D\x5B2\n\x9D\x3\x9E\x3\x9E\x3\x9F\x3\x9F"+
		"\x3\x9F\x3\xA0\x3\xA0\x3\xA0\x3\xA0\x3\xA1\x3\xA1\x3\xA2\x3\xA2\x3\xA3"+
		"\x3\xA3\x3\xA3\x3\xA3\x3\xA3\x3\xA3\x3\xA3\x3\xA3\x3\xA3\x3\xA3\x3\xA3"+
		"\x3\xA3\x3\xA3\x3\xA3\x3\xA3\x3\xA3\x3\xA3\x3\xA3\x5\xA3\x5D3\n\xA3\x3"+
		"\xA4\x3\xA4\x3\xA4\x3\xA4\x3\xA4\x3\xA4\x3\xA4\x3\xA5\x3\xA5\x3\xA5\x3"+
		"\xA5\x3\xA5\x3\xA6\x3\xA6\x3\xA6\x5\xA6\x5E4\n\xA6\x3\xA7\x3\xA7\x3\xA8"+
		"\x3\xA8\x3\xA8\x3\xA8\x3\xA8\x3\xA9\x3\xA9\x3\xA9\x5\xA9\x5F0\n\xA9\x3"+
		"\xAA\x3\xAA\x3\xAA\x5\xAA\x5F5\n\xAA\x3\xAB\x3\xAB\x3\xAB\x5\xAB\x5FA"+
		"\n\xAB\x3\xAC\x3\xAC\x3\xAC\x5\xAC\x5FF\n\xAC\x3\xAD\x3\xAD\x3\xAD\x3"+
		"\xAD\x3\xAD\x3\xAE\x3\xAE\x3\xAF\x3\xAF\x3\xAF\x3\xAF\x3\xAF\x3\xB0\x3"+
		"\xB0\x3\xB0\x3\xB0\x3\xB0\x3\xB1\x3\xB1\x3\xB1\x3\xB1\x3\xB1\x3\xB2\x3"+
		"\xB2\x3\xB2\x3\xB2\x3\xB2\x3\xB3\x3\xB3\x3\xB3\x3\xB3\x3\xB3\x3\xB4\x3"+
		"\xB4\x3\xB4\x3\xB4\x3\xB4\x3\xB5\x3\xB5\x3\xB5\x3\xB5\x3\xB5\x3\xB6\x3"+
		"\xB6\x3\xB6\x5\xB6\x62E\n\xB6\x3\xB7\x3\xB7\x3\xB7\x3\xB7\x3\xB7\x3\xB8"+
		"\x3\xB8\x3\xB8\x3\xB8\x3\xB8\x3\xB9\x3\xB9\x3\xB9\x5\xB9\x63D\n\xB9\x3"+
		"\xBA\x3\xBA\x3\xBA\x5\xBA\x642\n\xBA\x3\xBB\x3\xBB\x3\xBB\x5\xBB\x647"+
		"\n\xBB\x3\xBC\x3\xBC\x3\xBC\x3\xBC\x3\xBC\x3\xBC\x3\xBC\x3\xBD\x3\xBD"+
		"\x3\xBD\x3\xBD\x5\xBD\x654\n\xBD\x3\xBD\x3\xBD\x3\xBE\x3\xBE\x3\xBE\x3"+
		"\xBE\x3\xBE\x3\xBE\x3\xBE\x3\xBE\x5\xBE\x660\n\xBE\x3\xBF\x3\xBF\x3\xBF"+
		"\x3\xBF\x3\xBF\x3\xC0\x3\xC0\x3\xC0\x3\xC0\x3\xC0\x3\xC1\x3\xC1\x3\xC1"+
		"\x5\xC1\x66F\n\xC1\x3\xC2\x3\xC2\x3\xC2\x3\xC2\x3\xC2\x3\xC2\x3\xC2\x3"+
		"\xC3\x3\xC3\x3\xC3\x5\xC3\x67B\n\xC3\x3\xC4\x3\xC4\x5\xC4\x67F\n\xC4\x3"+
		"\xC4\x2\x2\x4\x12A\x136\xC5\x2\x2\x4\x2\x6\x2\b\x2\n\x2\f\x2\xE\x2\x10"+
		"\x2\x12\x2\x14\x2\x16\x2\x18\x2\x1A\x2\x1C\x2\x1E\x2 \x2\"\x2$\x2&\x2"+
		"(\x2*\x2,\x2.\x2\x30\x2\x32\x2\x34\x2\x36\x2\x38\x2:\x2<\x2>\x2@\x2\x42"+
		"\x2\x44\x2\x46\x2H\x2J\x2L\x2N\x2P\x2R\x2T\x2V\x2X\x2Z\x2\\\x2^\x2`\x2"+
		"\x62\x2\x64\x2\x66\x2h\x2j\x2l\x2n\x2p\x2r\x2t\x2v\x2x\x2z\x2|\x2~\x2"+
		"\x80\x2\x82\x2\x84\x2\x86\x2\x88\x2\x8A\x2\x8C\x2\x8E\x2\x90\x2\x92\x2"+
		"\x94\x2\x96\x2\x98\x2\x9A\x2\x9C\x2\x9E\x2\xA0\x2\xA2\x2\xA4\x2\xA6\x2"+
		"\xA8\x2\xAA\x2\xAC\x2\xAE\x2\xB0\x2\xB2\x2\xB4\x2\xB6\x2\xB8\x2\xBA\x2"+
		"\xBC\x2\xBE\x2\xC0\x2\xC2\x2\xC4\x2\xC6\x2\xC8\x2\xCA\x2\xCC\x2\xCE\x2"+
		"\xD0\x2\xD2\x2\xD4\x2\xD6\x2\xD8\x2\xDA\x2\xDC\x2\xDE\x2\xE0\x2\xE2\x2"+
		"\xE4\x2\xE6\x2\xE8\x2\xEA\x2\xEC\x2\xEE\x2\xF0\x2\xF2\x2\xF4\x2\xF6\x2"+
		"\xF8\x2\xFA\x2\xFC\x2\xFE\x2\x100\x2\x102\x2\x104\x2\x106\x2\x108\x2\x10A"+
		"\x2\x10C\x2\x10E\x2\x110\x2\x112\x2\x114\x2\x116\x2\x118\x2\x11A\x2\x11C"+
		"\x2\x11E\x2\x120\x2\x122\x2\x124\x2\x126\x2\x128\x2\x12A\x2\x12C\x2\x12E"+
		"\x2\x130\x2\x132\x2\x134\x2\x136\x2\x138\x2\x13A\x2\x13C\x2\x13E\x2\x140"+
		"\x2\x142\x2\x144\x2\x146\x2\x148\x2\x14A\x2\x14C\x2\x14E\x2\x150\x2\x152"+
		"\x2\x154\x2\x156\x2\x158\x2\x15A\x2\x15C\x2\x15E\x2\x160\x2\x162\x2\x164"+
		"\x2\x166\x2\x168\x2\x16A\x2\x16C\x2\x16E\x2\x170\x2\x172\x2\x174\x2\x176"+
		"\x2\x178\x2\x17A\x2\x17C\x2\x17E\x2\x180\x2\x182\x2\x184\x2\x186\x2\x2"+
		"\t\x5\x2WW\x8B\x8B\xA2\xA2\x4\x2\xE\xEpp\x4\x2\x13\x13\x7F\x7F\a\x2(("+
		"==\x64\x65st||\x6\x2==\x64\x65st||\x3\x2\xA9\xAA\x4\x2rr\x8D\x8D\x6DD"+
		"\x2\x189\x3\x2\x2\x2\x4\x19F\x3\x2\x2\x2\x6\x1A4\x3\x2\x2\x2\b\x1A8\x3"+
		"\x2\x2\x2\n\x1AC\x3\x2\x2\x2\f\x1B8\x3\x2\x2\x2\xE\x1BD\x3\x2\x2\x2\x10"+
		"\x1C2\x3\x2\x2\x2\x12\x1C7\x3\x2\x2\x2\x14\x1CC\x3\x2\x2\x2\x16\x1D0\x3"+
		"\x2\x2\x2\x18\x1D2\x3\x2\x2\x2\x1A\x1D7\x3\x2\x2\x2\x1C\x1E4\x3\x2\x2"+
		"\x2\x1E\x1FC\x3\x2\x2\x2 \x211\x3\x2\x2\x2\"\x221\x3\x2\x2\x2$\x231\x3"+
		"\x2\x2\x2&\x23F\x3\x2\x2\x2(\x242\x3\x2\x2\x2*\x2BF\x3\x2\x2\x2,\x2C1"+
		"\x3\x2\x2\x2.\x2C6\x3\x2\x2\x2\x30\x2CD\x3\x2\x2\x2\x32\x2D2\x3\x2\x2"+
		"\x2\x34\x2D7\x3\x2\x2\x2\x36\x2D9\x3\x2\x2\x2\x38\x2DE\x3\x2\x2\x2:\x2E0"+
		"\x3\x2\x2\x2<\x2E5\x3\x2\x2\x2>\x2EA\x3\x2\x2\x2@\x2EF\x3\x2\x2\x2\x42"+
		"\x2F4\x3\x2\x2\x2\x44\x2F9\x3\x2\x2\x2\x46\x2FE\x3\x2\x2\x2H\x303\x3\x2"+
		"\x2\x2J\x30A\x3\x2\x2\x2L\x311\x3\x2\x2\x2N\x313\x3\x2\x2\x2P\x315\x3"+
		"\x2\x2\x2R\x31A\x3\x2\x2\x2T\x31F\x3\x2\x2\x2V\x324\x3\x2\x2\x2X\x329"+
		"\x3\x2\x2\x2Z\x32E\x3\x2\x2\x2\\\x335\x3\x2\x2\x2^\x337\x3\x2\x2\x2`\x33C"+
		"\x3\x2\x2\x2\x62\x341\x3\x2\x2\x2\x64\x346\x3\x2\x2\x2\x66\x34E\x3\x2"+
		"\x2\x2h\x353\x3\x2\x2\x2j\x358\x3\x2\x2\x2l\x35D\x3\x2\x2\x2n\x35F\x3"+
		"\x2\x2\x2p\x364\x3\x2\x2\x2r\x369\x3\x2\x2\x2t\x36E\x3\x2\x2\x2v\x373"+
		"\x3\x2\x2\x2x\x378\x3\x2\x2\x2z\x37D\x3\x2\x2\x2|\x386\x3\x2\x2\x2~\x393"+
		"\x3\x2\x2\x2\x80\x39A\x3\x2\x2\x2\x82\x3A1\x3\x2\x2\x2\x84\x3A6\x3\x2"+
		"\x2\x2\x86\x3AB\x3\x2\x2\x2\x88\x3AD\x3\x2\x2\x2\x8A\x3B2\x3\x2\x2\x2"+
		"\x8C\x3B7\x3\x2\x2\x2\x8E\x3BC\x3\x2\x2\x2\x90\x3C1\x3\x2\x2\x2\x92\x3CA"+
		"\x3\x2\x2\x2\x94\x3CF\x3\x2\x2\x2\x96\x3D1\x3\x2\x2\x2\x98\x3D6\x3\x2"+
		"\x2\x2\x9A\x3E1\x3\x2\x2\x2\x9C\x3E6\x3\x2\x2\x2\x9E\x3ED\x3\x2\x2\x2"+
		"\xA0\x3EF\x3\x2\x2\x2\xA2\x3F4\x3\x2\x2\x2\xA4\x3F6\x3\x2\x2\x2\xA6\x3FB"+
		"\x3\x2\x2\x2\xA8\x402\x3\x2\x2\x2\xAA\x407\x3\x2\x2\x2\xAC\x409\x3\x2"+
		"\x2\x2\xAE\x412\x3\x2\x2\x2\xB0\x414\x3\x2\x2\x2\xB2\x419\x3\x2\x2\x2"+
		"\xB4\x41E\x3\x2\x2\x2\xB6\x423\x3\x2\x2\x2\xB8\x425\x3\x2\x2\x2\xBA\x42C"+
		"\x3\x2\x2\x2\xBC\x431\x3\x2\x2\x2\xBE\x436\x3\x2\x2\x2\xC0\x43D\x3\x2"+
		"\x2\x2\xC2\x444\x3\x2\x2\x2\xC4\x44B\x3\x2\x2\x2\xC6\x44D\x3\x2\x2\x2"+
		"\xC8\x44F\x3\x2\x2\x2\xCA\x451\x3\x2\x2\x2\xCC\x456\x3\x2\x2\x2\xCE\x458"+
		"\x3\x2\x2\x2\xD0\x45D\x3\x2\x2\x2\xD2\x462\x3\x2\x2\x2\xD4\x464\x3\x2"+
		"\x2\x2\xD6\x46B\x3\x2\x2\x2\xD8\x470\x3\x2\x2\x2\xDA\x475\x3\x2\x2\x2"+
		"\xDC\x47C\x3\x2\x2\x2\xDE\x485\x3\x2\x2\x2\xE0\x48A\x3\x2\x2\x2\xE2\x48F"+
		"\x3\x2\x2\x2\xE4\x496\x3\x2\x2\x2\xE6\x49D\x3\x2\x2\x2\xE8\x4A2\x3\x2"+
		"\x2\x2\xEA\x4A7\x3\x2\x2\x2\xEC\x4AC\x3\x2\x2\x2\xEE\x4AE\x3\x2\x2\x2"+
		"\xF0\x4B3\x3\x2\x2\x2\xF2\x4B8\x3\x2\x2\x2\xF4\x4BD\x3\x2\x2\x2\xF6\x4C4"+
		"\x3\x2\x2\x2\xF8\x4C9\x3\x2\x2\x2\xFA\x4CE\x3\x2\x2\x2\xFC\x4D3\x3\x2"+
		"\x2\x2\xFE\x4D8\x3\x2\x2\x2\x100\x4DD\x3\x2\x2\x2\x102\x4E2\x3\x2\x2\x2"+
		"\x104\x4E7\x3\x2\x2\x2\x106\x4EC\x3\x2\x2\x2\x108\x4F1\x3\x2\x2\x2\x10A"+
		"\x4F3\x3\x2\x2\x2\x10C\x4F8\x3\x2\x2\x2\x10E\x4FD\x3\x2\x2\x2\x110\x502"+
		"\x3\x2\x2\x2\x112\x507\x3\x2\x2\x2\x114\x50E\x3\x2\x2\x2\x116\x515\x3"+
		"\x2\x2\x2\x118\x519\x3\x2\x2\x2\x11A\x52A\x3\x2\x2\x2\x11C\x536\x3\x2"+
		"\x2\x2\x11E\x53B\x3\x2\x2\x2\x120\x543\x3\x2\x2\x2\x122\x545\x3\x2\x2"+
		"\x2\x124\x547\x3\x2\x2\x2\x126\x557\x3\x2\x2\x2\x128\x569\x3\x2\x2\x2"+
		"\x12A\x579\x3\x2\x2\x2\x12C\x583\x3\x2\x2\x2\x12E\x586\x3\x2\x2\x2\x130"+
		"\x58A\x3\x2\x2\x2\x132\x597\x3\x2\x2\x2\x134\x599\x3\x2\x2\x2\x136\x59D"+
		"\x3\x2\x2\x2\x138\x5B1\x3\x2\x2\x2\x13A\x5B3\x3\x2\x2\x2\x13C\x5B5\x3"+
		"\x2\x2\x2\x13E\x5B8\x3\x2\x2\x2\x140\x5BC\x3\x2\x2\x2\x142\x5BE\x3\x2"+
		"\x2\x2\x144\x5D2\x3\x2\x2\x2\x146\x5D4\x3\x2\x2\x2\x148\x5DB\x3\x2\x2"+
		"\x2\x14A\x5E0\x3\x2\x2\x2\x14C\x5E5\x3\x2\x2\x2\x14E\x5E7\x3\x2\x2\x2"+
		"\x150\x5EC\x3\x2\x2\x2\x152\x5F1\x3\x2\x2\x2\x154\x5F6\x3\x2\x2\x2\x156"+
		"\x5FB\x3\x2\x2\x2\x158\x600\x3\x2\x2\x2\x15A\x605\x3\x2\x2\x2\x15C\x607"+
		"\x3\x2\x2\x2\x15E\x60C\x3\x2\x2\x2\x160\x611\x3\x2\x2\x2\x162\x616\x3"+
		"\x2\x2\x2\x164\x61B\x3\x2\x2\x2\x166\x620\x3\x2\x2\x2\x168\x625\x3\x2"+
		"\x2\x2\x16A\x62A\x3\x2\x2\x2\x16C\x62F\x3\x2\x2\x2\x16E\x634\x3\x2\x2"+
		"\x2\x170\x639\x3\x2\x2\x2\x172\x63E\x3\x2\x2\x2\x174\x643\x3\x2\x2\x2"+
		"\x176\x648\x3\x2\x2\x2\x178\x64F\x3\x2\x2\x2\x17A\x65F\x3\x2\x2\x2\x17C"+
		"\x661\x3\x2\x2\x2\x17E\x666\x3\x2\x2\x2\x180\x66B\x3\x2\x2\x2\x182\x670"+
		"\x3\x2\x2\x2\x184\x677\x3\x2\x2\x2\x186\x67E\x3\x2\x2\x2\x188\x18A\x5"+
		"\n\x6\x2\x189\x188\x3\x2\x2\x2\x189\x18A\x3\x2\x2\x2\x18A\x18E\x3\x2\x2"+
		"\x2\x18B\x18D\x5\x4\x3\x2\x18C\x18B\x3\x2\x2\x2\x18D\x190\x3\x2\x2\x2"+
		"\x18E\x18C\x3\x2\x2\x2\x18E\x18F\x3\x2\x2\x2\x18F\x191\x3\x2\x2\x2\x190"+
		"\x18E\x3\x2\x2\x2\x191\x192\a\x2\x2\x3\x192\x3\x3\x2\x2\x2\x193\x1A0\x5"+
		"\b\x5\x2\x194\x1A0\x5\x14\v\x2\x195\x1A0\x5\x16\f\x2\x196\x1A0\x5\x1C"+
		"\xF\x2\x197\x1A0\x5\x1E\x10\x2\x198\x1A0\x5 \x11\x2\x199\x1A0\x5\"\x12"+
		"\x2\x19A\x1A0\x5(\x15\x2\x19B\x1A0\x5\x124\x93\x2\x19C\x1A0\x5\x126\x94"+
		"\x2\x19D\x1A0\x5\x128\x95\x2\x19E\x1A0\x5\x186\xC4\x2\x19F\x193\x3\x2"+
		"\x2\x2\x19F\x194\x3\x2\x2\x2\x19F\x195\x3\x2\x2\x2\x19F\x196\x3\x2\x2"+
		"\x2\x19F\x197\x3\x2\x2\x2\x19F\x198\x3\x2\x2\x2\x19F\x199\x3\x2\x2\x2"+
		"\x19F\x19A\x3\x2\x2\x2\x19F\x19B\x3\x2\x2\x2\x19F\x19C\x3\x2\x2\x2\x19F"+
		"\x19D\x3\x2\x2\x2\x19F\x19E\x3\x2\x2\x2\x1A0\x5\x3\x2\x2\x2\x1A1\x1A3"+
		"\x5\x4\x3\x2\x1A2\x1A1\x3\x2\x2\x2\x1A3\x1A6\x3\x2\x2\x2\x1A4\x1A2\x3"+
		"\x2\x2\x2\x1A4\x1A5\x3\x2\x2\x2\x1A5\a\x3\x2\x2\x2\x1A6\x1A4\x3\x2\x2"+
		"\x2\x1A7\x1A9\x5*\x16\x2\x1A8\x1A7\x3\x2\x2\x2\x1A9\x1AA\x3\x2\x2\x2\x1AA"+
		"\x1A8\x3\x2\x2\x2\x1AA\x1AB\x3\x2\x2\x2\x1AB\t\x3\x2\x2\x2\x1AC\x1AD\a"+
		"\x8A\x2\x2\x1AD\x1B2\ak\x2\x2\x1AE\x1B3\x5\f\a\x2\x1AF\x1B3\x5\xE\b\x2"+
		"\x1B0\x1B3\x5\x10\t\x2\x1B1\x1B3\x5\x12\n\x2\x1B2\x1AE\x3\x2\x2\x2\x1B2"+
		"\x1AF\x3\x2\x2\x2\x1B2\x1B0\x3\x2\x2\x2\x1B2\x1B1\x3\x2\x2\x2\x1B3\x1B4"+
		"\x3\x2\x2\x2\x1B4\x1B2\x3\x2\x2\x2\x1B4\x1B5\x3\x2\x2\x2\x1B5\x1B6\x3"+
		"\x2\x2\x2\x1B6\x1B7\a\xA0\x2\x2\x1B7\v\x3\x2\x2\x2\x1B8\x1B9\a\x19\x2"+
		"\x2\x1B9\x1BA\a=\x2\x2\x1BA\x1BB\a\x11\x2\x2\x1BB\x1BC\a\xA6\x2\x2\x1BC"+
		"\r\x3\x2\x2\x2\x1BD\x1BE\a\xB2\x2\x2\x1BE\x1BF\a=\x2\x2\x1BF\x1C0\a\x11"+
		"\x2\x2\x1C0\x1C1\a\xA6\x2\x2\x1C1\xF\x3\x2\x2\x2\x1C2\x1C3\a\xC2\x2\x2"+
		"\x1C3\x1C4\a=\x2\x2\x1C4\x1C5\a\x11\x2\x2\x1C5\x1C6\a\xA6\x2\x2\x1C6\x11"+
		"\x3\x2\x2\x2\x1C7\x1C8\aN\x2\x2\x1C8\x1C9\a=\x2\x2\x1C9\x1CA\t\x2\x2\x2"+
		"\x1CA\x1CB\a\xA6\x2\x2\x1CB\x13\x3\x2\x2\x2\x1CC\x1CD\a*\x2\x2\x1CD\x15"+
		"\x3\x2\x2\x2\x1CE\x1D1\x5\x18\r\x2\x1CF\x1D1\x5\x1A\xE\x2\x1D0\x1CE\x3"+
		"\x2\x2\x2\x1D0\x1CF\x3\x2\x2\x2\x1D1\x17\x3\x2\x2\x2\x1D2\x1D3\a\v\x2"+
		"\x2\x1D3\x1D4\a=\x2\x2\x1D4\x1D5\x5\x136\x9C\x2\x1D5\x1D6\a\xA6\x2\x2"+
		"\x1D6\x19\x3\x2\x2\x2\x1D7\x1D8\a\v\x2\x2\x1D8\x1E0\a=\x2\x2\x1D9\x1DB"+
		"\x5*\x16\x2\x1DA\x1D9\x3\x2\x2\x2\x1DB\x1DC\x3\x2\x2\x2\x1DC\x1DA\x3\x2"+
		"\x2\x2\x1DC\x1DD\x3\x2\x2\x2\x1DD\x1E1\x3\x2\x2\x2\x1DE\x1E1\x5\x124\x93"+
		"\x2\x1DF\x1E1\x5\x126\x94\x2\x1E0\x1DA\x3\x2\x2\x2\x1E0\x1DE\x3\x2\x2"+
		"\x2\x1E0\x1DF\x3\x2\x2\x2\x1E1\x1E2\x3\x2\x2\x2\x1E2\x1E3\a\xA6\x2\x2"+
		"\x1E3\x1B\x3\x2\x2\x2\x1E4\x1E5\aM\x2\x2\x1E5\x1E6\ak\x2\x2\x1E6\x1E7"+
		"\x5\x16\f\x2\x1E7\x1E8\x5\x12A\x96\x2\x1E8\x1E9\a\xA6\x2\x2\x1E9\x1EA"+
		"\x5\x16\f\x2\x1EA\x1F7\a\xA0\x2\x2\x1EB\x1F6\x5\b\x5\x2\x1EC\x1F6\x5\x14"+
		"\v\x2\x1ED\x1F6\x5\x16\f\x2\x1EE\x1F6\x5\x1C\xF\x2\x1EF\x1F6\x5\x1E\x10"+
		"\x2\x1F0\x1F6\x5 \x11\x2\x1F1\x1F6\x5(\x15\x2\x1F2\x1F6\x5\x124\x93\x2"+
		"\x1F3\x1F6\x5\x126\x94\x2\x1F4\x1F6\x5\x128\x95\x2\x1F5\x1EB\x3\x2\x2"+
		"\x2\x1F5\x1EC\x3\x2\x2\x2\x1F5\x1ED\x3\x2\x2\x2\x1F5\x1EE\x3\x2\x2\x2"+
		"\x1F5\x1EF\x3\x2\x2\x2\x1F5\x1F0\x3\x2\x2\x2\x1F5\x1F1\x3\x2\x2\x2\x1F5"+
		"\x1F2\x3\x2\x2\x2\x1F5\x1F3\x3\x2\x2\x2\x1F5\x1F4\x3\x2\x2\x2\x1F6\x1F9"+
		"\x3\x2\x2\x2\x1F7\x1F5\x3\x2\x2\x2\x1F7\x1F8\x3\x2\x2\x2\x1F8\x1FA\x3"+
		"\x2\x2\x2\x1F9\x1F7\x3\x2\x2\x2\x1FA\x1FB\ax\x2\x2\x1FB\x1D\x3\x2\x2\x2"+
		"\x1FC\x1FD\a\xC4\x2\x2\x1FD\x1FE\ak\x2\x2\x1FE\x1FF\x5\x12A\x96\x2\x1FF"+
		"\x20C\a\xA0\x2\x2\x200\x20B\x5\b\x5\x2\x201\x20B\x5\x14\v\x2\x202\x20B"+
		"\x5\x16\f\x2\x203\x20B\x5\x1C\xF\x2\x204\x20B\x5\x1E\x10\x2\x205\x20B"+
		"\x5 \x11\x2\x206\x20B\x5(\x15\x2\x207\x20B\x5\x124\x93\x2\x208\x20B\x5"+
		"\x126\x94\x2\x209\x20B\x5\x128\x95\x2\x20A\x200\x3\x2\x2\x2\x20A\x201"+
		"\x3\x2\x2\x2\x20A\x202\x3\x2\x2\x2\x20A\x203\x3\x2\x2\x2\x20A\x204\x3"+
		"\x2\x2\x2\x20A\x205\x3\x2\x2\x2\x20A\x206\x3\x2\x2\x2\x20A\x207\x3\x2"+
		"\x2\x2\x20A\x208\x3\x2\x2\x2\x20A\x209\x3\x2\x2\x2\x20B\x20E\x3\x2\x2"+
		"\x2\x20C\x20A\x3\x2\x2\x2\x20C\x20D\x3\x2\x2\x2\x20D\x20F\x3\x2\x2\x2"+
		"\x20E\x20C\x3\x2\x2\x2\x20F\x210\ax\x2\x2\x210\x1F\x3\x2\x2\x2\x211\x212"+
		"\a\xA5\x2\x2\x212\x217\x5\b\x5\x2\x213\x214\a\x1F\x2\x2\x214\x215\a\x11"+
		"\x2\x2\x215\x216\a(\x2\x2\x216\x218\x5\x6\x4\x2\x217\x213\x3\x2\x2\x2"+
		"\x218\x219\x3\x2\x2\x2\x219\x217\x3\x2\x2\x2\x219\x21A\x3\x2\x2\x2\x21A"+
		"\x21D\x3\x2\x2\x2\x21B\x21C\a;\x2\x2\x21C\x21E\x5\x6\x4\x2\x21D\x21B\x3"+
		"\x2\x2\x2\x21D\x21E\x3\x2\x2\x2\x21E\x21F\x3\x2\x2\x2\x21F\x220\a:\x2"+
		"\x2\x220!\x3\x2\x2\x2\x221\x222\a\x91\x2\x2\x222\x223\a\v\x2\x2\x223\x224"+
		"\ak\x2\x2\x224\x225\x5$\x13\x2\x225\x226\a\xA0\x2\x2\x226\x227\x5&\x14"+
		"\x2\x227\x228\a:\x2\x2\x228#\x3\x2\x2\x2\x229\x22E\a\v\x2\x2\x22A\x22B"+
		"\a*\x2\x2\x22B\x22D\a\v\x2\x2\x22C\x22A\x3\x2\x2\x2\x22D\x230\x3\x2\x2"+
		"\x2\x22E\x22C\x3\x2\x2\x2\x22E\x22F\x3\x2\x2\x2\x22F\x232\x3\x2\x2\x2"+
		"\x230\x22E\x3\x2\x2\x2\x231\x229\x3\x2\x2\x2\x231\x232\x3\x2\x2\x2\x232"+
		"%\x3\x2\x2\x2\x233\x23E\x5\b\x5\x2\x234\x23E\x5\x14\v\x2\x235\x23E\x5"+
		"\x16\f\x2\x236\x23E\x5\x1C\xF\x2\x237\x23E\x5\x1E\x10\x2\x238\x23E\x5"+
		" \x11\x2\x239\x23E\x5\x124\x93\x2\x23A\x23E\x5\x126\x94\x2\x23B\x23E\x5"+
		"(\x15\x2\x23C\x23E\x5\x128\x95\x2\x23D\x233\x3\x2\x2\x2\x23D\x234\x3\x2"+
		"\x2\x2\x23D\x235\x3\x2\x2\x2\x23D\x236\x3\x2\x2\x2\x23D\x237\x3\x2\x2"+
		"\x2\x23D\x238\x3\x2\x2\x2\x23D\x239\x3\x2\x2\x2\x23D\x23A\x3\x2\x2\x2"+
		"\x23D\x23B\x3\x2\x2\x2\x23D\x23C\x3\x2\x2\x2\x23E\x241\x3\x2\x2\x2\x23F"+
		"\x23D\x3\x2\x2\x2\x23F\x240\x3\x2\x2\x2\x240\'\x3\x2\x2\x2\x241\x23F\x3"+
		"\x2\x2\x2\x242\x243\a\x1E\x2\x2\x243\x244\a\v\x2\x2\x244\x245\ak\x2\x2"+
		"\x245\x246\x5\x6\x4\x2\x246\x247\a\xA0\x2\x2\x247)\x3\x2\x2\x2\x248\x2C0"+
		"\x5\x116\x8C\x2\x249\x2C0\x5\x118\x8D\x2\x24A\x2C0\x5\x142\xA2\x2\x24B"+
		"\x2C0\x5,\x17\x2\x24C\x2C0\x5.\x18\x2\x24D\x2C0\x5\x30\x19\x2\x24E\x2C0"+
		"\x5\x32\x1A\x2\x24F\x2C0\x5\x34\x1B\x2\x250\x2C0\x5\x36\x1C\x2\x251\x2C0"+
		"\x5\x38\x1D\x2\x252\x2C0\x5:\x1E\x2\x253\x2C0\x5<\x1F\x2\x254\x2C0\x5"+
		"> \x2\x255\x2C0\x5@!\x2\x256\x2C0\x5\x42\"\x2\x257\x2C0\x5\x44#\x2\x258"+
		"\x2C0\x5\x46$\x2\x259\x2C0\x5H%\x2\x25A\x2C0\x5J&\x2\x25B\x2C0\x5L\'\x2"+
		"\x25C\x2C0\x5N(\x2\x25D\x2C0\x5P)\x2\x25E\x2C0\x5R*\x2\x25F\x2C0\x5T+"+
		"\x2\x260\x2C0\x5V,\x2\x261\x2C0\x5X-\x2\x262\x2C0\x5Z.\x2\x263\x2C0\x5"+
		"\\/\x2\x264\x2C0\x5^\x30\x2\x265\x2C0\x5`\x31\x2\x266\x2C0\x5\x62\x32"+
		"\x2\x267\x2C0\x5\x64\x33\x2\x268\x2C0\x5\x66\x34\x2\x269\x2C0\x5h\x35"+
		"\x2\x26A\x2C0\x5j\x36\x2\x26B\x2C0\x5l\x37\x2\x26C\x2C0\x5n\x38\x2\x26D"+
		"\x2C0\x5p\x39\x2\x26E\x2C0\x5r:\x2\x26F\x2C0\x5t;\x2\x270\x2C0\x5v<\x2"+
		"\x271\x2C0\x5x=\x2\x272\x2C0\x5z>\x2\x273\x2C0\x5|?\x2\x274\x2C0\x5~@"+
		"\x2\x275\x2C0\x5\x80\x41\x2\x276\x2C0\x5\x82\x42\x2\x277\x2C0\x5\x84\x43"+
		"\x2\x278\x2C0\x5\x86\x44\x2\x279\x2C0\x5\x88\x45\x2\x27A\x2C0\x5\x8A\x46"+
		"\x2\x27B\x2C0\x5\x8CG\x2\x27C\x2C0\x5\x8EH\x2\x27D\x2C0\x5\x90I\x2\x27E"+
		"\x2C0\x5\x92J\x2\x27F\x2C0\x5\x94K\x2\x280\x2C0\x5\x96L\x2\x281\x2C0\x5"+
		"\x9AN\x2\x282\x2C0\x5\x9CO\x2\x283\x2C0\x5\x9EP\x2\x284\x2C0\x5\xA0Q\x2"+
		"\x285\x2C0\x5\xA2R\x2\x286\x2C0\x5\xA4S\x2\x287\x2C0\x5\xA6T\x2\x288\x2C0"+
		"\x5\xA8U\x2\x289\x2C0\x5\xAAV\x2\x28A\x2C0\x5\xACW\x2\x28B\x2C0\x5\xAE"+
		"X\x2\x28C\x2C0\x5\xB0Y\x2\x28D\x2C0\x5\xB2Z\x2\x28E\x2C0\x5\xB4[\x2\x28F"+
		"\x2C0\x5\xB6\\\x2\x290\x2C0\x5\xB8]\x2\x291\x2C0\x5\xBA^\x2\x292\x2C0"+
		"\x5\xBC_\x2\x293\x2C0\x5\xBE`\x2\x294\x2C0\x5\xC0\x61\x2\x295\x2C0\x5"+
		"\xC2\x62\x2\x296\x2C0\x5\xC4\x63\x2\x297\x2C0\x5\xC6\x64\x2\x298\x2C0"+
		"\x5\xC8\x65\x2\x299\x2C0\x5\xCA\x66\x2\x29A\x2C0\x5\xCCg\x2\x29B\x2C0"+
		"\x5\xCEh\x2\x29C\x2C0\x5\xD0i\x2\x29D\x2C0\x5\xD2j\x2\x29E\x2C0\x5\xD4"+
		"k\x2\x29F\x2C0\x5\xD6l\x2\x2A0\x2C0\x5\xD8m\x2\x2A1\x2C0\x5\xDAn\x2\x2A2"+
		"\x2C0\x5\xDCo\x2\x2A3\x2C0\x5\xDEp\x2\x2A4\x2C0\x5\xE0q\x2\x2A5\x2C0\x5"+
		"\xE2r\x2\x2A6\x2C0\x5\xE4s\x2\x2A7\x2C0\x5\xE6t\x2\x2A8\x2C0\x5\xE8u\x2"+
		"\x2A9\x2C0\x5\xEAv\x2\x2AA\x2C0\x5\xECw\x2\x2AB\x2C0\x5\xEEx\x2\x2AC\x2C0"+
		"\x5\xF0y\x2\x2AD\x2C0\x5\xF2z\x2\x2AE\x2C0\x5\xF4{\x2\x2AF\x2C0\x5\xF6"+
		"|\x2\x2B0\x2C0\x5\xF8}\x2\x2B1\x2C0\x5\xFA~\x2\x2B2\x2C0\x5\xFC\x7F\x2"+
		"\x2B3\x2C0\x5\xFE\x80\x2\x2B4\x2C0\x5\x100\x81\x2\x2B5\x2C0\x5\x102\x82"+
		"\x2\x2B6\x2C0\x5\x104\x83\x2\x2B7\x2C0\x5\x106\x84\x2\x2B8\x2C0\x5\x108"+
		"\x85\x2\x2B9\x2C0\x5\x10A\x86\x2\x2BA\x2C0\x5\x10C\x87\x2\x2BB\x2C0\x5"+
		"\x10E\x88\x2\x2BC\x2C0\x5\x110\x89\x2\x2BD\x2C0\x5\x112\x8A\x2\x2BE\x2C0"+
		"\x5\x114\x8B\x2\x2BF\x248\x3\x2\x2\x2\x2BF\x249\x3\x2\x2\x2\x2BF\x24A"+
		"\x3\x2\x2\x2\x2BF\x24B\x3\x2\x2\x2\x2BF\x24C\x3\x2\x2\x2\x2BF\x24D\x3"+
		"\x2\x2\x2\x2BF\x24E\x3\x2\x2\x2\x2BF\x24F\x3\x2\x2\x2\x2BF\x250\x3\x2"+
		"\x2\x2\x2BF\x251\x3\x2\x2\x2\x2BF\x252\x3\x2\x2\x2\x2BF\x253\x3\x2\x2"+
		"\x2\x2BF\x254\x3\x2\x2\x2\x2BF\x255\x3\x2\x2\x2\x2BF\x256\x3\x2\x2\x2"+
		"\x2BF\x257\x3\x2\x2\x2\x2BF\x258\x3\x2\x2\x2\x2BF\x259\x3\x2\x2\x2\x2BF"+
		"\x25A\x3\x2\x2\x2\x2BF\x25B\x3\x2\x2\x2\x2BF\x25C\x3\x2\x2\x2\x2BF\x25D"+
		"\x3\x2\x2\x2\x2BF\x25E\x3\x2\x2\x2\x2BF\x25F\x3\x2\x2\x2\x2BF\x260\x3"+
		"\x2\x2\x2\x2BF\x261\x3\x2\x2\x2\x2BF\x262\x3\x2\x2\x2\x2BF\x263\x3\x2"+
		"\x2\x2\x2BF\x264\x3\x2\x2\x2\x2BF\x265\x3\x2\x2\x2\x2BF\x266\x3\x2\x2"+
		"\x2\x2BF\x267\x3\x2\x2\x2\x2BF\x268\x3\x2\x2\x2\x2BF\x269\x3\x2\x2\x2"+
		"\x2BF\x26A\x3\x2\x2\x2\x2BF\x26B\x3\x2\x2\x2\x2BF\x26C\x3\x2\x2\x2\x2BF"+
		"\x26D\x3\x2\x2\x2\x2BF\x26E\x3\x2\x2\x2\x2BF\x26F\x3\x2\x2\x2\x2BF\x270"+
		"\x3\x2\x2\x2\x2BF\x271\x3\x2\x2\x2\x2BF\x272\x3\x2\x2\x2\x2BF\x273\x3"+
		"\x2\x2\x2\x2BF\x274\x3\x2\x2\x2\x2BF\x275\x3\x2\x2\x2\x2BF\x276\x3\x2"+
		"\x2\x2\x2BF\x277\x3\x2\x2\x2\x2BF\x278\x3\x2\x2\x2\x2BF\x279\x3\x2\x2"+
		"\x2\x2BF\x27A\x3\x2\x2\x2\x2BF\x27B\x3\x2\x2\x2\x2BF\x27C\x3\x2\x2\x2"+
		"\x2BF\x27D\x3\x2\x2\x2\x2BF\x27E\x3\x2\x2\x2\x2BF\x27F\x3\x2\x2\x2\x2BF"+
		"\x280\x3\x2\x2\x2\x2BF\x281\x3\x2\x2\x2\x2BF\x282\x3\x2\x2\x2\x2BF\x283"+
		"\x3\x2\x2\x2\x2BF\x284\x3\x2\x2\x2\x2BF\x285\x3\x2\x2\x2\x2BF\x286\x3"+
		"\x2\x2\x2\x2BF\x287\x3\x2\x2\x2\x2BF\x288\x3\x2\x2\x2\x2BF\x289\x3\x2"+
		"\x2\x2\x2BF\x28A\x3\x2\x2\x2\x2BF\x28B\x3\x2\x2\x2\x2BF\x28C\x3\x2\x2"+
		"\x2\x2BF\x28D\x3\x2\x2\x2\x2BF\x28E\x3\x2\x2\x2\x2BF\x28F\x3\x2\x2\x2"+
		"\x2BF\x290\x3\x2\x2\x2\x2BF\x291\x3\x2\x2\x2\x2BF\x292\x3\x2\x2\x2\x2BF"+
		"\x293\x3\x2\x2\x2\x2BF\x294\x3\x2\x2\x2\x2BF\x295\x3\x2\x2\x2\x2BF\x296"+
		"\x3\x2\x2\x2\x2BF\x297\x3\x2\x2\x2\x2BF\x298\x3\x2\x2\x2\x2BF\x299\x3"+
		"\x2\x2\x2\x2BF\x29A\x3\x2\x2\x2\x2BF\x29B\x3\x2\x2\x2\x2BF\x29C\x3\x2"+
		"\x2\x2\x2BF\x29D\x3\x2\x2\x2\x2BF\x29E\x3\x2\x2\x2\x2BF\x29F\x3\x2\x2"+
		"\x2\x2BF\x2A0\x3\x2\x2\x2\x2BF\x2A1\x3\x2\x2\x2\x2BF\x2A2\x3\x2\x2\x2"+
		"\x2BF\x2A3\x3\x2\x2\x2\x2BF\x2A4\x3\x2\x2\x2\x2BF\x2A5\x3\x2\x2\x2\x2BF"+
		"\x2A6\x3\x2\x2\x2\x2BF\x2A7\x3\x2\x2\x2\x2BF\x2A8\x3\x2\x2\x2\x2BF\x2A9"+
		"\x3\x2\x2\x2\x2BF\x2AA\x3\x2\x2\x2\x2BF\x2AB\x3\x2\x2\x2\x2BF\x2AC\x3"+
		"\x2\x2\x2\x2BF\x2AD\x3\x2\x2\x2\x2BF\x2AE\x3\x2\x2\x2\x2BF\x2AF\x3\x2"+
		"\x2\x2\x2BF\x2B0\x3\x2\x2\x2\x2BF\x2B1\x3\x2\x2\x2\x2BF\x2B2\x3\x2\x2"+
		"\x2\x2BF\x2B3\x3\x2\x2\x2\x2BF\x2B4\x3\x2\x2\x2\x2BF\x2B5\x3\x2\x2\x2"+
		"\x2BF\x2B6\x3\x2\x2\x2\x2BF\x2B7\x3\x2\x2\x2\x2BF\x2B8\x3\x2\x2\x2\x2BF"+
		"\x2B9\x3\x2\x2\x2\x2BF\x2BA\x3\x2\x2\x2\x2BF\x2BB\x3\x2\x2\x2\x2BF\x2BC"+
		"\x3\x2\x2\x2\x2BF\x2BD\x3\x2\x2\x2\x2BF\x2BE\x3\x2\x2\x2\x2C0+\x3\x2\x2"+
		"\x2\x2C1\x2C4\a\x14\x2\x2\x2C2\x2C3\ak\x2\x2\x2C3\x2C5\a\xA0\x2\x2\x2C4"+
		"\x2C2\x3\x2\x2\x2\x2C4\x2C5\x3\x2\x2\x2\x2C5-\x3\x2\x2\x2\x2C6\x2C7\a"+
		"\x15\x2\x2\x2C7\x2C8\ak\x2\x2\x2C8\x2C9\x5\b\x5\x2\x2C9\x2CA\a*\x2\x2"+
		"\x2CA\x2CB\x5\x6\x4\x2\x2CB\x2CC\a\xA0\x2\x2\x2CC/\x3\x2\x2\x2\x2CD\x2CE"+
		"\a\x16\x2\x2\x2CE\x2CF\ak\x2\x2\x2CF\x2D0\x5\x6\x4\x2\x2D0\x2D1\a\xA0"+
		"\x2\x2\x2D1\x31\x3\x2\x2\x2\x2D2\x2D3\a\x17\x2\x2\x2D3\x2D4\ak\x2\x2\x2D4"+
		"\x2D5\x5\x6\x4\x2\x2D5\x2D6\a\xA0\x2\x2\x2D6\x33\x3\x2\x2\x2\x2D7\x2D8"+
		"\a\x1B\x2\x2\x2D8\x35\x3\x2\x2\x2\x2D9\x2DA\a\x1C\x2\x2\x2DA\x2DB\ak\x2"+
		"\x2\x2DB\x2DC\x5\x6\x4\x2\x2DC\x2DD\a\xA0\x2\x2\x2DD\x37\x3\x2\x2\x2\x2DE"+
		"\x2DF\a\x1D\x2\x2\x2DF\x39\x3\x2\x2\x2\x2E0\x2E1\a \x2\x2\x2E1\x2E2\a"+
		"k\x2\x2\x2E2\x2E3\x5\b\x5\x2\x2E3\x2E4\a\xA0\x2\x2\x2E4;\x3\x2\x2\x2\x2E5"+
		"\x2E6\a\"\x2\x2\x2E6\x2E7\ak\x2\x2\x2E7\x2E8\x5\x6\x4\x2\x2E8\x2E9\a\xA0"+
		"\x2\x2\x2E9=\x3\x2\x2\x2\x2EA\x2EB\a#\x2\x2\x2EB\x2EC\ak\x2\x2\x2EC\x2ED"+
		"\x5\b\x5\x2\x2ED\x2EE\ak\x2\x2\x2EE?\x3\x2\x2\x2\x2EF\x2F0\a$\x2\x2\x2F0"+
		"\x2F1\ak\x2\x2\x2F1\x2F2\x5\x6\x4\x2\x2F2\x2F3\a\xA0\x2\x2\x2F3\x41\x3"+
		"\x2\x2\x2\x2F4\x2F5\a%\x2\x2\x2F5\x2F6\ak\x2\x2\x2F6\x2F7\x5\x136\x9C"+
		"\x2\x2F7\x2F8\a\xA0\x2\x2\x2F8\x43\x3\x2\x2\x2\x2F9\x2FC\a&\x2\x2\x2FA"+
		"\x2FB\ak\x2\x2\x2FB\x2FD\a\xA0\x2\x2\x2FC\x2FA\x3\x2\x2\x2\x2FC\x2FD\x3"+
		"\x2\x2\x2\x2FD\x45\x3\x2\x2\x2\x2FE\x301\a\'\x2\x2\x2FF\x300\ak\x2\x2"+
		"\x300\x302\a\xA0\x2\x2\x301\x2FF\x3\x2\x2\x2\x301\x302\x3\x2\x2\x2\x302"+
		"G\x3\x2\x2\x2\x303\x304\a!\x2\x2\x304\x305\ak\x2\x2\x305\x306\x5\b\x5"+
		"\x2\x306\x307\a*\x2\x2\x307\x308\x5\x6\x4\x2\x308\x309\a\xA0\x2\x2\x309"+
		"I\x3\x2\x2\x2\x30A\x30B\a)\x2\x2\x30B\x30C\ak\x2\x2\x30C\x30D\x5\x6\x4"+
		"\x2\x30D\x30E\a*\x2\x2\x30E\x30F\x5\x6\x4\x2\x30F\x310\a\xA0\x2\x2\x310"+
		"K\x3\x2\x2\x2\x311\x312\a\x3\x2\x2\x312M\x3\x2\x2\x2\x313\x314\a\x4\x2"+
		"\x2\x314O\x3\x2\x2\x2\x315\x316\a-\x2\x2\x316\x317\ak\x2\x2\x317\x318"+
		"\x5\x6\x4\x2\x318\x319\a\xA0\x2\x2\x319Q\x3\x2\x2\x2\x31A\x31B\a/\x2\x2"+
		"\x31B\x31C\ak\x2\x2\x31C\x31D\x5\b\x5\x2\x31D\x31E\a\xA0\x2\x2\x31ES\x3"+
		"\x2\x2\x2\x31F\x322\a.\x2\x2\x320\x321\ak\x2\x2\x321\x323\a\xA0\x2\x2"+
		"\x322\x320\x3\x2\x2\x2\x322\x323\x3\x2\x2\x2\x323U\x3\x2\x2\x2\x324\x327"+
		"\a\x30\x2\x2\x325\x326\ak\x2\x2\x326\x328\a\xA0\x2\x2\x327\x325\x3\x2"+
		"\x2\x2\x327\x328\x3\x2\x2\x2\x328W\x3\x2\x2\x2\x329\x32C\a\x31\x2\x2\x32A"+
		"\x32B\ak\x2\x2\x32B\x32D\a\xA0\x2\x2\x32C\x32A\x3\x2\x2\x2\x32C\x32D\x3"+
		"\x2\x2\x2\x32DY\x3\x2\x2\x2\x32E\x333\a\x32\x2\x2\x32F\x330\ak\x2\x2\x330"+
		"\x331\x5\x6\x4\x2\x331\x332\a\xA0\x2\x2\x332\x334\x3\x2\x2\x2\x333\x32F"+
		"\x3\x2\x2\x2\x333\x334\x3\x2\x2\x2\x334[\x3\x2\x2\x2\x335\x336\a\x1A\x2"+
		"\x2\x336]\x3\x2\x2\x2\x337\x338\a\x33\x2\x2\x338\x339\ak\x2\x2\x339\x33A"+
		"\x5\x6\x4\x2\x33A\x33B\a\xA0\x2\x2\x33B_\x3\x2\x2\x2\x33C\x33D\a\x35\x2"+
		"\x2\x33D\x33E\ak\x2\x2\x33E\x33F\x5\b\x5\x2\x33F\x340\a\xA0\x2\x2\x340"+
		"\x61\x3\x2\x2\x2\x341\x342\a\x36\x2\x2\x342\x343\ak\x2\x2\x343\x344\x5"+
		"\x6\x4\x2\x344\x345\a\xA0\x2\x2\x345\x63\x3\x2\x2\x2\x346\x34C\a\x37\x2"+
		"\x2\x347\x349\ak\x2\x2\x348\x34A\x5\x136\x9C\x2\x349\x348\x3\x2\x2\x2"+
		"\x349\x34A\x3\x2\x2\x2\x34A\x34B\x3\x2\x2\x2\x34B\x34D\a\xA0\x2\x2\x34C"+
		"\x347\x3\x2\x2\x2\x34C\x34D\x3\x2\x2\x2\x34D\x65\x3\x2\x2\x2\x34E\x34F"+
		"\a\x38\x2\x2\x34F\x350\ak\x2\x2\x350\x351\x5\x6\x4\x2\x351\x352\a\xA0"+
		"\x2\x2\x352g\x3\x2\x2\x2\x353\x354\a\x39\x2\x2\x354\x355\ak\x2\x2\x355"+
		"\x356\x5\x6\x4\x2\x356\x357\a\xA0\x2\x2\x357i\x3\x2\x2\x2\x358\x359\a"+
		">\x2\x2\x359\x35A\ak\x2\x2\x35A\x35B\x5\x6\x4\x2\x35B\x35C\a\xA0\x2\x2"+
		"\x35Ck\x3\x2\x2\x2\x35D\x35E\a\x6\x2\x2\x35Em\x3\x2\x2\x2\x35F\x360\a"+
		"@\x2\x2\x360\x361\ak\x2\x2\x361\x362\x5\b\x5\x2\x362\x363\a\xA0\x2\x2"+
		"\x363o\x3\x2\x2\x2\x364\x365\a\x41\x2\x2\x365\x366\ak\x2\x2\x366\x367"+
		"\x5\x6\x4\x2\x367\x368\a\xA0\x2\x2\x368q\x3\x2\x2\x2\x369\x36A\a\x42\x2"+
		"\x2\x36A\x36B\ak\x2\x2\x36B\x36C\x5\x6\x4\x2\x36C\x36D\a\xA0\x2\x2\x36D"+
		"s\x3\x2\x2\x2\x36E\x36F\a\x43\x2\x2\x36F\x370\ak\x2\x2\x370\x371\x5\x6"+
		"\x4\x2\x371\x372\a\xA0\x2\x2\x372u\x3\x2\x2\x2\x373\x374\a\x44\x2\x2\x374"+
		"\x375\ak\x2\x2\x375\x376\x5\x6\x4\x2\x376\x377\a\xA0\x2\x2\x377w\x3\x2"+
		"\x2\x2\x378\x379\aG\x2\x2\x379\x37A\ak\x2\x2\x37A\x37B\x5\x6\x4\x2\x37B"+
		"\x37C\a\xA0\x2\x2\x37Cy\x3\x2\x2\x2\x37D\x37E\a\x46\x2\x2\x37E\x37F\a"+
		"k\x2\x2\x37F\x382\x5\x136\x9C\x2\x380\x381\a*\x2\x2\x381\x383\x5\x6\x4"+
		"\x2\x382\x380\x3\x2\x2\x2\x382\x383\x3\x2\x2\x2\x383\x384\x3\x2\x2\x2"+
		"\x384\x385\a\xA0\x2\x2\x385{\x3\x2\x2\x2\x386\x387\a\x45\x2\x2\x387\x388"+
		"\ak\x2\x2\x388\x38F\x5\x136\x9C\x2\x389\x38A\a*\x2\x2\x38A\x38D\x5\x136"+
		"\x9C\x2\x38B\x38C\a*\x2\x2\x38C\x38E\x5\x136\x9C\x2\x38D\x38B\x3\x2\x2"+
		"\x2\x38D\x38E\x3\x2\x2\x2\x38E\x390\x3\x2\x2\x2\x38F\x389\x3\x2\x2\x2"+
		"\x38F\x390\x3\x2\x2\x2\x390\x391\x3\x2\x2\x2\x391\x392\a\xA0\x2\x2\x392"+
		"}\x3\x2\x2\x2\x393\x394\aK\x2\x2\x394\x395\ak\x2\x2\x395\x396\x5\x4\x3"+
		"\x2\x396\x397\a*\x2\x2\x397\x398\x5\x6\x4\x2\x398\x399\a\xA0\x2\x2\x399"+
		"\x7F\x3\x2\x2\x2\x39A\x39B\aL\x2\x2\x39B\x39C\ak\x2\x2\x39C\x39D\x5\x136"+
		"\x9C\x2\x39D\x39E\a*\x2\x2\x39E\x39F\x5\x6\x4\x2\x39F\x3A0\a\xA0\x2\x2"+
		"\x3A0\x81\x3\x2\x2\x2\x3A1\x3A2\a\t\x2\x2\x3A2\x3A3\ak\x2\x2\x3A3\x3A4"+
		"\x5\x6\x4\x2\x3A4\x3A5\a\xA0\x2\x2\x3A5\x83\x3\x2\x2\x2\x3A6\x3A7\aP\x2"+
		"\x2\x3A7\x3A8\ak\x2\x2\x3A8\x3A9\x5\x6\x4\x2\x3A9\x3AA\a\xA0\x2\x2\x3AA"+
		"\x85\x3\x2\x2\x2\x3AB\x3AC\aQ\x2\x2\x3AC\x87\x3\x2\x2\x2\x3AD\x3AE\aS"+
		"\x2\x2\x3AE\x3AF\ak\x2\x2\x3AF\x3B0\x5\x6\x4\x2\x3B0\x3B1\a\xA0\x2\x2"+
		"\x3B1\x89\x3\x2\x2\x2\x3B2\x3B3\aT\x2\x2\x3B3\x3B4\ak\x2\x2\x3B4\x3B5"+
		"\x5\x6\x4\x2\x3B5\x3B6\a\xA0\x2\x2\x3B6\x8B\x3\x2\x2\x2\x3B7\x3B8\aU\x2"+
		"\x2\x3B8\x3B9\ak\x2\x2\x3B9\x3BA\x5\x6\x4\x2\x3BA\x3BB\a\xA0\x2\x2\x3BB"+
		"\x8D\x3\x2\x2\x2\x3BC\x3BF\aV\x2\x2\x3BD\x3BE\ak\x2\x2\x3BE\x3C0\a\xA0"+
		"\x2\x2\x3BF\x3BD\x3\x2\x2\x2\x3BF\x3C0\x3\x2\x2\x2\x3C0\x8F\x3\x2\x2\x2"+
		"\x3C1\x3C2\aY\x2\x2\x3C2\x3C3\ak\x2\x2\x3C3\x3C4\x5\x12A\x96\x2\x3C4\x3C5"+
		"\a*\x2\x2\x3C5\x3C6\x5\b\x5\x2\x3C6\x3C7\a*\x2\x2\x3C7\x3C8\x5\b\x5\x2"+
		"\x3C8\x3C9\a\xA0\x2\x2\x3C9\x91\x3\x2\x2\x2\x3CA\x3CB\aZ\x2\x2\x3CB\x3CC"+
		"\ak\x2\x2\x3CC\x3CD\x5\x6\x4\x2\x3CD\x3CE\a\xA0\x2\x2\x3CE\x93\x3\x2\x2"+
		"\x2\x3CF\x3D0\a\f\x2\x2\x3D0\x95\x3\x2\x2\x2\x3D1\x3D2\a[\x2\x2\x3D2\x3D3"+
		"\ak\x2\x2\x3D3\x3D4\x5\b\x5\x2\x3D4\x3D5\a\xA0\x2\x2\x3D5\x97\x3\x2\x2"+
		"\x2\x3D6\x3D7\a\\\x2\x2\x3D7\x3D8\ak\x2\x2\x3D8\x3D9\x5\b\x5\x2\x3D9\x3DA"+
		"\a*\x2\x2\x3DA\x3DD\x5\b\x5\x2\x3DB\x3DC\a*\x2\x2\x3DC\x3DE\x5\b\x5\x2"+
		"\x3DD\x3DB\x3\x2\x2\x2\x3DD\x3DE\x3\x2\x2\x2\x3DE\x3DF\x3\x2\x2\x2\x3DF"+
		"\x3E0\a\xA0\x2\x2\x3E0\x99\x3\x2\x2\x2\x3E1\x3E2\a_\x2\x2\x3E2\x3E3\a"+
		"k\x2\x2\x3E3\x3E4\x5\x6\x4\x2\x3E4\x3E5\a\xA0\x2\x2\x3E5\x9B\x3\x2\x2"+
		"\x2\x3E6\x3E7\a\x63\x2\x2\x3E7\x3E8\ak\x2\x2\x3E8\x3E9\x5\b\x5\x2\x3E9"+
		"\x3EA\a*\x2\x2\x3EA\x3EB\x5\x136\x9C\x2\x3EB\x3EC\a\xA0\x2\x2\x3EC\x9D"+
		"\x3\x2\x2\x2\x3ED\x3EE\ai\x2\x2\x3EE\x9F\x3\x2\x2\x2\x3EF\x3F2\aj\x2\x2"+
		"\x3F0\x3F1\ak\x2\x2\x3F1\x3F3\a\xA0\x2\x2\x3F2\x3F0\x3\x2\x2\x2\x3F2\x3F3"+
		"\x3\x2\x2\x2\x3F3\xA1\x3\x2\x2\x2\x3F4\x3F5\a\r\x2\x2\x3F5\xA3\x3\x2\x2"+
		"\x2\x3F6\x3F9\al\x2\x2\x3F7\x3F8\ak\x2\x2\x3F8\x3FA\a\xA0\x2\x2\x3F9\x3F7"+
		"\x3\x2\x2\x2\x3F9\x3FA\x3\x2\x2\x2\x3FA\xA5\x3\x2\x2\x2\x3FB\x3FC\am\x2"+
		"\x2\x3FC\x3FD\ak\x2\x2\x3FD\x3FE\x5\b\x5\x2\x3FE\x3FF\a*\x2\x2\x3FF\x400"+
		"\x5\x6\x4\x2\x400\x401\a\xA0\x2\x2\x401\xA7\x3\x2\x2\x2\x402\x403\ao\x2"+
		"\x2\x403\x404\ak\x2\x2\x404\x405\x5\x6\x4\x2\x405\x406\a\xA0\x2\x2\x406"+
		"\xA9\x3\x2\x2\x2\x407\x408\t\x3\x2\x2\x408\xAB\x3\x2\x2\x2\x409\x40A\a"+
		"q\x2\x2\x40A\x40B\ak\x2\x2\x40B\x40C\x5\b\x5\x2\x40C\x40D\a*\x2\x2\x40D"+
		"\x40E\x5\x136\x9C\x2\x40E\x40F\a*\x2\x2\x40F\x410\x5\x136\x9C\x2\x410"+
		"\x411\a\xA0\x2\x2\x411\xAD\x3\x2\x2\x2\x412\x413\a\xF\x2\x2\x413\xAF\x3"+
		"\x2\x2\x2\x414\x415\au\x2\x2\x415\x416\ak\x2\x2\x416\x417\x5\x136\x9C"+
		"\x2\x417\x418\a\xA0\x2\x2\x418\xB1\x3\x2\x2\x2\x419\x41C\av\x2\x2\x41A"+
		"\x41B\ak\x2\x2\x41B\x41D\a\xA0\x2\x2\x41C\x41A\x3\x2\x2\x2\x41C\x41D\x3"+
		"\x2\x2\x2\x41D\xB3\x3\x2\x2\x2\x41E\x421\aw\x2\x2\x41F\x420\ak\x2\x2\x420"+
		"\x422\a\xA0\x2\x2\x421\x41F\x3\x2\x2\x2\x421\x422\x3\x2\x2\x2\x422\xB5"+
		"\x3\x2\x2\x2\x423\x424\ay\x2\x2\x424\xB7\x3\x2\x2\x2\x425\x42A\a}\x2\x2"+
		"\x426\x427\ak\x2\x2\x427\x428\x5\x6\x4\x2\x428\x429\a\xA0\x2\x2\x429\x42B"+
		"\x3\x2\x2\x2\x42A\x426\x3\x2\x2\x2\x42A\x42B\x3\x2\x2\x2\x42B\xB9\x3\x2"+
		"\x2\x2\x42C\x42F\a\x81\x2\x2\x42D\x42E\ak\x2\x2\x42E\x430\a\xA0\x2\x2"+
		"\x42F\x42D\x3\x2\x2\x2\x42F\x430\x3\x2\x2\x2\x430\xBB\x3\x2\x2\x2\x431"+
		"\x434\a\x82\x2\x2\x432\x433\ak\x2\x2\x433\x435\a\xA0\x2\x2\x434\x432\x3"+
		"\x2\x2\x2\x434\x435\x3\x2\x2\x2\x435\xBD\x3\x2\x2\x2\x436\x437\a\x84\x2"+
		"\x2\x437\x438\ak\x2\x2\x438\x439\x5\x4\x3\x2\x439\x43A\a*\x2\x2\x43A\x43B"+
		"\x5\x136\x9C\x2\x43B\x43C\a\xA0\x2\x2\x43C\xBF\x3\x2\x2\x2\x43D\x43E\a"+
		"\x85\x2\x2\x43E\x43F\ak\x2\x2\x43F\x440\x5\x4\x3\x2\x440\x441\a*\x2\x2"+
		"\x441\x442\x5\x136\x9C\x2\x442\x443\a\xA0\x2\x2\x443\xC1\x3\x2\x2\x2\x444"+
		"\x445\a\x86\x2\x2\x445\x446\ak\x2\x2\x446\x447\x5\x4\x3\x2\x447\x448\a"+
		"*\x2\x2\x448\x449\x5\x136\x9C\x2\x449\x44A\a\xA0\x2\x2\x44A\xC3\x3\x2"+
		"\x2\x2\x44B\x44C\a\x87\x2\x2\x44C\xC5\x3\x2\x2\x2\x44D\x44E\a\x88\x2\x2"+
		"\x44E\xC7\x3\x2\x2\x2\x44F\x450\a\x89\x2\x2\x450\xC9\x3\x2\x2\x2\x451"+
		"\x454\a\x8C\x2\x2\x452\x453\ak\x2\x2\x453\x455\a\xA0\x2\x2\x454\x452\x3"+
		"\x2\x2\x2\x454\x455\x3\x2\x2\x2\x455\xCB\x3\x2\x2\x2\x456\x457\a\x8E\x2"+
		"\x2\x457\xCD\x3\x2\x2\x2\x458\x45B\a\x8F\x2\x2\x459\x45A\ak\x2\x2\x45A"+
		"\x45C\a\xA0\x2\x2\x45B\x459\x3\x2\x2\x2\x45B\x45C\x3\x2\x2\x2\x45C\xCF"+
		"\x3\x2\x2\x2\x45D\x45E\a\x90\x2\x2\x45E\x45F\ak\x2\x2\x45F\x460\x5\x6"+
		"\x4\x2\x460\x461\a\xA0\x2\x2\x461\xD1\x3\x2\x2\x2\x462\x463\a\x92\x2\x2"+
		"\x463\xD3\x3\x2\x2\x2\x464\x465\a\x93\x2\x2\x465\x466\ak\x2\x2\x466\x467"+
		"\x5\b\x5\x2\x467\x468\a*\x2\x2\x468\x469\x5\x6\x4\x2\x469\x46A\a\xA0\x2"+
		"\x2\x46A\xD5\x3\x2\x2\x2\x46B\x46C\a\x96\x2\x2\x46C\x46D\ak\x2\x2\x46D"+
		"\x46E\x5\x6\x4\x2\x46E\x46F\a\xA0\x2\x2\x46F\xD7\x3\x2\x2\x2\x470\x471"+
		"\a\x97\x2\x2\x471\x472\ak\x2\x2\x472\x473\x5\x6\x4\x2\x473\x474\a\xA0"+
		"\x2\x2\x474\xD9\x3\x2\x2\x2\x475\x476\a\x98\x2\x2\x476\x477\ak\x2\x2\x477"+
		"\x478\x5\x136\x9C\x2\x478\x479\a*\x2\x2\x479\x47A\x5\x6\x4\x2\x47A\x47B"+
		"\a\xA0\x2\x2\x47B\xDB\x3\x2\x2\x2\x47C\x47D\a\x99\x2\x2\x47D\x47E\ak\x2"+
		"\x2\x47E\x47F\x5\b\x5\x2\x47F\x480\a*\x2\x2\x480\x481\x5\b\x5\x2\x481"+
		"\x482\a*\x2\x2\x482\x483\x5\b\x5\x2\x483\x484\a\xA0\x2\x2\x484\xDD\x3"+
		"\x2\x2\x2\x485\x486\a\x9A\x2\x2\x486\x487\ak\x2\x2\x487\x488\x5\x6\x4"+
		"\x2\x488\x489\a\xA0\x2\x2\x489\xDF\x3\x2\x2\x2\x48A\x48B\a\x9B\x2\x2\x48B"+
		"\x48C\ak\x2\x2\x48C\x48D\x5\x6\x4\x2\x48D\x48E\a\xA0\x2\x2\x48E\xE1\x3"+
		"\x2\x2\x2\x48F\x494\a\x9C\x2\x2\x490\x491\ak\x2\x2\x491\x492\x5\x136\x9C"+
		"\x2\x492\x493\a\xA0\x2\x2\x493\x495\x3\x2\x2\x2\x494\x490\x3\x2\x2\x2"+
		"\x494\x495\x3\x2\x2\x2\x495\xE3\x3\x2\x2\x2\x496\x497\a\x9D\x2\x2\x497"+
		"\x498\ak\x2\x2\x498\x499\x5\x4\x3\x2\x499\x49A\a*\x2\x2\x49A\x49B\x5\x136"+
		"\x9C\x2\x49B\x49C\a\xA0\x2\x2\x49C\xE5\x3\x2\x2\x2\x49D\x4A0\a\xA3\x2"+
		"\x2\x49E\x49F\ak\x2\x2\x49F\x4A1\a\xA0\x2\x2\x4A0\x49E\x3\x2\x2\x2\x4A0"+
		"\x4A1\x3\x2\x2\x2\x4A1\xE7\x3\x2\x2\x2\x4A2\x4A5\a\xA7\x2\x2\x4A3\x4A4"+
		"\ak\x2\x2\x4A4\x4A6\a\xA0\x2\x2\x4A5\x4A3\x3\x2\x2\x2\x4A5\x4A6\x3\x2"+
		"\x2\x2\x4A6\xE9\x3\x2\x2\x2\x4A7\x4A8\a\xA4\x2\x2\x4A8\x4A9\ak\x2\x2\x4A9"+
		"\x4AA\x5\x6\x4\x2\x4AA\x4AB\a\xA0\x2\x2\x4AB\xEB\x3\x2\x2\x2\x4AC\x4AD"+
		"\a\xA9\x2\x2\x4AD\xED\x3\x2\x2\x2\x4AE\x4B1\a\xAC\x2\x2\x4AF\x4B0\ak\x2"+
		"\x2\x4B0\x4B2\a\xA0\x2\x2\x4B1\x4AF\x3\x2\x2\x2\x4B1\x4B2\x3\x2\x2\x2"+
		"\x4B2\xEF\x3\x2\x2\x2\x4B3\x4B4\a\xAD\x2\x2\x4B4\x4B5\ak\x2\x2\x4B5\x4B6"+
		"\x5\x6\x4\x2\x4B6\x4B7\a\xA0\x2\x2\x4B7\xF1\x3\x2\x2\x2\x4B8\x4BB\a\xAE"+
		"\x2\x2\x4B9\x4BA\ak\x2\x2\x4BA\x4BC\a\xA0\x2\x2\x4BB\x4B9\x3\x2\x2\x2"+
		"\x4BB\x4BC\x3\x2\x2\x2\x4BC\xF3\x3\x2\x2\x2\x4BD\x4C2\a\xB1\x2\x2\x4BE"+
		"\x4BF\ak\x2\x2\x4BF\x4C0\x5\x6\x4\x2\x4C0\x4C1\a\xA0\x2\x2\x4C1\x4C3\x3"+
		"\x2\x2\x2\x4C2\x4BE\x3\x2\x2\x2\x4C2\x4C3\x3\x2\x2\x2\x4C3\xF5\x3\x2\x2"+
		"\x2\x4C4\x4C5\a\xB3\x2\x2\x4C5\x4C6\ak\x2\x2\x4C6\x4C7\x5\x6\x4\x2\x4C7"+
		"\x4C8\a\xA0\x2\x2\x4C8\xF7\x3\x2\x2\x2\x4C9\x4CA\a\xB5\x2\x2\x4CA\x4CB"+
		"\ak\x2\x2\x4CB\x4CC\x5\x6\x4\x2\x4CC\x4CD\a\xA0\x2\x2\x4CD\xF9\x3\x2\x2"+
		"\x2\x4CE\x4CF\a\xB6\x2\x2\x4CF\x4D0\ak\x2\x2\x4D0\x4D1\x5\x6\x4\x2\x4D1"+
		"\x4D2\a\xA0\x2\x2\x4D2\xFB\x3\x2\x2\x2\x4D3\x4D4\a\xB7\x2\x2\x4D4\x4D5"+
		"\ak\x2\x2\x4D5\x4D6\x5\x6\x4\x2\x4D6\x4D7\a\xA0\x2\x2\x4D7\xFD\x3\x2\x2"+
		"\x2\x4D8\x4D9\a\xB8\x2\x2\x4D9\x4DA\ak\x2\x2\x4DA\x4DB\x5\x6\x4\x2\x4DB"+
		"\x4DC\a\xA0\x2\x2\x4DC\xFF\x3\x2\x2\x2\x4DD\x4DE\a\xB9\x2\x2\x4DE\x4DF"+
		"\ak\x2\x2\x4DF\x4E0\x5\x6\x4\x2\x4E0\x4E1\a\xA0\x2\x2\x4E1\x101\x3\x2"+
		"\x2\x2\x4E2\x4E3\a\xBA\x2\x2\x4E3\x4E4\ak\x2\x2\x4E4\x4E5\x5\x6\x4\x2"+
		"\x4E5\x4E6\a\xA0\x2\x2\x4E6\x103\x3\x2\x2\x2\x4E7\x4E8\a\xBB\x2\x2\x4E8"+
		"\x4E9\ak\x2\x2\x4E9\x4EA\x5\x6\x4\x2\x4EA\x4EB\a\xA0\x2\x2\x4EB\x105\x3"+
		"\x2\x2\x2\x4EC\x4ED\a\xBC\x2\x2\x4ED\x4EE\ak\x2\x2\x4EE\x4EF\x5\x6\x4"+
		"\x2\x4EF\x4F0\a\xA0\x2\x2\x4F0\x107\x3\x2\x2\x2\x4F1\x4F2\a\x11\x2\x2"+
		"\x4F2\x109\x3\x2\x2\x2\x4F3\x4F6\a\xBD\x2\x2\x4F4\x4F5\ak\x2\x2\x4F5\x4F7"+
		"\a\xA0\x2\x2\x4F6\x4F4\x3\x2\x2\x2\x4F6\x4F7\x3\x2\x2\x2\x4F7\x10B\x3"+
		"\x2\x2\x2\x4F8\x4F9\a\xBE\x2\x2\x4F9\x4FA\ak\x2\x2\x4FA\x4FB\x5\x6\x4"+
		"\x2\x4FB\x4FC\a\xA0\x2\x2\x4FC\x10D\x3\x2\x2\x2\x4FD\x500\a\xBF\x2\x2"+
		"\x4FE\x4FF\ak\x2\x2\x4FF\x501\a\xA0\x2\x2\x500\x4FE\x3\x2\x2\x2\x500\x501"+
		"\x3\x2\x2\x2\x501\x10F\x3\x2\x2\x2\x502\x503\a\xC3\x2\x2\x503\x504\ak"+
		"\x2\x2\x504\x505\x5\x6\x4\x2\x505\x506\a\xA0\x2\x2\x506\x111\x3\x2\x2"+
		"\x2\x507\x508\a\xC6\x2\x2\x508\x509\ak\x2\x2\x509\x50A\x5\b\x5\x2\x50A"+
		"\x50B\a*\x2\x2\x50B\x50C\x5\x6\x4\x2\x50C\x50D\a\xA0\x2\x2\x50D\x113\x3"+
		"\x2\x2\x2\x50E\x50F\a\xC7\x2\x2\x50F\x510\ak\x2\x2\x510\x511\x5\b\x5\x2"+
		"\x511\x512\a*\x2\x2\x512\x513\x5\x6\x4\x2\x513\x514\a\xA0\x2\x2\x514\x115"+
		"\x3\x2\x2\x2\x515\x516\x5\x11A\x8E\x2\x516\x517\a\a\x2\x2\x517\x518\x5"+
		"\x11C\x8F\x2\x518\x117\x3\x2\x2\x2\x519\x51A\x5\x11A\x8E\x2\x51A\x51B"+
		"\a\n\x2\x2\x51B\x51C\x5\x11C\x8F\x2\x51C\x119\x3\x2\x2\x2\x51D\x527\x5"+
		"\x120\x91\x2\x51E\x526\x5\x120\x91\x2\x51F\x526\x5L\'\x2\x520\x526\x5"+
		"N(\x2\x521\x526\x5\xAEX\x2\x522\x526\x5\xECw\x2\x523\x526\x5\x86\x44\x2"+
		"\x524\x526\x5\xC8\x65\x2\x525\x51E\x3\x2\x2\x2\x525\x51F\x3\x2\x2\x2\x525"+
		"\x520\x3\x2\x2\x2\x525\x521\x3\x2\x2\x2\x525\x522\x3\x2\x2\x2\x525\x523"+
		"\x3\x2\x2\x2\x525\x524\x3\x2\x2\x2\x526\x529\x3\x2\x2\x2\x527\x525\x3"+
		"\x2\x2\x2\x527\x528\x3\x2\x2\x2\x528\x52B\x3\x2\x2\x2\x529\x527\x3\x2"+
		"\x2\x2\x52A\x51D\x3\x2\x2\x2\x52A\x52B\x3\x2\x2\x2\x52B\x530\x3\x2\x2"+
		"\x2\x52C\x52E\x5\x122\x92\x2\x52D\x52F\a\x8D\x2\x2\x52E\x52D\x3\x2\x2"+
		"\x2\x52E\x52F\x3\x2\x2\x2\x52F\x531\x3\x2\x2\x2\x530\x52C\x3\x2\x2\x2"+
		"\x530\x531\x3\x2\x2\x2\x531\x11B\x3\x2\x2\x2\x532\x534\a\x8D\x2\x2\x533"+
		"\x532\x3\x2\x2\x2\x533\x534\x3\x2\x2\x2\x534\x535\x3\x2\x2\x2\x535\x537"+
		"\x5\x122\x92\x2\x536\x533\x3\x2\x2\x2\x536\x537\x3\x2\x2\x2\x537\x539"+
		"\x3\x2\x2\x2\x538\x53A\x5\x120\x91\x2\x539\x538\x3\x2\x2\x2\x539\x53A"+
		"\x3\x2\x2\x2\x53A\x11D\x3\x2\x2\x2\x53B\x540\x5\x116\x8C\x2\x53C\x53D"+
		"\a*\x2\x2\x53D\x53F\x5\x116\x8C\x2\x53E\x53C\x3\x2\x2\x2\x53F\x542\x3"+
		"\x2\x2\x2\x540\x53E\x3\x2\x2\x2\x540\x541\x3\x2\x2\x2\x541\x11F\x3\x2"+
		"\x2\x2\x542\x540\x3\x2\x2\x2\x543\x544\a\x5\x2\x2\x544\x121\x3\x2\x2\x2"+
		"\x545\x546\a\x10\x2\x2\x546\x123\x3\x2\x2\x2\x547\x552\ak\x2\x2\x548\x551"+
		"\x5\b\x5\x2\x549\x551\x5\x14\v\x2\x54A\x551\x5\x16\f\x2\x54B\x551\x5\x1C"+
		"\xF\x2\x54C\x551\x5\x1E\x10\x2\x54D\x551\x5 \x11\x2\x54E\x551\x5(\x15"+
		"\x2\x54F\x551\x5\x128\x95\x2\x550\x548\x3\x2\x2\x2\x550\x549\x3\x2\x2"+
		"\x2\x550\x54A\x3\x2\x2\x2\x550\x54B\x3\x2\x2\x2\x550\x54C\x3\x2\x2\x2"+
		"\x550\x54D\x3\x2\x2\x2\x550\x54E\x3\x2\x2\x2\x550\x54F\x3\x2\x2\x2\x551"+
		"\x554\x3\x2\x2\x2\x552\x550\x3\x2\x2\x2\x552\x553\x3\x2\x2\x2\x553\x555"+
		"\x3\x2\x2\x2\x554\x552\x3\x2\x2\x2\x555\x556\a\xA0\x2\x2\x556\x125\x3"+
		"\x2\x2\x2\x557\x558\a\x62\x2\x2\x558\x559\x5\x11E\x90\x2\x559\x564\a("+
		"\x2\x2\x55A\x563\x5\b\x5\x2\x55B\x563\x5\x14\v\x2\x55C\x563\x5\x16\f\x2"+
		"\x55D\x563\x5\x1C\xF\x2\x55E\x563\x5\x1E\x10\x2\x55F\x563\x5 \x11\x2\x560"+
		"\x563\x5(\x15\x2\x561\x563\x5\x128\x95\x2\x562\x55A\x3\x2\x2\x2\x562\x55B"+
		"\x3\x2\x2\x2\x562\x55C\x3\x2\x2\x2\x562\x55D\x3\x2\x2\x2\x562\x55E\x3"+
		"\x2\x2\x2\x562\x55F\x3\x2\x2\x2\x562\x560\x3\x2\x2\x2\x562\x561\x3\x2"+
		"\x2\x2\x563\x566\x3\x2\x2\x2\x564\x562\x3\x2\x2\x2\x564\x565\x3\x2\x2"+
		"\x2\x565\x567\x3\x2\x2\x2\x566\x564\x3\x2\x2\x2\x567\x568\a\x95\x2\x2"+
		"\x568\x127\x3\x2\x2\x2\x569\x56A\aX\x2\x2\x56A\x56B\x5\x12A\x96\x2\x56B"+
		"\x56C\a\xAF\x2\x2\x56C\x56F\x5\x6\x4\x2\x56D\x56E\a;\x2\x2\x56E\x570\x5"+
		"\x6\x4\x2\x56F\x56D\x3\x2\x2\x2\x56F\x570\x3\x2\x2\x2\x570\x571\x3\x2"+
		"\x2\x2\x571\x572\aH\x2\x2\x572\x129\x3\x2\x2\x2\x573\x574\b\x96\x1\x2"+
		"\x574\x57A\x5\x12C\x97\x2\x575\x57A\x5\x12E\x98\x2\x576\x57A\x5\x130\x99"+
		"\x2\x577\x57A\x5\x132\x9A\x2\x578\x57A\x5\x134\x9B\x2\x579\x573\x3\x2"+
		"\x2\x2\x579\x575\x3\x2\x2\x2\x579\x576\x3\x2\x2\x2\x579\x577\x3\x2\x2"+
		"\x2\x579\x578\x3\x2\x2\x2\x57A\x580\x3\x2\x2\x2\x57B\x57C\f\b\x2\x2\x57C"+
		"\x57D\t\x4\x2\x2\x57D\x57F\x5\x12A\x96\t\x57E\x57B\x3\x2\x2\x2\x57F\x582"+
		"\x3\x2\x2\x2\x580\x57E\x3\x2\x2\x2\x580\x581\x3\x2\x2\x2\x581\x12B\x3"+
		"\x2\x2\x2\x582\x580\x3\x2\x2\x2\x583\x584\a{\x2\x2\x584\x585\x5\x12A\x96"+
		"\x2\x585\x12D\x3\x2\x2\x2\x586\x587\ak\x2\x2\x587\x588\x5\x12A\x96\x2"+
		"\x588\x589\a\xA0\x2\x2\x589\x12F\x3\x2\x2\x2\x58A\x58B\x5*\x16\x2\x58B"+
		"\x58C\t\x5\x2\x2\x58C\x58D\x5*\x16\x2\x58D\x131\x3\x2\x2\x2\x58E\x598"+
		"\x5\x17A\xBE\x2\x58F\x598\x5\x182\xC2\x2\x590\x598\x5\x176\xBC\x2\x591"+
		"\x598\x5\x180\xC1\x2\x592\x598\x5\x184\xC3\x2\x593\x598\x5\x174\xBB\x2"+
		"\x594\x598\x5\x178\xBD\x2\x595\x598\x5\x172\xBA\x2\x596\x598\x5\x17C\xBF"+
		"\x2\x597\x58E\x3\x2\x2\x2\x597\x58F\x3\x2\x2\x2\x597\x590\x3\x2\x2\x2"+
		"\x597\x591\x3\x2\x2\x2\x597\x592\x3\x2\x2\x2\x597\x593\x3\x2\x2\x2\x597"+
		"\x594\x3\x2\x2\x2\x597\x595\x3\x2\x2\x2\x597\x596\x3\x2\x2\x2\x598\x133"+
		"\x3\x2\x2\x2\x599\x59A\x5\x136\x9C\x2\x59A\x59B\t\x6\x2\x2\x59B\x59C\x5"+
		"\x136\x9C\x2\x59C\x135\x3\x2\x2\x2\x59D\x59E\b\x9C\x1\x2\x59E\x59F\x5"+
		"\x138\x9D\x2\x59F\x5A8\x3\x2\x2\x2\x5A0\x5A1\f\x5\x2\x2\x5A1\x5A2\t\a"+
		"\x2\x2\x5A2\x5A7\x5\x136\x9C\x6\x5A3\x5A4\f\x4\x2\x2\x5A4\x5A5\t\b\x2"+
		"\x2\x5A5\x5A7\x5\x136\x9C\x5\x5A6\x5A0\x3\x2\x2\x2\x5A6\x5A3\x3\x2\x2"+
		"\x2\x5A7\x5AA\x3\x2\x2\x2\x5A8\x5A6\x3\x2\x2\x2\x5A8\x5A9\x3\x2\x2\x2"+
		"\x5A9\x137\x3\x2\x2\x2\x5AA\x5A8\x3\x2\x2\x2\x5AB\x5B2\x5\x13A\x9E\x2"+
		"\x5AC\x5B2\x5\x13C\x9F\x2\x5AD\x5B2\x5\x13E\xA0\x2\x5AE\x5B2\x5\x144\xA3"+
		"\x2\x5AF\x5B2\x5\x140\xA1\x2\x5B0\x5B2\x5\x142\xA2\x2\x5B1\x5AB\x3\x2"+
		"\x2\x2\x5B1\x5AC\x3\x2\x2\x2\x5B1\x5AD\x3\x2\x2\x2\x5B1\x5AE\x3\x2\x2"+
		"\x2\x5B1\x5AF\x3\x2\x2\x2\x5B1\x5B0\x3\x2\x2\x2\x5B2\x139\x3\x2\x2\x2"+
		"\x5B3\x5B4\a\b\x2\x2\x5B4\x13B\x3\x2\x2\x2\x5B5\x5B6\ar\x2\x2\x5B6\x5B7"+
		"\x5\x136\x9C\x2\x5B7\x13D\x3\x2\x2\x2\x5B8\x5B9\ak\x2\x2\x5B9\x5BA\x5"+
		"\x136\x9C\x2\x5BA\x5BB\a\xA0\x2\x2\x5BB\x13F\x3\x2\x2\x2\x5BC\x5BD\ap"+
		"\x2\x2\x5BD\x141\x3\x2\x2\x2\x5BE\x5BF\a\v\x2\x2\x5BF\x143\x3\x2\x2\x2"+
		"\x5C0\x5D3\x5\x166\xB4\x2\x5C1\x5D3\x5\x162\xB2\x2\x5C2\x5D3\x5\x164\xB3"+
		"\x2\x5C3\x5D3\x5\x160\xB1\x2\x5C4\x5D3\x5\x16C\xB7\x2\x5C5\x5D3\x5\x14E"+
		"\xA8\x2\x5C6\x5D3\x5\x15C\xAF\x2\x5C7\x5D3\x5\x168\xB5\x2\x5C8\x5D3\x5"+
		"\x170\xB9\x2\x5C9\x5D3\x5\x14C\xA7\x2\x5CA\x5D3\x5\x158\xAD\x2\x5CB\x5D3"+
		"\x5\x15A\xAE\x2\x5CC\x5D3\x5\x150\xA9\x2\x5CD\x5D3\x5\x152\xAA\x2\x5CE"+
		"\x5D3\x5\x154\xAB\x2\x5CF\x5D3\x5\x15E\xB0\x2\x5D0\x5D3\x5\x16A\xB6\x2"+
		"\x5D1\x5D3\x5\x14A\xA6\x2\x5D2\x5C0\x3\x2\x2\x2\x5D2\x5C1\x3\x2\x2\x2"+
		"\x5D2\x5C2\x3\x2\x2\x2\x5D2\x5C3\x3\x2\x2\x2\x5D2\x5C4\x3\x2\x2\x2\x5D2"+
		"\x5C5\x3\x2\x2\x2\x5D2\x5C6\x3\x2\x2\x2\x5D2\x5C7\x3\x2\x2\x2\x5D2\x5C8"+
		"\x3\x2\x2\x2\x5D2\x5C9\x3\x2\x2\x2\x5D2\x5CA\x3\x2\x2\x2\x5D2\x5CB\x3"+
		"\x2\x2\x2\x5D2\x5CC\x3\x2\x2\x2\x5D2\x5CD\x3\x2\x2\x2\x5D2\x5CE\x3\x2"+
		"\x2\x2\x5D2\x5CF\x3\x2\x2\x2\x5D2\x5D0\x3\x2\x2\x2\x5D2\x5D1\x3\x2\x2"+
		"\x2\x5D3\x145\x3\x2\x2\x2\x5D4\x5D5\a+\x2\x2\x5D5\x5D6\ak\x2\x2\x5D6\x5D7"+
		"\x5\b\x5\x2\x5D7\x5D8\a*\x2\x2\x5D8\x5D9\x5\b\x5\x2\x5D9\x5DA\a\xA0\x2"+
		"\x2\x5DA\x147\x3\x2\x2\x2\x5DB\x5DC\aJ\x2\x2\x5DC\x5DD\ak\x2\x2\x5DD\x5DE"+
		"\x5\x6\x4\x2\x5DE\x5DF\a\xA0\x2\x2\x5DF\x149\x3\x2\x2\x2\x5E0\x5E3\aO"+
		"\x2\x2\x5E1\x5E2\ak\x2\x2\x5E2\x5E4\a\xA0\x2\x2\x5E3\x5E1\x3\x2\x2\x2"+
		"\x5E3\x5E4\x3\x2\x2\x2\x5E4\x14B\x3\x2\x2\x2\x5E5\x5E6\a^\x2\x2\x5E6\x14D"+
		"\x3\x2\x2\x2\x5E7\x5E8\a`\x2\x2\x5E8\x5E9\ak\x2\x2\x5E9\x5EA\x5\x6\x4"+
		"\x2\x5EA\x5EB\a\xA0\x2\x2\x5EB\x14F\x3\x2\x2\x2\x5EC\x5EF\a\x66\x2\x2"+
		"\x5ED\x5EE\ak\x2\x2\x5EE\x5F0\a\xA0\x2\x2\x5EF\x5ED\x3\x2\x2\x2\x5EF\x5F0"+
		"\x3\x2\x2\x2\x5F0\x151\x3\x2\x2\x2\x5F1\x5F4\ag\x2\x2\x5F2\x5F3\ak\x2"+
		"\x2\x5F3\x5F5\a\xA0\x2\x2\x5F4\x5F2\x3\x2\x2\x2\x5F4\x5F5\x3\x2\x2\x2"+
		"\x5F5\x153\x3\x2\x2\x2\x5F6\x5F9\ah\x2\x2\x5F7\x5F8\ak\x2\x2\x5F8\x5FA"+
		"\a\xA0\x2\x2\x5F9\x5F7\x3\x2\x2\x2\x5F9\x5FA\x3\x2\x2\x2\x5FA\x155\x3"+
		"\x2\x2\x2\x5FB\x5FE\an\x2\x2\x5FC\x5FD\ak\x2\x2\x5FD\x5FF\a\xA0\x2\x2"+
		"\x5FE\x5FC\x3\x2\x2\x2\x5FE\x5FF\x3\x2\x2\x2\x5FF\x157\x3\x2\x2\x2\x600"+
		"\x601\az\x2\x2\x601\x602\ak\x2\x2\x602\x603\a\a\x2\x2\x603\x604\a\xA0"+
		"\x2\x2\x604\x159\x3\x2\x2\x2\x605\x606\az\x2\x2\x606\x15B\x3\x2\x2\x2"+
		"\x607\x608\a~\x2\x2\x608\x609\ak\x2\x2\x609\x60A\x5\x6\x4\x2\x60A\x60B"+
		"\a\xA0\x2\x2\x60B\x15D\x3\x2\x2\x2\x60C\x60D\a\x80\x2\x2\x60D\x60E\ak"+
		"\x2\x2\x60E\x60F\x5\x6\x4\x2\x60F\x610\a\xA0\x2\x2\x610\x15F\x3\x2\x2"+
		"\x2\x611\x612\a\xA1\x2\x2\x612\x613\ak\x2\x2\x613\x614\x5\x6\x4\x2\x614"+
		"\x615\a\xA0\x2\x2\x615\x161\x3\x2\x2\x2\x616\x617\a\xA1\x2\x2\x617\x618"+
		"\ak\x2\x2\x618\x619\x5\x6\x4\x2\x619\x61A\a\xA0\x2\x2\x61A\x163\x3\x2"+
		"\x2\x2\x61B\x61C\a\xA1\x2\x2\x61C\x61D\ak\x2\x2\x61D\x61E\x5\x6\x4\x2"+
		"\x61E\x61F\a\xA0\x2\x2\x61F\x165\x3\x2\x2\x2\x620\x621\a\xA1\x2\x2\x621"+
		"\x622\ak\x2\x2\x622\x623\x5\x6\x4\x2\x623\x624\a\xA0\x2\x2\x624\x167\x3"+
		"\x2\x2\x2\x625\x626\a\xA8\x2\x2\x626\x627\ak\x2\x2\x627\x628\x5\x6\x4"+
		"\x2\x628\x629\a\xA0\x2\x2\x629\x169\x3\x2\x2\x2\x62A\x62D\a\xB4\x2\x2"+
		"\x62B\x62C\ak\x2\x2\x62C\x62E\a\xA0\x2\x2\x62D\x62B\x3\x2\x2\x2\x62D\x62E"+
		"\x3\x2\x2\x2\x62E\x16B\x3\x2\x2\x2\x62F\x630\a\xC0\x2\x2\x630\x631\ak"+
		"\x2\x2\x631\x632\x5\x6\x4\x2\x632\x633\a\xA0\x2\x2\x633\x16D\x3\x2\x2"+
		"\x2\x634\x635\a\xC1\x2\x2\x635\x636\ak\x2\x2\x636\x637\x5\x6\x4\x2\x637"+
		"\x638\a\xA0\x2\x2\x638\x16F\x3\x2\x2\x2\x639\x63C\a\xC5\x2\x2\x63A\x63B"+
		"\ak\x2\x2\x63B\x63D\a\xA0\x2\x2\x63C\x63A\x3\x2\x2\x2\x63C\x63D\x3\x2"+
		"\x2\x2\x63D\x171\x3\x2\x2\x2\x63E\x641\a,\x2\x2\x63F\x640\ak\x2\x2\x640"+
		"\x642\a\xA0\x2\x2\x641\x63F\x3\x2\x2\x2\x641\x642\x3\x2\x2\x2\x642\x173"+
		"\x3\x2\x2\x2\x643\x646\a\x34\x2\x2\x644\x645\ak\x2\x2\x645\x647\a\xA0"+
		"\x2\x2\x646\x644\x3\x2\x2\x2\x646\x647\x3\x2\x2\x2\x647\x175\x3\x2\x2"+
		"\x2\x648\x649\a<\x2\x2\x649\x64A\ak\x2\x2\x64A\x64B\x5*\x16\x2\x64B\x64C"+
		"\a*\x2\x2\x64C\x64D\x5*\x16\x2\x64D\x64E\a\xA0\x2\x2\x64E\x177\x3\x2\x2"+
		"\x2\x64F\x650\a?\x2\x2\x650\x653\ak\x2\x2\x651\x654\a\v\x2\x2\x652\x654"+
		"\x5\b\x5\x2\x653\x651\x3\x2\x2\x2\x653\x652\x3\x2\x2\x2\x654\x655\x3\x2"+
		"\x2\x2\x655\x656\a\xA0\x2\x2\x656\x179\x3\x2\x2\x2\x657\x658\a\x83\x2"+
		"\x2\x658\x659\ak\x2\x2\x659\x65A\a\a\x2\x2\x65A\x660\a\xA0\x2\x2\x65B"+
		"\x65C\a\x12\x2\x2\x65C\x65D\ak\x2\x2\x65D\x65E\a\a\x2\x2\x65E\x660\a\xA0"+
		"\x2\x2\x65F\x657\x3\x2\x2\x2\x65F\x65B\x3\x2\x2\x2\x660\x17B\x3\x2\x2"+
		"\x2\x661\x662\aI\x2\x2\x662\x663\ak\x2\x2\x663\x664\x5\x6\x4\x2\x664\x665"+
		"\a\xA0\x2\x2\x665\x17D\x3\x2\x2\x2\x666\x667\aR\x2\x2\x667\x668\ak\x2"+
		"\x2\x668\x669\x5\x6\x4\x2\x669\x66A\a\xA0\x2\x2\x66A\x17F\x3\x2\x2\x2"+
		"\x66B\x66E\a]\x2\x2\x66C\x66D\ak\x2\x2\x66D\x66F\a\xA0\x2\x2\x66E\x66C"+
		"\x3\x2\x2\x2\x66E\x66F\x3\x2\x2\x2\x66F\x181\x3\x2\x2\x2\x670\x671\a\xAB"+
		"\x2\x2\x671\x672\ak\x2\x2\x672\x673\x5*\x16\x2\x673\x674\a*\x2\x2\x674"+
		"\x675\x5*\x16\x2\x675\x676\a\xA0\x2\x2\x676\x183\x3\x2\x2\x2\x677\x67A"+
		"\a\xC8\x2\x2\x678\x679\ak\x2\x2\x679\x67B\a\xA0\x2\x2\x67A\x678\x3\x2"+
		"\x2\x2\x67A\x67B\x3\x2\x2\x2\x67B\x185\x3\x2\x2\x2\x67C\x67F\x5\x120\x91"+
		"\x2\x67D\x67F\x5\x122\x92\x2\x67E\x67C\x3\x2\x2\x2\x67E\x67D\x3\x2\x2"+
		"\x2\x67F\x187\x3\x2\x2\x2Y\x189\x18E\x19F\x1A4\x1AA\x1B2\x1B4\x1D0\x1DC"+
		"\x1E0\x1F5\x1F7\x20A\x20C\x219\x21D\x22E\x231\x23D\x23F\x2BF\x2C4\x2FC"+
		"\x301\x322\x327\x32C\x333\x349\x34C\x382\x38D\x38F\x3BF\x3DD\x3F2\x3F9"+
		"\x41C\x421\x42A\x42F\x434\x454\x45B\x494\x4A0\x4A5\x4B1\x4BB\x4C2\x4F6"+
		"\x500\x525\x527\x52A\x52E\x530\x533\x536\x539\x540\x550\x552\x562\x564"+
		"\x56F\x579\x580\x597\x5A6\x5A8\x5B1\x5D2\x5E3\x5EF\x5F4\x5F9\x5FE\x62D"+
		"\x63C\x641\x646\x653\x65F\x66E\x67A\x67E";
	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN.ToCharArray());
}
} // namespace ManagedClient.Pft
