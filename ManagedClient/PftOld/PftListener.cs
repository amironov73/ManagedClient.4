//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.3
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from Pft.g4 by ANTLR 4.3

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591

namespace ManagedClient.Pft {
using Antlr4.Runtime.Misc;
using IParseTreeListener = Antlr4.Runtime.Tree.IParseTreeListener;
using IToken = Antlr4.Runtime.IToken;

/// <summary>
/// This interface defines a complete listener for a parse tree produced by
/// <see cref="PftParser"/>.
/// </summary>
[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.3")]
[System.CLSCompliant(false)]
public interface IPftListener : IParseTreeListener {
	/// <summary>
	/// Enter a parse tree produced by the <c>MsgFunction</c>
	/// labeled alternative in <see cref="PftParser.formatElement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterMsgFunction([NotNull] PftParser.MsgFunctionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>MsgFunction</c>
	/// labeled alternative in <see cref="PftParser.formatElement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitMsgFunction([NotNull] PftParser.MsgFunctionContext context);

	/// <summary>
	/// Enter a parse tree produced by the <c>PortFunction</c>
	/// labeled alternative in <see cref="PftParser.formatElement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterPortFunction([NotNull] PftParser.PortFunctionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>PortFunction</c>
	/// labeled alternative in <see cref="PftParser.formatElement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitPortFunction([NotNull] PftParser.PortFunctionContext context);

	/// <summary>
	/// Enter a parse tree produced by the <c>ConditionParen</c>
	/// labeled alternative in <see cref="PftParser.condition"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterConditionParen([NotNull] PftParser.ConditionParenContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>ConditionParen</c>
	/// labeled alternative in <see cref="PftParser.condition"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitConditionParen([NotNull] PftParser.ConditionParenContext context);

	/// <summary>
	/// Enter a parse tree produced by <see cref="PftParser.arithCondition"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterArithCondition([NotNull] PftParser.ArithConditionContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="PftParser.arithCondition"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitArithCondition([NotNull] PftParser.ArithConditionContext context);

	/// <summary>
	/// Enter a parse tree produced by the <c>NoccOperator</c>
	/// labeled alternative in <see cref="PftParser.formatElement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterNoccOperator([NotNull] PftParser.NoccOperatorContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>NoccOperator</c>
	/// labeled alternative in <see cref="PftParser.formatElement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitNoccOperator([NotNull] PftParser.NoccOperatorContext context);

	/// <summary>
	/// Enter a parse tree produced by the <c>ErrorFunction</c>
	/// labeled alternative in <see cref="PftParser.formatElement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterErrorFunction([NotNull] PftParser.ErrorFunctionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>ErrorFunction</c>
	/// labeled alternative in <see cref="PftParser.formatElement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitErrorFunction([NotNull] PftParser.ErrorFunctionContext context);

	/// <summary>
	/// Enter a parse tree produced by the <c>UserFunction</c>
	/// labeled alternative in <see cref="PftParser.formatElement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterUserFunction([NotNull] PftParser.UserFunctionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>UserFunction</c>
	/// labeled alternative in <see cref="PftParser.formatElement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitUserFunction([NotNull] PftParser.UserFunctionContext context);

	/// <summary>
	/// Enter a parse tree produced by the <c>RavrFunction</c>
	/// labeled alternative in <see cref="PftParser.arithFunction"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterRavrFunction([NotNull] PftParser.RavrFunctionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>RavrFunction</c>
	/// labeled alternative in <see cref="PftParser.arithFunction"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitRavrFunction([NotNull] PftParser.RavrFunctionContext context);

	/// <summary>
	/// Enter a parse tree produced by the <c>TrimFunction</c>
	/// labeled alternative in <see cref="PftParser.formatElement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterTrimFunction([NotNull] PftParser.TrimFunctionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>TrimFunction</c>
	/// labeled alternative in <see cref="PftParser.formatElement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitTrimFunction([NotNull] PftParser.TrimFunctionContext context);

	/// <summary>
	/// Enter a parse tree produced by the <c>RequireServerFunction</c>
	/// labeled alternative in <see cref="PftParser.formatElement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterRequireServerFunction([NotNull] PftParser.RequireServerFunctionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>RequireServerFunction</c>
	/// labeled alternative in <see cref="PftParser.formatElement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitRequireServerFunction([NotNull] PftParser.RequireServerFunctionContext context);

	/// <summary>
	/// Enter a parse tree produced by the <c>IoccOperator</c>
	/// labeled alternative in <see cref="PftParser.formatElement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterIoccOperator([NotNull] PftParser.IoccOperatorContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>IoccOperator</c>
	/// labeled alternative in <see cref="PftParser.formatElement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitIoccOperator([NotNull] PftParser.IoccOperatorContext context);

	/// <summary>
	/// Enter a parse tree produced by the <c>SlashOperator</c>
	/// labeled alternative in <see cref="PftParser.formatElement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterSlashOperator([NotNull] PftParser.SlashOperatorContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>SlashOperator</c>
	/// labeled alternative in <see cref="PftParser.formatElement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitSlashOperator([NotNull] PftParser.SlashOperatorContext context);

	/// <summary>
	/// Enter a parse tree produced by the <c>ConditionArith</c>
	/// labeled alternative in <see cref="PftParser.condition"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterConditionArith([NotNull] PftParser.ConditionArithContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>ConditionArith</c>
	/// labeled alternative in <see cref="PftParser.condition"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitConditionArith([NotNull] PftParser.ConditionArithContext context);

	/// <summary>
	/// Enter a parse tree produced by the <c>ReplaceFunction</c>
	/// labeled alternative in <see cref="PftParser.formatElement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterReplaceFunction([NotNull] PftParser.ReplaceFunctionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>ReplaceFunction</c>
	/// labeled alternative in <see cref="PftParser.formatElement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitReplaceFunction([NotNull] PftParser.ReplaceFunctionContext context);

	/// <summary>
	/// Enter a parse tree produced by the <c>AskFunction</c>
	/// labeled alternative in <see cref="PftParser.formatElement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterAskFunction([NotNull] PftParser.AskFunctionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>AskFunction</c>
	/// labeled alternative in <see cref="PftParser.formatElement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitAskFunction([NotNull] PftParser.AskFunctionContext context);

	/// <summary>
	/// Enter a parse tree produced by the <c>LeftFunction</c>
	/// labeled alternative in <see cref="PftParser.formatElement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterLeftFunction([NotNull] PftParser.LeftFunctionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>LeftFunction</c>
	/// labeled alternative in <see cref="PftParser.formatElement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitLeftFunction([NotNull] PftParser.LeftFunctionContext context);

	/// <summary>
	/// Enter a parse tree produced by the <c>PercentOperator</c>
	/// labeled alternative in <see cref="PftParser.formatElement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterPercentOperator([NotNull] PftParser.PercentOperatorContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>PercentOperator</c>
	/// labeled alternative in <see cref="PftParser.formatElement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitPercentOperator([NotNull] PftParser.PercentOperatorContext context);

	/// <summary>
	/// Enter a parse tree produced by the <c>TrimRightFunction</c>
	/// labeled alternative in <see cref="PftParser.formatElement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterTrimRightFunction([NotNull] PftParser.TrimRightFunctionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>TrimRightFunction</c>
	/// labeled alternative in <see cref="PftParser.formatElement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitTrimRightFunction([NotNull] PftParser.TrimRightFunctionContext context);

	/// <summary>
	/// Enter a parse tree produced by the <c>RightFunction</c>
	/// labeled alternative in <see cref="PftParser.formatElement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterRightFunction([NotNull] PftParser.RightFunctionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>RightFunction</c>
	/// labeled alternative in <see cref="PftParser.formatElement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitRightFunction([NotNull] PftParser.RightFunctionContext context);

	/// <summary>
	/// Enter a parse tree produced by the <c>MfnValue</c>
	/// labeled alternative in <see cref="PftParser.value"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterMfnValue([NotNull] PftParser.MfnValueContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>MfnValue</c>
	/// labeled alternative in <see cref="PftParser.value"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitMfnValue([NotNull] PftParser.MfnValueContext context);

	/// <summary>
	/// Enter a parse tree produced by the <c>NoccField</c>
	/// labeled alternative in <see cref="PftParser.formatElement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterNoccField([NotNull] PftParser.NoccFieldContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>NoccField</c>
	/// labeled alternative in <see cref="PftParser.formatElement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitNoccField([NotNull] PftParser.NoccFieldContext context);

	/// <summary>
	/// Enter a parse tree produced by the <c>TraceFunction</c>
	/// labeled alternative in <see cref="PftParser.formatElement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterTraceFunction([NotNull] PftParser.TraceFunctionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>TraceFunction</c>
	/// labeled alternative in <see cref="PftParser.formatElement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitTraceFunction([NotNull] PftParser.TraceFunctionContext context);

	/// <summary>
	/// Enter a parse tree produced by the <c>ToLowerFunction</c>
	/// labeled alternative in <see cref="PftParser.formatElement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterToLowerFunction([NotNull] PftParser.ToLowerFunctionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>ToLowerFunction</c>
	/// labeled alternative in <see cref="PftParser.formatElement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitToLowerFunction([NotNull] PftParser.ToLowerFunctionContext context);

	/// <summary>
	/// Enter a parse tree produced by the <c>FieldReference</c>
	/// labeled alternative in <see cref="PftParser.formatElement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterFieldReference([NotNull] PftParser.FieldReferenceContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>FieldReference</c>
	/// labeled alternative in <see cref="PftParser.formatElement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitFieldReference([NotNull] PftParser.FieldReferenceContext context);

	/// <summary>
	/// Enter a parse tree produced by the <c>RminFunction</c>
	/// labeled alternative in <see cref="PftParser.arithFunction"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterRminFunction([NotNull] PftParser.RminFunctionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>RminFunction</c>
	/// labeled alternative in <see cref="PftParser.arithFunction"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitRminFunction([NotNull] PftParser.RminFunctionContext context);

	/// <summary>
	/// Enter a parse tree produced by the <c>HashOperator</c>
	/// labeled alternative in <see cref="PftParser.formatElement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterHashOperator([NotNull] PftParser.HashOperatorContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>HashOperator</c>
	/// labeled alternative in <see cref="PftParser.formatElement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitHashOperator([NotNull] PftParser.HashOperatorContext context);

	/// <summary>
	/// Enter a parse tree produced by the <c>CommaOperator</c>
	/// labeled alternative in <see cref="PftParser.formatElement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterCommaOperator([NotNull] PftParser.CommaOperatorContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>CommaOperator</c>
	/// labeled alternative in <see cref="PftParser.formatElement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitCommaOperator([NotNull] PftParser.CommaOperatorContext context);

	/// <summary>
	/// Enter a parse tree produced by the <c>ConditionNot</c>
	/// labeled alternative in <see cref="PftParser.condition"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterConditionNot([NotNull] PftParser.ConditionNotContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>ConditionNot</c>
	/// labeled alternative in <see cref="PftParser.condition"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitConditionNot([NotNull] PftParser.ConditionNotContext context);

	/// <summary>
	/// Enter a parse tree produced by the <c>HostFunction</c>
	/// labeled alternative in <see cref="PftParser.formatElement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterHostFunction([NotNull] PftParser.HostFunctionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>HostFunction</c>
	/// labeled alternative in <see cref="PftParser.formatElement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitHostFunction([NotNull] PftParser.HostFunctionContext context);

	/// <summary>
	/// Enter a parse tree produced by the <c>ChrFunction</c>
	/// labeled alternative in <see cref="PftParser.formatElement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterChrFunction([NotNull] PftParser.ChrFunctionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>ChrFunction</c>
	/// labeled alternative in <see cref="PftParser.formatElement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitChrFunction([NotNull] PftParser.ChrFunctionContext context);

	/// <summary>
	/// Enter a parse tree produced by the <c>ConditionField</c>
	/// labeled alternative in <see cref="PftParser.condition"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterConditionField([NotNull] PftParser.ConditionFieldContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>ConditionField</c>
	/// labeled alternative in <see cref="PftParser.condition"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitConditionField([NotNull] PftParser.ConditionFieldContext context);

	/// <summary>
	/// Enter a parse tree produced by the <c>RefFunction</c>
	/// labeled alternative in <see cref="PftParser.formatElement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterRefFunction([NotNull] PftParser.RefFunctionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>RefFunction</c>
	/// labeled alternative in <see cref="PftParser.formatElement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitRefFunction([NotNull] PftParser.RefFunctionContext context);

	/// <summary>
	/// Enter a parse tree produced by the <c>ConditionString</c>
	/// labeled alternative in <see cref="PftParser.condition"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterConditionString([NotNull] PftParser.ConditionStringContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>ConditionString</c>
	/// labeled alternative in <see cref="PftParser.condition"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitConditionString([NotNull] PftParser.ConditionStringContext context);

	/// <summary>
	/// Enter a parse tree produced by the <c>UnconditionalLiteral</c>
	/// labeled alternative in <see cref="PftParser.formatElement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterUnconditionalLiteral([NotNull] PftParser.UnconditionalLiteralContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>UnconditionalLiteral</c>
	/// labeled alternative in <see cref="PftParser.formatElement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitUnconditionalLiteral([NotNull] PftParser.UnconditionalLiteralContext context);

	/// <summary>
	/// Enter a parse tree produced by the <c>MfnWithLength</c>
	/// labeled alternative in <see cref="PftParser.formatElement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterMfnWithLength([NotNull] PftParser.MfnWithLengthContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>MfnWithLength</c>
	/// labeled alternative in <see cref="PftParser.formatElement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitMfnWithLength([NotNull] PftParser.MfnWithLengthContext context);

	/// <summary>
	/// Enter a parse tree produced by the <c>OrdFunction</c>
	/// labeled alternative in <see cref="PftParser.formatElement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterOrdFunction([NotNull] PftParser.OrdFunctionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>OrdFunction</c>
	/// labeled alternative in <see cref="PftParser.formatElement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitOrdFunction([NotNull] PftParser.OrdFunctionContext context);

	/// <summary>
	/// Enter a parse tree produced by the <c>FatalFunction</c>
	/// labeled alternative in <see cref="PftParser.formatElement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterFatalFunction([NotNull] PftParser.FatalFunctionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>FatalFunction</c>
	/// labeled alternative in <see cref="PftParser.formatElement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitFatalFunction([NotNull] PftParser.FatalFunctionContext context);

	/// <summary>
	/// Enter a parse tree produced by the <c>RequireClientFunction</c>
	/// labeled alternative in <see cref="PftParser.formatElement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterRequireClientFunction([NotNull] PftParser.RequireClientFunctionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>RequireClientFunction</c>
	/// labeled alternative in <see cref="PftParser.formatElement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitRequireClientFunction([NotNull] PftParser.RequireClientFunctionContext context);

	/// <summary>
	/// Enter a parse tree produced by the <c>IncludeStatement</c>
	/// labeled alternative in <see cref="PftParser.formatElement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterIncludeStatement([NotNull] PftParser.IncludeStatementContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>IncludeStatement</c>
	/// labeled alternative in <see cref="PftParser.formatElement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitIncludeStatement([NotNull] PftParser.IncludeStatementContext context);

	/// <summary>
	/// Enter a parse tree produced by the <c>ToUpperFunction</c>
	/// labeled alternative in <see cref="PftParser.formatElement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterToUpperFunction([NotNull] PftParser.ToUpperFunctionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>ToUpperFunction</c>
	/// labeled alternative in <see cref="PftParser.formatElement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitToUpperFunction([NotNull] PftParser.ToUpperFunctionContext context);

	/// <summary>
	/// Enter a parse tree produced by <see cref="PftParser.rigthHand"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterRigthHand([NotNull] PftParser.RigthHandContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="PftParser.rigthHand"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitRigthHand([NotNull] PftParser.RigthHandContext context);

	/// <summary>
	/// Enter a parse tree produced by the <c>ConditionalStatementOuter</c>
	/// labeled alternative in <see cref="PftParser.formatElement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterConditionalStatementOuter([NotNull] PftParser.ConditionalStatementOuterContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>ConditionalStatementOuter</c>
	/// labeled alternative in <see cref="PftParser.formatElement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitConditionalStatementOuter([NotNull] PftParser.ConditionalStatementOuterContext context);

	/// <summary>
	/// Enter a parse tree produced by the <c>GlobalReference</c>
	/// labeled alternative in <see cref="PftParser.formatElement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterGlobalReference([NotNull] PftParser.GlobalReferenceContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>GlobalReference</c>
	/// labeled alternative in <see cref="PftParser.formatElement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitGlobalReference([NotNull] PftParser.GlobalReferenceContext context);

	/// <summary>
	/// Enter a parse tree produced by the <c>ConditionAndOr</c>
	/// labeled alternative in <see cref="PftParser.condition"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterConditionAndOr([NotNull] PftParser.ConditionAndOrContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>ConditionAndOr</c>
	/// labeled alternative in <see cref="PftParser.condition"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitConditionAndOr([NotNull] PftParser.ConditionAndOrContext context);

	/// <summary>
	/// Enter a parse tree produced by the <c>CommandC</c>
	/// labeled alternative in <see cref="PftParser.formatElement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterCommandC([NotNull] PftParser.CommandCContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>CommandC</c>
	/// labeled alternative in <see cref="PftParser.formatElement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitCommandC([NotNull] PftParser.CommandCContext context);

	/// <summary>
	/// Enter a parse tree produced by the <c>FFunction</c>
	/// labeled alternative in <see cref="PftParser.formatElement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterFFunction([NotNull] PftParser.FFunctionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>FFunction</c>
	/// labeled alternative in <see cref="PftParser.formatElement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitFFunction([NotNull] PftParser.FFunctionContext context);

	/// <summary>
	/// Enter a parse tree produced by the <c>NpostFunction</c>
	/// labeled alternative in <see cref="PftParser.arithFunction"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterNpostFunction([NotNull] PftParser.NpostFunctionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>NpostFunction</c>
	/// labeled alternative in <see cref="PftParser.arithFunction"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitNpostFunction([NotNull] PftParser.NpostFunctionContext context);

	/// <summary>
	/// Enter a parse tree produced by the <c>LFunction</c>
	/// labeled alternative in <see cref="PftParser.arithFunction"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterLFunction([NotNull] PftParser.LFunctionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>LFunction</c>
	/// labeled alternative in <see cref="PftParser.arithFunction"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitLFunction([NotNull] PftParser.LFunctionContext context);

	/// <summary>
	/// Enter a parse tree produced by the <c>MessageFunction</c>
	/// labeled alternative in <see cref="PftParser.formatElement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterMessageFunction([NotNull] PftParser.MessageFunctionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>MessageFunction</c>
	/// labeled alternative in <see cref="PftParser.formatElement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitMessageFunction([NotNull] PftParser.MessageFunctionContext context);

	/// <summary>
	/// Enter a parse tree produced by the <c>ProcFunction</c>
	/// labeled alternative in <see cref="PftParser.formatElement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterProcFunction([NotNull] PftParser.ProcFunctionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>ProcFunction</c>
	/// labeled alternative in <see cref="PftParser.formatElement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitProcFunction([NotNull] PftParser.ProcFunctionContext context);

	/// <summary>
	/// Enter a parse tree produced by <see cref="PftParser.arithExpr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterArithExpr([NotNull] PftParser.ArithExprContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="PftParser.arithExpr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitArithExpr([NotNull] PftParser.ArithExprContext context);

	/// <summary>
	/// Enter a parse tree produced by the <c>MstNameFunction</c>
	/// labeled alternative in <see cref="PftParser.formatElement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterMstNameFunction([NotNull] PftParser.MstNameFunctionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>MstNameFunction</c>
	/// labeled alternative in <see cref="PftParser.formatElement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitMstNameFunction([NotNull] PftParser.MstNameFunctionContext context);

	/// <summary>
	/// Enter a parse tree produced by the <c>BreakOperator</c>
	/// labeled alternative in <see cref="PftParser.formatElement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterBreakOperator([NotNull] PftParser.BreakOperatorContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>BreakOperator</c>
	/// labeled alternative in <see cref="PftParser.formatElement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitBreakOperator([NotNull] PftParser.BreakOperatorContext context);

	/// <summary>
	/// Enter a parse tree produced by the <c>ArithFunctionOuter</c>
	/// labeled alternative in <see cref="PftParser.value"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterArithFunctionOuter([NotNull] PftParser.ArithFunctionOuterContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>ArithFunctionOuter</c>
	/// labeled alternative in <see cref="PftParser.value"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitArithFunctionOuter([NotNull] PftParser.ArithFunctionOuterContext context);

	/// <summary>
	/// Enter a parse tree produced by the <c>ClientVersionFunction</c>
	/// labeled alternative in <see cref="PftParser.formatElement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterClientVersionFunction([NotNull] PftParser.ClientVersionFunctionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>ClientVersionFunction</c>
	/// labeled alternative in <see cref="PftParser.formatElement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitClientVersionFunction([NotNull] PftParser.ClientVersionFunctionContext context);

	/// <summary>
	/// Enter a parse tree produced by the <c>ServerVersionFunction</c>
	/// labeled alternative in <see cref="PftParser.formatElement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterServerVersionFunction([NotNull] PftParser.ServerVersionFunctionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>ServerVersionFunction</c>
	/// labeled alternative in <see cref="PftParser.formatElement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitServerVersionFunction([NotNull] PftParser.ServerVersionFunctionContext context);

	/// <summary>
	/// Enter a parse tree produced by the <c>SystemFunction</c>
	/// labeled alternative in <see cref="PftParser.formatElement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterSystemFunction([NotNull] PftParser.SystemFunctionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>SystemFunction</c>
	/// labeled alternative in <see cref="PftParser.formatElement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitSystemFunction([NotNull] PftParser.SystemFunctionContext context);

	/// <summary>
	/// Enter a parse tree produced by the <c>RmaxFunction</c>
	/// labeled alternative in <see cref="PftParser.arithFunction"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterRmaxFunction([NotNull] PftParser.RmaxFunctionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>RmaxFunction</c>
	/// labeled alternative in <see cref="PftParser.arithFunction"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitRmaxFunction([NotNull] PftParser.RmaxFunctionContext context);

	/// <summary>
	/// Enter a parse tree produced by the <c>CatFunction</c>
	/// labeled alternative in <see cref="PftParser.formatElement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterCatFunction([NotNull] PftParser.CatFunctionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>CatFunction</c>
	/// labeled alternative in <see cref="PftParser.formatElement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitCatFunction([NotNull] PftParser.CatFunctionContext context);

	/// <summary>
	/// Enter a parse tree produced by the <c>CommandX</c>
	/// labeled alternative in <see cref="PftParser.formatElement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterCommandX([NotNull] PftParser.CommandXContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>CommandX</c>
	/// labeled alternative in <see cref="PftParser.formatElement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitCommandX([NotNull] PftParser.CommandXContext context);

	/// <summary>
	/// Enter a parse tree produced by the <c>IncludeFunction</c>
	/// labeled alternative in <see cref="PftParser.formatElement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterIncludeFunction([NotNull] PftParser.IncludeFunctionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>IncludeFunction</c>
	/// labeled alternative in <see cref="PftParser.formatElement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitIncludeFunction([NotNull] PftParser.IncludeFunctionContext context);

	/// <summary>
	/// Enter a parse tree produced by the <c>PadFunction</c>
	/// labeled alternative in <see cref="PftParser.formatElement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterPadFunction([NotNull] PftParser.PadFunctionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>PadFunction</c>
	/// labeled alternative in <see cref="PftParser.formatElement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitPadFunction([NotNull] PftParser.PadFunctionContext context);

	/// <summary>
	/// Enter a parse tree produced by the <c>ParenthesisExpression</c>
	/// labeled alternative in <see cref="PftParser.value"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterParenthesisExpression([NotNull] PftParser.ParenthesisExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>ParenthesisExpression</c>
	/// labeled alternative in <see cref="PftParser.value"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitParenthesisExpression([NotNull] PftParser.ParenthesisExpressionContext context);

	/// <summary>
	/// Enter a parse tree produced by the <c>OrganizationFunction</c>
	/// labeled alternative in <see cref="PftParser.formatElement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterOrganizationFunction([NotNull] PftParser.OrganizationFunctionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>OrganizationFunction</c>
	/// labeled alternative in <see cref="PftParser.formatElement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitOrganizationFunction([NotNull] PftParser.OrganizationFunctionContext context);

	/// <summary>
	/// Enter a parse tree produced by the <c>SFunction</c>
	/// labeled alternative in <see cref="PftParser.formatElement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterSFunction([NotNull] PftParser.SFunctionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>SFunction</c>
	/// labeled alternative in <see cref="PftParser.formatElement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitSFunction([NotNull] PftParser.SFunctionContext context);

	/// <summary>
	/// Enter a parse tree produced by the <c>PutEnvFunction</c>
	/// labeled alternative in <see cref="PftParser.formatElement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterPutEnvFunction([NotNull] PftParser.PutEnvFunctionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>PutEnvFunction</c>
	/// labeled alternative in <see cref="PftParser.formatElement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitPutEnvFunction([NotNull] PftParser.PutEnvFunctionContext context);

	/// <summary>
	/// Enter a parse tree produced by the <c>DebugFunction</c>
	/// labeled alternative in <see cref="PftParser.formatElement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterDebugFunction([NotNull] PftParser.DebugFunctionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>DebugFunction</c>
	/// labeled alternative in <see cref="PftParser.formatElement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitDebugFunction([NotNull] PftParser.DebugFunctionContext context);

	/// <summary>
	/// Enter a parse tree produced by <see cref="PftParser.leftHand"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterLeftHand([NotNull] PftParser.LeftHandContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="PftParser.leftHand"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitLeftHand([NotNull] PftParser.LeftHandContext context);

	/// <summary>
	/// Enter a parse tree produced by the <c>PadLeftFunction</c>
	/// labeled alternative in <see cref="PftParser.formatElement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterPadLeftFunction([NotNull] PftParser.PadLeftFunctionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>PadLeftFunction</c>
	/// labeled alternative in <see cref="PftParser.formatElement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitPadLeftFunction([NotNull] PftParser.PadLeftFunctionContext context);

	/// <summary>
	/// Enter a parse tree produced by <see cref="PftParser.fieldPresense"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterFieldPresense([NotNull] PftParser.FieldPresenseContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="PftParser.fieldPresense"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitFieldPresense([NotNull] PftParser.FieldPresenseContext context);

	/// <summary>
	/// Enter a parse tree produced by the <c>MidFunction</c>
	/// labeled alternative in <see cref="PftParser.formatElement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterMidFunction([NotNull] PftParser.MidFunctionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>MidFunction</c>
	/// labeled alternative in <see cref="PftParser.formatElement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitMidFunction([NotNull] PftParser.MidFunctionContext context);

	/// <summary>
	/// Enter a parse tree produced by the <c>FormatExit</c>
	/// labeled alternative in <see cref="PftParser.formatElement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterFormatExit([NotNull] PftParser.FormatExitContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>FormatExit</c>
	/// labeled alternative in <see cref="PftParser.formatElement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitFormatExit([NotNull] PftParser.FormatExitContext context);

	/// <summary>
	/// Enter a parse tree produced by <see cref="PftParser.statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterStatement([NotNull] PftParser.StatementContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="PftParser.statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitStatement([NotNull] PftParser.StatementContext context);

	/// <summary>
	/// Enter a parse tree produced by the <c>TypeFunction</c>
	/// labeled alternative in <see cref="PftParser.formatElement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterTypeFunction([NotNull] PftParser.TypeFunctionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>TypeFunction</c>
	/// labeled alternative in <see cref="PftParser.formatElement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitTypeFunction([NotNull] PftParser.TypeFunctionContext context);

	/// <summary>
	/// Enter a parse tree produced by <see cref="PftParser.conditionalStatement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterConditionalStatement([NotNull] PftParser.ConditionalStatementContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="PftParser.conditionalStatement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitConditionalStatement([NotNull] PftParser.ConditionalStatementContext context);

	/// <summary>
	/// Enter a parse tree produced by the <c>PadRightFunction</c>
	/// labeled alternative in <see cref="PftParser.formatElement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterPadRightFunction([NotNull] PftParser.PadRightFunctionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>PadRightFunction</c>
	/// labeled alternative in <see cref="PftParser.formatElement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitPadRightFunction([NotNull] PftParser.PadRightFunctionContext context);

	/// <summary>
	/// Enter a parse tree produced by <see cref="PftParser.stringTest"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterStringTest([NotNull] PftParser.StringTestContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="PftParser.stringTest"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitStringTest([NotNull] PftParser.StringTestContext context);

	/// <summary>
	/// Enter a parse tree produced by the <c>SimpleDate</c>
	/// labeled alternative in <see cref="PftParser.formatElement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterSimpleDate([NotNull] PftParser.SimpleDateContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>SimpleDate</c>
	/// labeled alternative in <see cref="PftParser.formatElement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitSimpleDate([NotNull] PftParser.SimpleDateContext context);

	/// <summary>
	/// Enter a parse tree produced by the <c>MinusExpression</c>
	/// labeled alternative in <see cref="PftParser.value"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterMinusExpression([NotNull] PftParser.MinusExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>MinusExpression</c>
	/// labeled alternative in <see cref="PftParser.value"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitMinusExpression([NotNull] PftParser.MinusExpressionContext context);

	/// <summary>
	/// Enter a parse tree produced by <see cref="PftParser.program"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterProgram([NotNull] PftParser.ProgramContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="PftParser.program"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitProgram([NotNull] PftParser.ProgramContext context);

	/// <summary>
	/// Enter a parse tree produced by the <c>ModeSwitch</c>
	/// labeled alternative in <see cref="PftParser.formatElement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterModeSwitch([NotNull] PftParser.ModeSwitchContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>ModeSwitch</c>
	/// labeled alternative in <see cref="PftParser.formatElement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitModeSwitch([NotNull] PftParser.ModeSwitchContext context);

	/// <summary>
	/// Enter a parse tree produced by the <c>ValFunction</c>
	/// labeled alternative in <see cref="PftParser.arithFunction"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterValFunction([NotNull] PftParser.ValFunctionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>ValFunction</c>
	/// labeled alternative in <see cref="PftParser.arithFunction"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitValFunction([NotNull] PftParser.ValFunctionContext context);

	/// <summary>
	/// Enter a parse tree produced by the <c>FormattedTime</c>
	/// labeled alternative in <see cref="PftParser.formatElement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterFormattedTime([NotNull] PftParser.FormattedTimeContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>FormattedTime</c>
	/// labeled alternative in <see cref="PftParser.formatElement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitFormattedTime([NotNull] PftParser.FormattedTimeContext context);

	/// <summary>
	/// Enter a parse tree produced by the <c>GetEnvFunction</c>
	/// labeled alternative in <see cref="PftParser.formatElement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterGetEnvFunction([NotNull] PftParser.GetEnvFunctionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>GetEnvFunction</c>
	/// labeled alternative in <see cref="PftParser.formatElement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitGetEnvFunction([NotNull] PftParser.GetEnvFunctionContext context);

	/// <summary>
	/// Enter a parse tree produced by the <c>NowFunction</c>
	/// labeled alternative in <see cref="PftParser.formatElement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterNowFunction([NotNull] PftParser.NowFunctionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>NowFunction</c>
	/// labeled alternative in <see cref="PftParser.formatElement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitNowFunction([NotNull] PftParser.NowFunctionContext context);

	/// <summary>
	/// Enter a parse tree produced by the <c>IntegerValue</c>
	/// labeled alternative in <see cref="PftParser.value"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterIntegerValue([NotNull] PftParser.IntegerValueContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>IntegerValue</c>
	/// labeled alternative in <see cref="PftParser.value"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitIntegerValue([NotNull] PftParser.IntegerValueContext context);

	/// <summary>
	/// Enter a parse tree produced by the <c>SimpleMfn</c>
	/// labeled alternative in <see cref="PftParser.formatElement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterSimpleMfn([NotNull] PftParser.SimpleMfnContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>SimpleMfn</c>
	/// labeled alternative in <see cref="PftParser.formatElement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitSimpleMfn([NotNull] PftParser.SimpleMfnContext context);

	/// <summary>
	/// Enter a parse tree produced by the <c>FormattedDate</c>
	/// labeled alternative in <see cref="PftParser.formatElement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterFormattedDate([NotNull] PftParser.FormattedDateContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>FormattedDate</c>
	/// labeled alternative in <see cref="PftParser.formatElement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitFormattedDate([NotNull] PftParser.FormattedDateContext context);

	/// <summary>
	/// Enter a parse tree produced by the <c>SimpleTime</c>
	/// labeled alternative in <see cref="PftParser.formatElement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterSimpleTime([NotNull] PftParser.SimpleTimeContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>SimpleTime</c>
	/// labeled alternative in <see cref="PftParser.formatElement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitSimpleTime([NotNull] PftParser.SimpleTimeContext context);

	/// <summary>
	/// Enter a parse tree produced by the <c>TrimLeftFunction</c>
	/// labeled alternative in <see cref="PftParser.formatElement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterTrimLeftFunction([NotNull] PftParser.TrimLeftFunctionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>TrimLeftFunction</c>
	/// labeled alternative in <see cref="PftParser.formatElement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitTrimLeftFunction([NotNull] PftParser.TrimLeftFunctionContext context);

	/// <summary>
	/// Enter a parse tree produced by the <c>WarningFunction</c>
	/// labeled alternative in <see cref="PftParser.formatElement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterWarningFunction([NotNull] PftParser.WarningFunctionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>WarningFunction</c>
	/// labeled alternative in <see cref="PftParser.formatElement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitWarningFunction([NotNull] PftParser.WarningFunctionContext context);

	/// <summary>
	/// Enter a parse tree produced by the <c>FloatValue</c>
	/// labeled alternative in <see cref="PftParser.value"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterFloatValue([NotNull] PftParser.FloatValueContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>FloatValue</c>
	/// labeled alternative in <see cref="PftParser.value"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitFloatValue([NotNull] PftParser.FloatValueContext context);

	/// <summary>
	/// Enter a parse tree produced by the <c>EscapedLiteral</c>
	/// labeled alternative in <see cref="PftParser.formatElement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterEscapedLiteral([NotNull] PftParser.EscapedLiteralContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>EscapedLiteral</c>
	/// labeled alternative in <see cref="PftParser.formatElement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitEscapedLiteral([NotNull] PftParser.EscapedLiteralContext context);

	/// <summary>
	/// Enter a parse tree produced by <see cref="PftParser.groupStatement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterGroupStatement([NotNull] PftParser.GroupStatementContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="PftParser.groupStatement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitGroupStatement([NotNull] PftParser.GroupStatementContext context);

	/// <summary>
	/// Enter a parse tree produced by the <c>SizeFunction</c>
	/// labeled alternative in <see cref="PftParser.arithFunction"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterSizeFunction([NotNull] PftParser.SizeFunctionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>SizeFunction</c>
	/// labeled alternative in <see cref="PftParser.arithFunction"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitSizeFunction([NotNull] PftParser.SizeFunctionContext context);

	/// <summary>
	/// Enter a parse tree produced by the <c>LiteralQuote</c>
	/// labeled alternative in <see cref="PftParser.formatElement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterLiteralQuote([NotNull] PftParser.LiteralQuoteContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>LiteralQuote</c>
	/// labeled alternative in <see cref="PftParser.formatElement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitLiteralQuote([NotNull] PftParser.LiteralQuoteContext context);

	/// <summary>
	/// Enter a parse tree produced by the <c>DatabaseFunction</c>
	/// labeled alternative in <see cref="PftParser.formatElement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterDatabaseFunction([NotNull] PftParser.DatabaseFunctionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>DatabaseFunction</c>
	/// labeled alternative in <see cref="PftParser.formatElement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitDatabaseFunction([NotNull] PftParser.DatabaseFunctionContext context);

	/// <summary>
	/// Enter a parse tree produced by the <c>BeepFunction</c>
	/// labeled alternative in <see cref="PftParser.formatElement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterBeepFunction([NotNull] PftParser.BeepFunctionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>BeepFunction</c>
	/// labeled alternative in <see cref="PftParser.formatElement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitBeepFunction([NotNull] PftParser.BeepFunctionContext context);

	/// <summary>
	/// Enter a parse tree produced by <see cref="PftParser.nonGrouped"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterNonGrouped([NotNull] PftParser.NonGroupedContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="PftParser.nonGrouped"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitNonGrouped([NotNull] PftParser.NonGroupedContext context);

	/// <summary>
	/// Enter a parse tree produced by the <c>RsumFunction</c>
	/// labeled alternative in <see cref="PftParser.arithFunction"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterRsumFunction([NotNull] PftParser.RsumFunctionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>RsumFunction</c>
	/// labeled alternative in <see cref="PftParser.arithFunction"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitRsumFunction([NotNull] PftParser.RsumFunctionContext context);

	/// <summary>
	/// Enter a parse tree produced by the <c>DebugBreak</c>
	/// labeled alternative in <see cref="PftParser.formatElement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterDebugBreak([NotNull] PftParser.DebugBreakContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>DebugBreak</c>
	/// labeled alternative in <see cref="PftParser.formatElement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitDebugBreak([NotNull] PftParser.DebugBreakContext context);
}
} // namespace ManagedClient.Pft
